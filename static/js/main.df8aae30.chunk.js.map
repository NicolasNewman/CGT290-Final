{"version":3,"sources":["reportWebVitals.ts","components/Home.tsx","components/Charts/TransactionHistory.tsx","components/Story.tsx","App.tsx","classes/DataParser.ts","components/Root.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Home","props","href","this","data","guilds","length","global","Component","TransactionHistory","min","Date","max","console","log","dates","forEach","key","push","day","value","dateMap","date","style","width","height","to","from","Story","App","className","exact","activeClassName","path","React","PureComponent","DataParser","redirect","buyerMap","buyers","sellerMap","sellers","itemMap","items","guildMap","fetch","res","text","parse","worker","header","step","row","undefined","timestamp","name","item","insert","buyer","seller","guild","split","complete","Object","keys","delimiter","record","map","Root","parser","history","component","getDataTable","withRouter","createBrowserHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.df8aae30.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Home extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Overview</h1>\r\n                <p>\r\n                    In the Elder Scrolls Online (ESO), trading is done through\r\n                    traders owned by guilds. Each week guilds can bid on a\r\n                    trader and the guild with the highest bid gets to use that\r\n                    trader for the week. Traders are located in every major\r\n                    town, and since some are more populated then others, the\r\n                    average bid on a trader varies grately by location.\r\n                    <br />\r\n                    <br />\r\n                    Any player can go to these traders and use their gold to\r\n                    purchase items they desire, but only members of the guild\r\n                    can sell items through that trader. When a player purchases\r\n                    an item, a majority of the gold goes to the seller, but a\r\n                    small portion is taken as tax for the guild.\r\n                </p>\r\n                <h1>Analysis</h1>\r\n                <p>\r\n                    The goal of my analysis is to determine if ESO follows an\r\n                    economic model of perfect competition. For those unfimilar\r\n                    with economics, a market that is perfectly competitive has\r\n                    the following characteristics:\r\n                </p>\r\n                <ol>\r\n                    <li>Competition is at its greatest possible level</li>\r\n                    <li>\r\n                        There is perfect knowledge, with no time lags in the\r\n                        flow of information\r\n                    </li>\r\n                    <li>\r\n                        There are no barries to entry into or exit out of the\r\n                        market\r\n                    </li>\r\n                    <li>\r\n                        No single seller can influence the market price or\r\n                        conditions\r\n                    </li>\r\n                </ol>\r\n                <h1>Data</h1>\r\n                <p>\r\n                    In ESO, guild trader data is only visible to members within\r\n                    that guild, and only the past 10 days of sales are kept. A\r\n                    player by the name of Sharlikran created a program called{' '}\r\n                    <a href=\"https://www.esoui.com/downloads/info2753-MasterMerchant3.0.html\">\r\n                        Master Merchant\r\n                    </a>{' '}\r\n                    to analyze and collect this data. Unfortunetly, this means\r\n                    the data set used is limited to traders I have access too.\r\n                    <br />\r\n                    <br />\r\n                    Overall, data was recorded for{' '}\r\n                    {this.props.data.guilds.length} guilds, with{' '}\r\n                    {this.props.data.global.length} transactions being recorded\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class TransactionHistory extends Component<IProps> {\r\n    props!: IProps;\r\n    data: { day: string; value: number }[] = [];\r\n    min: Date = new Date('2100-1-1');\r\n    max: Date = new Date('1990-1-1');\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        console.log(props);\r\n        props.data.dates.forEach((key) => {\r\n            this.data.push({\r\n                day: key,\r\n                value: props.data.dateMap[key].length,\r\n            });\r\n            const date = new Date(key);\r\n            if (date < this.min) {\r\n                this.min = date;\r\n            }\r\n            if (date > this.max) {\r\n                this.max = date;\r\n            }\r\n        });\r\n        // for (let key in props.data.dates) {\r\n        //     if (!props.data.dateMap[key]) {\r\n        //         console.log(key);\r\n        //         continue;\r\n        //     }\r\n        //     this.data.push({\r\n        //         day: key,\r\n        //         value: props.data.dateMap[key].length,\r\n        //     });\r\n        //     const date = new Date(key);\r\n        //     if (date < this.min) {\r\n        //         this.min = date;\r\n        //     }\r\n        //     if (date > this.max) {\r\n        //         this.max = date;\r\n        //     }\r\n        // }\r\n        console.log(this.data);\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ width: '100%', height: '225px' }}>\r\n                <ResponsiveCalendar\r\n                    data={this.data}\r\n                    to={this.max}\r\n                    from={this.min}\r\n                    // from=\"2020-01-01\"\r\n                    // to=\"2021-05-01\"\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport TransactionHistory from './Charts/TransactionHistory';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Story extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Transaction History</h1>\r\n                <TransactionHistory data={this.props.data} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n} from 'react-router-dom';\r\n\r\nimport Home from './components/Home';\r\nimport Story from './components/Story';\r\nimport { DataTable } from './classes/DataParser';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class App extends React.PureComponent<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>The Economy of ESO</h1>\r\n                <nav className=\"nav\">\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/home\"\r\n                            >\r\n                                Home\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/story\"\r\n                            >\r\n                                Story\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/temp\"\r\n                            >\r\n                                Explore\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <Switch>\r\n                    <Route path=\"/app/story\">\r\n                        <Story data={this.props.data} />\r\n                    </Route>\r\n                    <Route path=\"/app/home\">\r\n                        <Home data={this.props.data} />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","// import { Record } from '../data_dump';\r\nimport { parse, ParseResult } from 'papaparse';\r\n\r\nexport interface DataTable {\r\n    global: Record[];\r\n    buyerMap: { [name: string]: Record[] };\r\n    buyers: string[];\r\n    sellerMap: { [name: string]: Record[] };\r\n    sellers: string[];\r\n    itemMap: { [item: string]: Record[] };\r\n    items: string[];\r\n    guildMap: { [guild: string]: Record[] };\r\n    guilds: string[];\r\n    dateMap: { [date: string]: Record[] };\r\n    dates: string[];\r\n}\r\n\r\ninterface Record {\r\n    buyer: string;\r\n    guild: string;\r\n    item: string;\r\n    price: string;\r\n    quant: string;\r\n    seller: string;\r\n    timestamp: string;\r\n}\r\n\r\nexport default class DataParser {\r\n    global: Record[] = [];\r\n    buyerMap: { [name: string]: Record[] } = {};\r\n    buyers: string[] = [];\r\n    sellerMap: { [name: string]: Record[] } = {};\r\n    sellers: string[] = [];\r\n    itemMap: { [item: string]: Record[] } = {};\r\n    items: string[] = [];\r\n    guildMap: { [guild: string]: Record[] } = {};\r\n    guilds: string[] = [];\r\n    dateMap: { [date: string]: Record[] } = {};\r\n    dates: string[] = [];\r\n\r\n    private insert(\r\n        key: string,\r\n        record: Record,\r\n        map: { [key: string]: Record[] }\r\n    ) {\r\n        if (map[key] === undefined) {\r\n            map[key] = [];\r\n        }\r\n        map[key].push(record);\r\n    }\r\n\r\n    constructor(redirect: () => void) {\r\n        fetch('NicolasNewman/CGT290-Final/master/data/data.csv')\r\n            .then((res) => res.text())\r\n            .then((text) => {\r\n                parse<Record>(text, {\r\n                    worker: true,\r\n                    header: true,\r\n\r\n                    step: (row) => {\r\n                        const data = (row.data as unknown) as Record;\r\n                        this.global.push(data);\r\n                        if (data.timestamp === undefined) {\r\n                            return;\r\n                        }\r\n\r\n                        const name = data.item;\r\n                        this.insert(name, data, this.itemMap);\r\n                        const buyer = data.buyer;\r\n                        this.insert(buyer, data, this.buyerMap);\r\n                        const seller = data.seller;\r\n                        this.insert(seller, data, this.sellerMap);\r\n                        const guild = data.guild;\r\n                        this.insert(guild, data, this.guildMap);\r\n\r\n                        const date = data.timestamp.split(' ')[0];\r\n                        if (!this.dateMap[date]) {\r\n                            this.dates.push(date);\r\n                        }\r\n                        this.insert(date, data, this.dateMap);\r\n                    },\r\n                    complete: () => {\r\n                        console.log('Done!');\r\n                        console.log(this.global[0]);\r\n                        console.log(this.global.length);\r\n                        console.log(this.dateMap);\r\n                        this.items = Object.keys(this.itemMap);\r\n                        this.buyers = Object.keys(this.buyerMap);\r\n                        this.sellers = Object.keys(this.sellerMap);\r\n                        this.guilds = Object.keys(this.guildMap);\r\n                        redirect();\r\n                    },\r\n                    delimiter: '#',\r\n                });\r\n            });\r\n    }\r\n\r\n    getDataTable(): DataTable {\r\n        return {\r\n            global: this.global,\r\n            sellerMap: this.sellerMap,\r\n            sellers: this.sellers,\r\n            buyerMap: this.buyerMap,\r\n            buyers: this.buyers,\r\n            itemMap: this.itemMap,\r\n            items: this.items,\r\n            guildMap: this.guildMap,\r\n            guilds: this.guilds,\r\n            dateMap: this.dateMap,\r\n            dates: this.dates,\r\n        };\r\n    }\r\n}\r\n","import * as React from 'react';\r\nimport {\r\n    Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n    useHistory,\r\n    Redirect,\r\n    RouteComponentProps,\r\n    withRouter,\r\n} from 'react-router-dom';\r\nimport App from '../App';\r\nimport DataParser from '../classes/DataParser';\r\n\r\ninterface IProps extends RouteComponentProps<any> {}\r\n\r\nclass Root extends React.Component<IProps> {\r\n    props!: IProps;\r\n    parser: DataParser;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.parser = new DataParser(this.redirect);\r\n        console.log(props);\r\n    }\r\n\r\n    redirect = () => {\r\n        console.log('here');\r\n        this.props.history.push('/app');\r\n        console.log(this.props.history);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Switch>\r\n                <Route\r\n                    path=\"/app\"\r\n                    component={() => {\r\n                        return <App data={this.parser.getDataTable()} />;\r\n                    }}\r\n                />\r\n                <Route path=\"/loading\">\r\n                    <div>\r\n                        <p>Please wait while the app processes the data</p>\r\n                    </div>\r\n                </Route>\r\n                <Redirect from=\"/\" to=\"/loading\" />\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Root);\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Router } from 'react-router-dom';\r\nimport Root from './components/Root';\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory();\r\n// const parser = new DataParser();\r\n\r\nReactDOM.render(\r\n    <Router history={history}>\r\n        <Root />\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}