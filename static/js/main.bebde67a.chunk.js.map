{"version":3,"sources":["classes/DataParser.ts","classes/ItemLink.ts","reportWebVitals.ts","components/Home.tsx","text/mmSample.ts","text/pyMain.ts","text/pyAnon.ts","text/pyRead.ts","text/pyTableau.ts","components/Charts/TransactionHistory.tsx","components/Charts/SellerBars.tsx","components/Charts/ItemTreemap.tsx","components/Charts/MotifTracker.tsx","components/Charts/ChordChart.tsx","components/Charts/WritSunburst.tsx","components/Story.tsx","perfect_comp.png","components/Analysis/PlayerScatterPlot.tsx","components/Analysis/PriceTakerPlot.tsx","components/Analysis/ItemScatterPlot.tsx","components/Analysis.tsx","App.tsx","spinner.png","components/Root.tsx","index.tsx"],"names":["DataParser","redirect","updateStage","global","buyerMap","buyers","sellerMap","sellers","itemMap","items","guildMap","guilds","dateMap","dates","writs","ALCHEMY","BLACKSMITHING","CLOTHIER","ENCHANTING","JEWELRY","PROVISIONING","WOODWORKING","i","len","url","process","versions","node","console","log","fetch","then","res","text","parse","worker","header","step","row","data","push","undefined","timestamp","name","item","insert","buyer","seller","guild","date","split","itemlink","link","ItemLink","writType","complete","length","Object","keys","delimiter","key","record","map","Math","ceil","this","itemLink","itemType","id","parseInt","subType","internalLevel","enchantID","enchantSubType","enchantLevel","transmuteTrait","writ1","writ2","writ3","writ4","writ5","writ6","itemStyle","crafted","bound","stolen","charges","potionEffect","writReward","inRange","equals","min","max","val","num","found","args","forEach","arg","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Home","props","href","style","a11yDark","language","wrapLongLines","Component","TransactionHistory","Date","avg","guildArr","exclude","includes","value","day","getMonth","getDate","getFullYear","getDay","className","dateToString","floor","reduce","prev","curr","width","height","to","from","tooltip","dateToDayOfWeek","padding","color","SellerBars","state","totalSaleCount","totalSaleValue","tempRecords","tableData","player","origRecords","saleValue","rec","isNaN","price","saleCount","nil","sort","a","b","count","toLocaleString","position","indexBy","groupMode","margin","top","right","bottom","left","colors","theme","textColor","axisLeft","legends","anchor","itemWidth","itemHeight","dataFrom","direction","labelTextColor","opacity","enableGridY","labelFormat","onClick","playerID","indexValue","entry","setState","zIndex","type","e","dataSource","columns","title","dataIndex","sorter","ItemTreemap","children","scatterData","perItemSaleValue","quant","round","identity","valueFormat","labelSkipSize","parentLabelTextColor","modifiers","borderColor","leavesOnly","square","records","newData","x","format","y","xScale","useUTC","precision","xFormat","yScale","stacked","legend","legendOffset","axisBottom","tickValues","point","serieId","formattedX","display","gridTemplate","child","marginTop","motifs","filter","test","motif","tempRecord","earliestDate","formatDate","temp","values","d","useMesh","curve","scheme","translateX","enableSlices","yFormatted","xFormatted","ChordChart","matrix","Title","obj","center","textAnchor","fill","fontWeight","s2t","t2s","sellerArr","acc","slice","playerToIndex","pairings","pairing","reversed","pair","tempKeys","index","Array","layers","arcTooltip","arc","formattedValue","ribbonTooltip","ribbon","source","target","labelRotation","onRibbonClick","quantity","dateName","marginRight","getTime","WritSunburst","compileAlchemyData","compileBSData","compileClothierData","compileWoodworkingData","compileEnchantingData","alchemyWrits","potionData","poisonData","writ","bsWrits","bs_weapon_1h_yellowData","bs_weapon_1h_purpleData","bs_weapon_2h_yellowData","bs_weapon_2h_purpleData","bs_weapon_Data","bs_armor_yellowData","bs_armor_purpleData","bs_armor_Data","itemQuality","update_quality","purpleData","yellowData","updateBSData","clothierWrits","clo_light_purple_armor","clo_light_yellow_armor","clo_light_armor","clo_medium_purple_armor","clo_medium_yellow_armor","clo_medium_armor","updateData","woodworkingWrits","wood_weapons_purple","wood_weapons_yellow","wood_weapons","wood_shield_purple_armor","wood_shield_yellow_armor","wood_armor","enableArcLabels","arcLabelsSkipAngle","Story","paddingBottom","PlayerScatterPlot","yMax","Number","MIN_VALUE","innerWidth","players","playerRecords","yFormat","justify","translateY","itemsSpacing","itemDirection","symbolSize","symbolShape","effects","on","itemOpacity","join","PriceTakerPlot","recordsPerPlayer","recordsForItem","portfolio","computeStat","show","toString","ItemScatterPlot","entries","recordDate","dateStart","dateEnd","formattedY","Analysis","content","src","ImgPerfectCompetition","alt","trigger","QuestionCircleOutlined","arr","Set","App","exact","activeClassName","path","React","PureComponent","Root","parser","setStageText","stageText","history","getDataTable","location","pathname","component","textAlign","spinner","animationName","animationDuration","animationIterationCount","background","withRouter","createBrowserHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bebde67a.chunk.js","sourcesContent":["// import { Record } from '../data_dump';\r\nimport { parse, ParseResult } from 'papaparse';\r\nimport ItemLink, { WritType } from './ItemLink';\r\n\r\nexport interface DataTable {\r\n    global: Record[];\r\n    buyerMap: { [name: string]: Record[] };\r\n    buyers: string[];\r\n    sellerMap: { [name: string]: Record[] };\r\n    sellers: string[];\r\n    itemMap: { [item: string]: Record[] };\r\n    items: string[];\r\n    guildMap: { [guild: string]: Record[] };\r\n    guilds: string[];\r\n    dateMap: { [date: string]: Record[] };\r\n    dates: string[];\r\n    writs: { [key in WritType]: ItemLink[] };\r\n}\r\n\r\nexport interface Record {\r\n    buyer: string;\r\n    guild: string;\r\n    item: string;\r\n    price: string;\r\n    quant: string;\r\n    seller: string;\r\n    timestamp: string;\r\n    itemlink: string;\r\n}\r\n\r\nexport default class DataParser {\r\n    global: Record[] = [];\r\n    buyerMap: { [name: string]: Record[] } = {};\r\n    buyers: string[] = [];\r\n    sellerMap: { [name: string]: Record[] } = {};\r\n    sellers: string[] = [];\r\n    itemMap: { [item: string]: Record[] } = {};\r\n    items: string[] = [];\r\n    guildMap: { [guild: string]: Record[] } = {};\r\n    guilds: string[] = [];\r\n    dateMap: { [date: string]: Record[] } = {};\r\n    dates: string[] = [];\r\n    writs: { [key in WritType]: ItemLink[] } = {\r\n        ALCHEMY: [],\r\n        BLACKSMITHING: [],\r\n        CLOTHIER: [],\r\n        ENCHANTING: [],\r\n        JEWELRY: [],\r\n        PROVISIONING: [],\r\n        WOODWORKING: [],\r\n    };\r\n\r\n    i: number = 0;\r\n    len: number = 1;\r\n\r\n    private insert(\r\n        key: string,\r\n        record: Record,\r\n        map: { [key: string]: Record[] }\r\n    ) {\r\n        if (map[key] === undefined) {\r\n            map[key] = [];\r\n        }\r\n        map[key].push(record);\r\n    }\r\n\r\n    getProgress() {\r\n        return Math.ceil((this.i / this.len) * 100);\r\n    }\r\n\r\n    constructor(redirect: () => void, updateStage: (text: string) => void) {\r\n        updateStage('Fetching data...');\r\n        const isNode =\r\n            typeof process !== 'undefined' &&\r\n            process.versions != null &&\r\n            process.versions.node != null;\r\n        const url = isNode\r\n            ? 'NicolasNewman/CGT290-Final/master/data/data.csv'\r\n            : 'https://raw.githubusercontent.com/NicolasNewman/CGT290-Final/master/data/data.csv';\r\n        console.log(url);\r\n        fetch(url)\r\n            .then((res) => res.text())\r\n            .then((text) => {\r\n                updateStage('Loading csv...');\r\n                // const prog = setInterval(() => {\r\n                //     console.log(this.i);\r\n                //     console.log(this.len);\r\n                //     updateStage(`Loading csv [${this.getProgress()}%]...`);\r\n                // }, 100);\r\n                // this.len = (text.match(/\\n/g) || []).length;\r\n                parse<Record>(text, {\r\n                    worker: true,\r\n                    header: true,\r\n\r\n                    step: (row) => {\r\n                        this.i = this.i + 1;\r\n                        const data = (row.data as unknown) as Record;\r\n                        // if (this.i % 50000 === 0) {\r\n                        //     console.log(this.i);\r\n                        //     updateStage(\r\n                        //         `Loading csv [${this.getProgress()}%]...`\r\n                        //     );\r\n                        // }\r\n                        this.global.push(data);\r\n                        if (data.timestamp === undefined) {\r\n                            return;\r\n                        }\r\n\r\n                        const name = data.item;\r\n                        this.insert(name, data, this.itemMap);\r\n                        const buyer = data.buyer;\r\n                        this.insert(buyer, data, this.buyerMap);\r\n                        const seller = data.seller;\r\n                        this.insert(seller, data, this.sellerMap);\r\n                        const guild = data.guild;\r\n                        this.insert(guild, data, this.guildMap);\r\n\r\n                        const date = data.timestamp.split(' ')[0];\r\n                        if (!this.dateMap[date]) {\r\n                            this.dates.push(date);\r\n                        }\r\n                        this.insert(date, data, this.dateMap);\r\n\r\n                        if (data.itemlink) {\r\n                            const link = new ItemLink(data.itemlink);\r\n                            if (link.writType) {\r\n                                this.writs[link.writType].push(link);\r\n                            }\r\n                        }\r\n                    },\r\n                    complete: () => {\r\n                        console.log('Done!');\r\n                        console.log(this.i);\r\n                        console.log(this.len);\r\n                        updateStage('Done!');\r\n                        console.log(this.global[0]);\r\n                        console.log(this.global.length);\r\n                        console.log(this.dateMap);\r\n                        this.items = Object.keys(this.itemMap);\r\n                        this.buyers = Object.keys(this.buyerMap);\r\n                        this.sellers = Object.keys(this.sellerMap);\r\n                        this.guilds = Object.keys(this.guildMap);\r\n                        // clearTimeout(prog);\r\n                        redirect();\r\n                    },\r\n                    delimiter: '#',\r\n                });\r\n            });\r\n    }\r\n\r\n    getDataTable(): DataTable {\r\n        return {\r\n            global: this.global,\r\n            sellerMap: this.sellerMap,\r\n            sellers: this.sellers,\r\n            buyerMap: this.buyerMap,\r\n            buyers: this.buyers,\r\n            itemMap: this.itemMap,\r\n            items: this.items,\r\n            guildMap: this.guildMap,\r\n            guilds: this.guilds,\r\n            dateMap: this.dateMap,\r\n            dates: this.dates,\r\n            writs: this.writs,\r\n        };\r\n    }\r\n}\r\n","export interface IItemLink {\r\n    id: number;\r\n    subType: number;\r\n    internalLevel: number;\r\n    enchantID: number;\r\n    enchantSubType: number;\r\n    enchantLevel: number;\r\n    transmuteTrait: number;\r\n    writ1: number;\r\n    writ2: number;\r\n    writ3: number;\r\n    writ4: number;\r\n    writ5: number;\r\n    writ6: number;\r\n    itemStyle: number;\r\n    crafted: boolean;\r\n    bound: boolean;\r\n    stolen: boolean;\r\n    charges: number;\r\n    potionEffect: number;\r\n    writReward: number;\r\n}\r\n\r\nexport type WritType =\r\n    | 'ALCHEMY'\r\n    | 'ENCHANTING'\r\n    | 'PROVISIONING'\r\n    | 'BLACKSMITHING'\r\n    | 'CLOTHIER'\r\n    | 'WOODWORKING'\r\n    | 'JEWELRY';\r\n\r\nexport default class ItemLink {\r\n    readonly itemLink: IItemLink;\r\n    readonly itemType: 'ENCHANT' | 'POTION' | 'GEAR' | 'WRIT' | 'OTHER';\r\n    readonly writType: undefined | WritType;\r\n\r\n    private inRange(min: number, max: number, val: number) {\r\n        return val >= min && val <= max;\r\n    }\r\n\r\n    private equals(num: number, ...args: number[]) {\r\n        let found = false;\r\n        args.forEach((arg) => {\r\n            if (arg === num) {\r\n                found = true;\r\n            }\r\n        });\r\n        return found;\r\n    }\r\n\r\n    constructor(link: string) {\r\n        const split = link.split(':');\r\n        this.itemLink = {\r\n            id: parseInt(split[2]),\r\n            subType: parseInt(split[3]),\r\n            internalLevel: parseInt(split[4]),\r\n            enchantID: parseInt(split[5]),\r\n            enchantSubType: parseInt(split[6]),\r\n            enchantLevel: parseInt(split[7]),\r\n            transmuteTrait: parseInt(split[8]),\r\n            writ1: parseInt(split[8]),\r\n            writ2: parseInt(split[9]),\r\n            writ3: parseInt(split[10]),\r\n            writ4: parseInt(split[11]),\r\n            writ5: parseInt(split[12]),\r\n            writ6: parseInt(split[13]),\r\n            itemStyle: parseInt(split[14]),\r\n            crafted: parseInt(split[15]) > 0 ? true : false,\r\n            bound: parseInt(split[16]) > 0 ? true : false,\r\n            stolen: parseInt(split[17]) > 0 ? true : false,\r\n            charges: parseInt(split[18]),\r\n            potionEffect: parseInt(split[19]),\r\n            writReward: parseInt(split[19]),\r\n        };\r\n        this.writType = undefined;\r\n        // console.log(props.writs['BLACKSMITHING'].length);\r\n        // console.log(props.writs['CLOTHIER'].length);\r\n        // console.log(props.writs['JEWELRY'].length);\r\n        // console.log(props.writs['WOODWORKING'].length);\r\n        if (this.itemLink.enchantID > 0) {\r\n            this.itemType = 'ENCHANT';\r\n        } else if (\r\n            this.itemLink.id === 119696 ||\r\n            this.inRange(119698, 119705, this.itemLink.id) ||\r\n            this.inRange(119818, 119820, this.itemLink.id)\r\n        ) {\r\n            this.itemType = 'WRIT';\r\n            this.writType = 'ALCHEMY';\r\n        } else if (this.itemLink.id === 119564 || this.itemLink.id === 121528) {\r\n            this.itemType = 'WRIT';\r\n            this.writType = 'ENCHANTING';\r\n        } else if (this.itemLink.id === 119693) {\r\n            this.itemType = 'WRIT';\r\n            this.writType = 'PROVISIONING';\r\n        } else if (\r\n            this.equals(this.itemLink.id, 119563, 119680, 121527, 121529)\r\n        ) {\r\n            this.itemType = 'WRIT';\r\n            this.writType = 'BLACKSMITHING';\r\n        } else if (this.equals(this.itemLink.id, 119694, 119695, 121532)) {\r\n            this.itemType = 'WRIT';\r\n            this.writType = 'CLOTHIER';\r\n        } else if (\r\n            this.equals(this.itemLink.id, 119681, 119682, 121530, 121531)\r\n        ) {\r\n            this.itemType = 'WRIT';\r\n            this.writType = 'WOODWORKING';\r\n        } else if (this.equals(this.itemLink.id, 138789, 138799)) {\r\n            this.itemType = 'WRIT';\r\n            this.writType = 'JEWELRY';\r\n        } else if (this.itemLink.potionEffect > 0) {\r\n            this.itemType = 'POTION';\r\n        } else if (this.itemLink.subType > 1) {\r\n            this.itemType = 'GEAR';\r\n        } else {\r\n            this.itemType = 'OTHER';\r\n        }\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { a11yDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport MMSampleText from '../text/mmSample';\r\nimport PythonMain from '../text/pyMain';\r\nimport PythonAnon from '../text/pyAnon';\r\nimport PythonRead from '../text/pyRead';\r\nimport PythonCSV from '../text/pyTableau';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Home extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Overview</h1>\r\n                <p>\r\n                    In 2009, as the world was still recovering from the 2008\r\n                    recession, Eli Kosminsky published a paper titled{' '}\r\n                    <a href=\"https://jvwr-ojs-utexas-stage.tdl.org/jvwr/index.php/jvwr/article/view/869\">\r\n                        <em>\r\n                            World of Warcraft: The Viability of Massively\r\n                            Multiplayer Online Role-Playing Games as Platforms\r\n                            for Modeling and Evaluating Perfect Competition\r\n                        </em>\r\n                    </a>\r\n                    . In the paper, he argued for the use of virtual economies\r\n                    in certain MMORPG video games as a model for perfect\r\n                    competition. His basis for his argument was that in the real\r\n                    world, there are no textbook examples of a market that is\r\n                    perfectly competitive. Some real world markets that are\r\n                    close include foreign exchange, agricultural, and internet\r\n                    markets such as eBay. Unfortunetly, these aren't close\r\n                    enough to where researchers can analyze these markets using\r\n                    a model of perfect competition, resulting in little\r\n                    researching existing about the real-world benefits of such\r\n                    an economy. His paper focused on arguably the largest MMORPG\r\n                    to date, World of Warcraft (WoW). He concluded that the\r\n                    virtual economy does in fact follow this model, which\r\n                    encouraged other researchers to use the game as a framework\r\n                    to furthur study perfectly competitive markets.\r\n                </p>\r\n                <p>\r\n                    The goal of my analysis is to determine if ESO follows an\r\n                    economic model of perfect competition as well. For those\r\n                    unfimilar with economics, a market that is perfectly\r\n                    competitive has the following characteristics:\r\n                </p>\r\n                <ol>\r\n                    <li>Competition is at its greatest possible level</li>\r\n                    <li>\r\n                        There is perfect knowledge, with no time lags in the\r\n                        flow of information\r\n                    </li>\r\n                    <li>\r\n                        There are no barries to entry into or exit out of the\r\n                        market\r\n                    </li>\r\n                    <li>\r\n                        No single seller can influence the market price or\r\n                        conditions\r\n                    </li>\r\n                </ol>\r\n\r\n                <h1>Data {'&'} Collection</h1>\r\n                <p>\r\n                    In the Elder Scrolls Online (ESO), trading is done through\r\n                    traders owned by guilds. Each week guilds can bid on a\r\n                    trader and the guild with the highest bid gets to use that\r\n                    trader for the week. Traders are located in every major\r\n                    town, and since some are more populated then others, the\r\n                    average bid on a trader varies grately by location.\r\n                    <br />\r\n                    <br />\r\n                    Any player can go to these traders and use their gold to\r\n                    purchase items they desire, but only members of the guild\r\n                    can sell items through that trader. When a player purchases\r\n                    an item, a majority of the gold goes to the seller, but a\r\n                    small portion is taken as tax for the guild.\r\n                </p>\r\n                <p>\r\n                    In ESO, guild trader data is only visible to members within\r\n                    that guild, and only the past 10 days of sales are kept. A\r\n                    player by the name of Sharlikran created a program called{' '}\r\n                    <a href=\"https://www.esoui.com/downloads/info2753-MasterMerchant3.0.html\">\r\n                        Master Merchant\r\n                    </a>{' '}\r\n                    to analyze and collect this data. Unfortunetly, this means\r\n                    the data set used is limited to traders I have access too.\r\n                </p>\r\n                <p>\r\n                    Each 10 day subset of data is seperated between 16 files\r\n                    titled MM##Data.lua. The data uses a JSON-like syntax and is\r\n                    found at the <em>SalesData</em> level. An example of a\r\n                    particular file is as followed:\r\n                </p>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"lua\"\r\n                    wrapLongLines\r\n                >\r\n                    {MMSampleText}\r\n                </SyntaxHighlighter>\r\n                <p>\r\n                    <em>wasKiosk</em> and <em>itemLink</em>, the only two field\r\n                    which aren't self-explanatory, indicate if the purchase was\r\n                    made directly from the trader along with specific\r\n                    information about the item. The exact fields for an itemLink\r\n                    are explained on{' '}\r\n                    <a href=\"https://en.uesp.net/wiki/Online:Item_Link\">UESP</a>\r\n                </p>\r\n                {/* <p>\r\n                    Overall, data was recorded for{' '}\r\n                    {this.props.data.guilds.length} guilds, with{' '}\r\n                    {this.props.data.global.length} transactions being recorded\r\n                </p> */}\r\n                <h1>Processing</h1>\r\n                <p>\r\n                    A python script was used to process the data. Since the data\r\n                    was within a lua file, the Python package{' '}\r\n                    <a href=\"https://pypi.org/project/lupa/\">lupa</a> was a very\r\n                    useful module to quickly import the data into a format\r\n                    recognizable to Python. The scripts used are included below\r\n                    and can be found on the Github{' '}\r\n                    <a href=\"https://github.com/NicolasNewman/CGT290-Final/tree/master/data\">\r\n                        repository\r\n                    </a>\r\n                </p>\r\n                <h2>Main.py</h2>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"python\"\r\n                    wrapLongLines\r\n                >\r\n                    {PythonMain}\r\n                </SyntaxHighlighter>\r\n                <h2>anonymizer.py</h2>\r\n                <p>\r\n                    Since the source data personally identifies the name of the\r\n                    user who bought/sold an item, an additional step was taken\r\n                    while parsing the data to anonymize it.\r\n                </p>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"python\"\r\n                    wrapLongLines\r\n                >\r\n                    {PythonAnon}\r\n                </SyntaxHighlighter>\r\n                <h2>read.py</h2>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"python\"\r\n                    wrapLongLines\r\n                >\r\n                    {PythonRead}\r\n                </SyntaxHighlighter>\r\n                <h2>convert_tableau.py</h2>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"python\"\r\n                    wrapLongLines\r\n                >\r\n                    {PythonCSV}\r\n                </SyntaxHighlighter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const str = `MM01DataSavedVariables =\r\n{\r\n    [\"Default\"] = \r\n    {\r\n        [\"MasterMerchant\"] = \r\n        {\r\n            [\"$AccountWide\"] = \r\n            {\r\n                [\"dataLocations\"] = \r\n                {\r\n                    [\"NA Megaserver\"] = true,\r\n                },\r\n                [\"version\"] = 1,\r\n                [\"SalesData\"] = \r\n                {\r\n                    [122880] = \r\n                    {\r\n                        [\"50:16:3:7:0\"] = \r\n                        {\r\n                            [\"itemIcon\"] = \"/esoui/art/icons/gear_telvanni_1hsword_a.dds\",\r\n                            [\"wasAltered\"] = false,\r\n                            [\"itemAdderText\"] = \"cp160 blue superior weapon set war maiden sword one-handed sharpened\",\r\n                            [\"sales\"] = \r\n                            {\r\n                                [1] = \r\n                                {\r\n                                    [\"price\"] = 13500,\r\n                                    [\"guild\"] = \"AK Tamriel Trade\",\r\n                                    [\"itemLink\"] = \"|H0:item:122880:362:50:0:0:0:0:0:0:0:0:0:0:0:0:51:0:0:0:0:0|h|h\",\r\n                                    [\"id\"] = \"1490373815\",\r\n                                    [\"wasKiosk\"] = true,\r\n                                    [\"seller\"] = \"@MyUsername1\",\r\n                                    [\"quant\"] = 1,\r\n                                    [\"buyer\"] = \"@MyUsername2\",\r\n                                    [\"timestamp\"] = 1613007047,\r\n                                },\r\n                                [2] = \r\n                                {\r\n                                    [\"price\"] = 10000,\r\n                                    [\"guild\"] = \"Unstable Unicorns\",\r\n                                    [\"itemLink\"] = \"|H0:item:122880:362:50:0:0:0:0:0:0:0:0:0:0:0:0:51:0:0:0:0:0|h|h\",\r\n                                    [\"id\"] = \"1291545171\",\r\n                                    [\"wasKiosk\"] = true,\r\n                                    [\"seller\"] = \"@MyUsername3\",\r\n                                    [\"quant\"] = 1,\r\n                                    [\"buyer\"] = \"@MyUsername1\",\r\n                                    [\"timestamp\"] = 1590189492,\r\n                                },\r\n                            },\r\n                            [\"oldestTime\"] = 1590189492,\r\n                            [\"itemDesc\"] = \"War Maiden's Sword\",\r\n                            [\"totalCount\"] = 2,\r\n                        },\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    }\r\n}`;\r\n\r\nexport default str;\r\n","const str = `from convert_tableau import dump_tableau\r\nif __name__ == '__main__':\r\n    dump_tableau(\"data_dump.csv\")`;\r\n\r\nexport default str;\r\n","const str = `def AnonymizerFactory(d):\r\n    i = 1\r\n\r\n    def anonymizer(name):\r\n        nonlocal i\r\n        if name not in d:\r\n            d[name] = f'@{i}'\r\n            i += 1\r\n        return d[name]\r\n\r\n    def load(filename='dict.csv'):\r\n        nonlocal i\r\n        try:\r\n            with open(filename, 'r') as f:\r\n                for line in f:\r\n                    (key, val) = line.split(',')\r\n                    d[key] = val\r\n                    i += 1\r\n        except FileNotFoundError:\r\n            print(f\"Mappings [{filename}] does not exist, skipping pre-load\")\r\n\r\n    def save(filename='dict.csv'):\r\n        with open(filename, 'w') as f:\r\n            for key in d:\r\n                f.write(f'{key},{d[key]}\\n')\r\n\r\n    return anonymizer, load, save`;\r\n\r\nexport default str;\r\n","const str = `import os\r\nimport re\r\n\r\nimport lupa\r\nfrom lupa import LuaRuntime\r\n\r\nlua = LuaRuntime(unpack_returned_tuples=True)\r\n\r\n\r\ndef find_all_files(path='../mm'):\r\n    data_files = []\r\n    dir_count = 0\r\n    file_count = 0\r\n    for root, dirs, files in os.walk(path):\r\n        dir_count += len(dirs)\r\n        for name in files:\r\n            if name.endswith(\".lua\"):\r\n                file_count += 1\r\n                full_path = os.path.join(root, name)\r\n                data_files.append(os.path.join(root, name))\r\n    print(f\"Found {file_count} files across {dir_count} directories\")\r\n    return data_files\r\n\r\n\r\ndef remove_duplicates(lines):\r\n    unique_lines = set(lines)\r\n    print(f'Removed {len(lines) - len(unique_lines)} duplicate entries')\r\n    return unique_lines\r\n\r\n\r\ndef process_files(files, func, counter):\r\n    lines = []\r\n    skipped = 0\r\n    file_count = len(files)\r\n    process_name = f'{counter[0]}/{counter[1]}'\r\n\r\n    for i, file in enumerate(files):\r\n        print(f'[{process_name}] Parsing {file}')\r\n        file = open(file, 'r')\r\n        file_str = file.read()\r\n        # Replace the MM file header\r\n        file_str = re.sub(r'MM[0-9]{2}DataSavedVariables =', '', file_str)\r\n        table = lua.eval(file_str)[\"Default\"][\"MasterMerchant\"][\"$AccountWide\"][\"SalesData\"]\r\n        for _, lv0 in enumerate(sorted(table.items())):\r\n            item_hash = lv0[0]\r\n            table_items = lv0[1]\r\n\r\n            for _, lv1 in enumerate(sorted(table_items.items())):\r\n                unknown_id = lv1[0]\r\n                table_grouping = lv1[1]\r\n\r\n                record = sorted(table_grouping.items())\r\n                if not (len(record) == 7 or len(record) == 4 or len(record) == 6):\r\n                    print(f'[{process_name}] Warning: Could not parse record {record}')\r\n                    skipped += 1\r\n                    continue\r\n\r\n                item_desc = ''\r\n                table_sales = ''\r\n                if len(record) == 7:\r\n                    item_desc = record[1][1]\r\n                    table_sales = record[4][1]\r\n                if len(record) == 6:\r\n                    item_desc = record[1][1]\r\n                    table_sales = record[4][1]\r\n                if len(record) == 4:\r\n                    item_desc = record[1][1]\r\n                    table_sales = record[3][1]\r\n\r\n                for _, lv2 in enumerate(sorted(table_sales.items())):\r\n                    index = lv2[0]\r\n                    table_sale = lv2[1]\r\n                    sale = sorted(table_sale.items())\r\n                    line = func(item_desc, sale)\r\n                    lines.append(line)\r\n\r\n    print(f'[{process_name}] Parsed {len(lines)} sale records')\r\n    print(f'[{process_name}] Skipped {skipped} records due to incomplete data')\r\n    return lines`;\r\n\r\nexport default str;\r\n","const str = `from datetime import datetime\r\nfrom read import find_all_files\r\nfrom read import process_files\r\nfrom anonymizer import AnonymizerFactory\r\nfrom multiprocessing import Pool, Manager\r\nfrom itertools import chain\r\n\r\n\r\ndef process_func(item_desc, sale):\r\n    buyer = sale[0][1]\r\n    guild = sale[1][1]\r\n    item_id = sale[2][1]\r\n    item_link = sale[3][1]\r\n    price = sale[4][1]\r\n    quant = sale[5][1]\r\n    seller = sale[6][1]\r\n    timestamp = sale[7][1]\r\n    timestamp_str = datetime.fromtimestamp(timestamp)\r\n    was_kiosk = sale[8][1]\r\n\r\n    return f'{item_desc}#{guild}#{buyer}#{seller}#{price}#{quant}#{timestamp_str}#{item_link}\\n'\r\n\r\n\r\ndef process_anon(record, anonymizer):\r\n    split = record.split(\"#\")\r\n    split[2] = anonymizer(split[2])\r\n    split[3] = anonymizer(split[3])\r\n    return \"#\".join(split)\r\n\r\n\r\ndef dump_tableau(filename='data_dump.csv'):\r\n    files = find_all_files()\r\n    lines = []\r\n    with Manager() as m:\r\n        arg_map = [[[x], process_func, [i + 1, len(files)]] for i, x in enumerate(files)]\r\n        with m.Pool(5) as p:\r\n            lines = p.starmap(process_files, arg_map)\r\n        print('Done reading all files')\r\n    flattened = list(chain(*lines))\r\n    unique = list(set(flattened))\r\n    print(f\"Removed {len(flattened) - len(unique)} duplicate lines\")\r\n    print(f\"Collected {len(unique)} sales\")\r\n\r\n    anonymizer, load, save = AnonymizerFactory({})\r\n    load()\r\n    for i, s in enumerate(unique):\r\n        unique[i] = process_anon(s, anonymizer)\r\n    save()\r\n\r\n    with open(filename, 'w') as f:\r\n        f.write('item#guild#buyer#seller#price#quant#timestamp#itemlink\\n')\r\n        f.writelines(unique)`;\r\n\r\nexport default str;\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n    exclude?: string[];\r\n}\r\n\r\nexport default class TransactionHistory extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        day: string;\r\n        value: number;\r\n        guilds: { name: string; value: number }[];\r\n    }[] = [];\r\n    min: Date = new Date('2100-1-1');\r\n    max: Date = new Date('1990-1-1');\r\n    avg: number[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        console.log(props);\r\n        // key is each date in the list\r\n        props.data.dates.forEach((key) => {\r\n            const guilds: { [key: string]: number } = {};\r\n\r\n            // compute the number of sales per guild for a particular date\r\n            props.data.dateMap[key].forEach((record) => {\r\n                guilds[record.guild] !== undefined\r\n                    ? guilds[record.guild]++\r\n                    : (guilds[record.guild] = 1);\r\n            });\r\n\r\n            // create an extra data field containing each guild and their computed number of sales\r\n            const guildArr: { name: string; value: number }[] = [];\r\n            Object.keys(guilds).forEach((guild) => {\r\n                if (!props.exclude?.includes(guild)) {\r\n                    guildArr.push({ name: guild, value: guilds[guild] });\r\n                }\r\n            });\r\n\r\n            // subtract the excluded guilds from the total value\r\n            let value = props.data.dateMap[key].length;\r\n            props.exclude?.forEach((guild) => {\r\n                console.log(guild);\r\n                console.log(guilds[guild]);\r\n                console.log(value);\r\n                value = value - (guilds[guild] ? guilds[guild] : 0);\r\n                console.log(value);\r\n            });\r\n\r\n            this.data.push({\r\n                day: key,\r\n                value,\r\n                guilds: guildArr,\r\n            });\r\n            this.avg.push(props.data.dateMap[key].length);\r\n            const date = new Date(key);\r\n            if (date < this.min) {\r\n                this.min = date;\r\n            }\r\n            if (date > this.max) {\r\n                this.max = date;\r\n            }\r\n        });\r\n        // for (let key in props.data.dates) {\r\n        //     if (!props.data.dateMap[key]) {\r\n        //         console.log(key);\r\n        //         continue;\r\n        //     }\r\n        //     this.data.push({\r\n        //         day: key,\r\n        //         value: props.data.dateMap[key].length,\r\n        //     });\r\n        //     const date = new Date(key);\r\n        //     if (date < this.min) {\r\n        //         this.min = date;\r\n        //     }\r\n        //     if (date > this.max) {\r\n        //         this.max = date;\r\n        //     }\r\n        // }\r\n        console.log(this.data);\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n    }\r\n\r\n    dateToString(date: Date) {\r\n        return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n    }\r\n\r\n    dateToDayOfWeek(date: string): string {\r\n        const d = new Date(date);\r\n        const day = d.getDay();\r\n        switch (day) {\r\n            case 0:\r\n                return 'Sunday';\r\n            case 1:\r\n                return 'Monday';\r\n            case 2:\r\n                return 'Tuesday';\r\n            case 3:\r\n                return 'Wednesday';\r\n            case 4:\r\n                return 'Thursday';\r\n            case 5:\r\n                return 'Friday';\r\n            case 6:\r\n                return 'Saturday';\r\n            default:\r\n                return 'Unknown';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n        return (\r\n            <div className=\"chart\">\r\n                {this.props.exclude ? (\r\n                    <span />\r\n                ) : (\r\n                    <div>\r\n                        <p>\r\n                            Transactions were recorded between{' '}\r\n                            {this.dateToString(this.min)} and{' '}\r\n                            {this.dateToString(this.max)}\r\n                        </p>\r\n                        <p>\r\n                            The average amount of transactions per day was{' '}\r\n                            {Math.floor(\r\n                                this.avg.reduce((prev, curr) => prev + curr) /\r\n                                    this.avg.length\r\n                            )}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n                <div style={{ width: '100%', height: '225px' }}>\r\n                    <ResponsiveCalendar\r\n                        data={this.data}\r\n                        to={this.max}\r\n                        from={this.min}\r\n                        tooltip={(...args) => {\r\n                            const data = (args[0] as any).data;\r\n                            console.log(data);\r\n                            return (\r\n                                <div\r\n                                    // style={{\r\n                                    //     padding: '0.25rem',\r\n                                    //     backgroundColor: '#999',\r\n                                    // }}\r\n                                    className=\"tooltip\"\r\n                                >\r\n                                    <div>\r\n                                        <strong>\r\n                                            {this.dateToDayOfWeek(data.day)}\r\n                                        </strong>\r\n                                    </div>\r\n                                    {data.guilds ? (\r\n                                        data.guilds.map((guild: any) => (\r\n                                            <div\r\n                                                style={{\r\n                                                    padding: '0.1rem 0.5rem',\r\n                                                }}\r\n                                            >\r\n                                                {guild.name}: {guild.value}\r\n                                            </div>\r\n                                        ))\r\n                                    ) : (\r\n                                        <span />\r\n                                    )}\r\n                                    <div\r\n                                        style={{\r\n                                            color: 'red',\r\n                                            padding: '0.1rem 0.5rem',\r\n                                        }}\r\n                                    >\r\n                                        Total: {data.value ? data.value : 0}\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        // from=\"2020-01-01\"\r\n                        // to=\"2021-05-01\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\nimport { ResponsiveBar } from '@nivo/bar';\r\nimport { Button, Table } from 'antd';\r\nimport format from 'dateformat';\r\n\r\ninterface ITableEntry {\r\n    item: string;\r\n    count: number;\r\n    value: number;\r\n}\r\ninterface ITableData {\r\n    [itemName: string]: ITableEntry;\r\n}\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\ninterface IState {\r\n    tableData: ITableEntry[];\r\n}\r\n\r\nexport default class SellerBars extends Component<IProps, IState> {\r\n    props!: IProps;\r\n    state: IState;\r\n    data: {\r\n        player: string;\r\n        saleCount: number;\r\n        saleValue: number;\r\n        nil: number;\r\n    }[] = [];\r\n    totalSaleCount: number = 0;\r\n    totalSaleValue: number = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tempRecords: {\r\n            player: string;\r\n            saleCount: number;\r\n            saleValue: number;\r\n            nil: number;\r\n        }[] = [];\r\n        this.state = {\r\n            tableData: [],\r\n        };\r\n        Object.keys(props.data).forEach((player) => {\r\n            const origRecords = props.data[player];\r\n            // const saleValue = parseInt(\r\n            //     origRecords.reduce((prev, curr) => {\r\n            //         return ({\r\n            //             price: parseInt(prev.price) + parseInt(curr.price),\r\n            //         } as unknown) as Record;\r\n            //     }).price\r\n            // );\r\n            let saleValue = 0;\r\n            origRecords.forEach((rec) => {\r\n                if (!isNaN(parseInt(rec.price))) {\r\n                    saleValue += parseInt(rec.price);\r\n                }\r\n            });\r\n            const saleCount = origRecords.length;\r\n            tempRecords.push({\r\n                player,\r\n                saleCount,\r\n                saleValue,\r\n                nil: 0,\r\n            });\r\n\r\n            this.totalSaleCount += saleCount;\r\n            this.totalSaleValue += saleValue;\r\n            // if (!this.totalSaleValue) {\r\n            //     console.log(saleValue);\r\n            // }\r\n        });\r\n\r\n        tempRecords.sort((a, b) => {\r\n            return b.saleValue - a.saleValue;\r\n        });\r\n\r\n        for (let i = 0; i < props.count; i++) {\r\n            this.data.push(tempRecords[i]);\r\n        }\r\n        // key is each date in the list\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <div>\r\n                    <p>\r\n                        There was {Object.keys(this.props.data).length} unique\r\n                        sellers, who sold {this.totalSaleCount.toLocaleString()}{' '}\r\n                        items, valued at {this.totalSaleValue.toLocaleString()}{' '}\r\n                        gold\r\n                    </p>\r\n                    <p style={{ color: 'red' }}>\r\n                        Note: Click the red bars to see an overview of what a\r\n                        seller sold!\r\n                    </p>\r\n                </div>\r\n                <div style={{ position: 'relative', height: '300px' }}>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '300px',\r\n                            position: 'absolute',\r\n                        }}\r\n                    >\r\n                        <ResponsiveBar\r\n                            data={this.data}\r\n                            keys={['saleCount', 'nil']}\r\n                            indexBy=\"player\"\r\n                            groupMode=\"grouped\"\r\n                            margin={{\r\n                                top: 50,\r\n                                right: 130,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            colors={'#0f0'}\r\n                            theme={{ textColor: '#fff' }}\r\n                            axisLeft={null}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'top-right',\r\n                                    itemWidth: -10,\r\n                                    itemHeight: 20,\r\n                                    dataFrom: 'keys',\r\n                                    direction: 'column',\r\n                                },\r\n                            ]}\r\n                            labelTextColor={'#fff'}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '300px',\r\n                            position: 'absolute',\r\n                            opacity: '0.5',\r\n                        }}\r\n                    >\r\n                        <ResponsiveBar\r\n                            data={this.data}\r\n                            keys={['nil', 'saleValue']}\r\n                            indexBy=\"player\"\r\n                            groupMode=\"grouped\"\r\n                            margin={{\r\n                                top: 50,\r\n                                right: 130,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            colors={'#f00'}\r\n                            theme={{ textColor: '#fff' }}\r\n                            enableGridY={false}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'bottom-right',\r\n                                    itemWidth: -10,\r\n                                    itemHeight: 20,\r\n                                    dataFrom: 'keys',\r\n                                    direction: 'column',\r\n                                },\r\n                            ]}\r\n                            labelTextColor={'#fff'}\r\n                            labelFormat={'.3~s'}\r\n                            onClick={(props) => {\r\n                                console.log(props);\r\n                                const playerID = props.indexValue;\r\n                                const tableData: ITableData = {};\r\n                                this.props.data[playerID].forEach((record) => {\r\n                                    if (!tableData[record.item]) {\r\n                                        tableData[record.item] = {\r\n                                            item: record.item,\r\n                                            count: 1,\r\n                                            value: parseInt(record.price),\r\n                                        };\r\n                                    } else {\r\n                                        const entry = tableData[record.item];\r\n                                        entry.count = entry.count + 1;\r\n                                        entry.value =\r\n                                            entry.value +\r\n                                            parseInt(record.price);\r\n                                    }\r\n                                });\r\n                                this.setState({\r\n                                    tableData: Object.keys(tableData).map(\r\n                                        (key) => tableData[key]\r\n                                    ),\r\n                                    // .sort(\r\n                                    //     (a: ITableEntry, b: ITableEntry) =>\r\n                                    //         b.value - a.value\r\n                                    // ),\r\n                                });\r\n                                console.log(tableData);\r\n                            }}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                {this.state.tableData.length > 0 ? (\r\n                    <div style={{ position: 'relative' }}>\r\n                        <div\r\n                            style={{\r\n                                position: 'absolute',\r\n                                zIndex: 1,\r\n                                bottom: '16px',\r\n                                right: '512px',\r\n                            }}\r\n                        >\r\n                            <Button\r\n                                type=\"primary\"\r\n                                onClick={(e) =>\r\n                                    this.setState({ tableData: [] })\r\n                                }\r\n                            >\r\n                                Close Table\r\n                            </Button>\r\n                        </div>\r\n\r\n                        <Table\r\n                            dataSource={this.state.tableData}\r\n                            columns={[\r\n                                {\r\n                                    title: 'Item',\r\n                                    dataIndex: 'item',\r\n                                    key: 'item',\r\n                                },\r\n                                {\r\n                                    title: 'Sold',\r\n                                    dataIndex: 'count',\r\n                                    key: 'count',\r\n                                    sorter: (a, b) => a.count - b.count,\r\n                                },\r\n                                {\r\n                                    title: 'Profit',\r\n                                    dataIndex: 'value',\r\n                                    key: 'value',\r\n                                    sorter: (a, b) => a.value - b.value,\r\n                                },\r\n                            ]}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <span />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveTreeMap } from '@nivo/treemap';\r\nimport format from 'dateformat';\r\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\r\n\r\ninterface IScatterData {\r\n    id: string;\r\n    data: { x: string; y: number; quant: number; guild: string }[];\r\n}\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\ninterface IState {\r\n    scatterData: IScatterData[];\r\n}\r\n\r\nexport default class ItemTreemap extends Component<IProps, IState> {\r\n    props!: IProps;\r\n    state: IState;\r\n    data: {\r\n        name: 'Items';\r\n        children: {\r\n            name: string;\r\n            value: number;\r\n            avg: number;\r\n            count: number;\r\n        }[];\r\n    } = { name: 'Items', children: [] };\r\n    totalSaleCount: number = 0;\r\n    totalSaleValue: number = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tempRecords: {\r\n            name: string;\r\n            value: number;\r\n            avg: number;\r\n            count: number;\r\n        }[] = [];\r\n        this.state = {\r\n            scatterData: [\r\n                {\r\n                    id: '',\r\n                    data: [],\r\n                },\r\n            ],\r\n        };\r\n        Object.keys(props.data).forEach((item) => {\r\n            const origRecords = props.data[item];\r\n            // const saleValue = parseInt(\r\n            //     origRecords.reduce((prev, curr) => {\r\n            //         return ({\r\n            //             price: parseInt(prev.price) + parseInt(curr.price),\r\n            //         } as unknown) as Record;\r\n            //     }).price\r\n            // );\r\n            let saleValue = 0;\r\n            let perItemSaleValue = 0;\r\n            origRecords.forEach((rec) => {\r\n                saleValue += parseInt(rec.price);\r\n                perItemSaleValue += parseInt(rec.price) / parseInt(rec.quant);\r\n            });\r\n            tempRecords.push({\r\n                name: item,\r\n                value: saleValue,\r\n                count: origRecords.length,\r\n                avg: Math.round(perItemSaleValue / origRecords.length),\r\n            });\r\n        });\r\n\r\n        tempRecords.sort((a, b) => {\r\n            return b.value - a.value;\r\n        });\r\n\r\n        for (let i = 0; i < props.count; i++) {\r\n            this.data.children.push(tempRecords[i]);\r\n        }\r\n        // key is each date in the list\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <p style={{ color: 'red' }}>\r\n                    Note: Click on a square to see all transactions!\r\n                </p>\r\n                <div style={{ width: '100%', height: '500px' }}>\r\n                    <ResponsiveTreeMap\r\n                        data={this.data}\r\n                        identity=\"name\"\r\n                        value=\"value\"\r\n                        valueFormat=\".03~s\"\r\n                        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\r\n                        labelSkipSize={12}\r\n                        labelTextColor={'#fff'}\r\n                        parentLabelTextColor={{\r\n                            from: 'color',\r\n                            modifiers: [['darker', 2]],\r\n                        }}\r\n                        borderColor={{\r\n                            from: 'color',\r\n                            modifiers: [['darker', 0.1]],\r\n                        }}\r\n                        leavesOnly\r\n                        // @ts-ignore\r\n                        tooltip={(node: any) => {\r\n                            console.log(node);\r\n                            const data = node.node.data;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <div>\r\n                                        <strong>{data.name}</strong>\r\n                                        <div>Sold: {data.count}</div>\r\n                                        <div>\r\n                                            Total value:{' '}\r\n                                            {data.value.toLocaleString()}\r\n                                        </div>\r\n                                        <div>\r\n                                            Avg price per unit:{' '}\r\n                                            {data.avg.toLocaleString()}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        onClick={(square) => {\r\n                            const name = square.id;\r\n                            const records = this.props.data[name];\r\n                            const newData: IScatterData = {\r\n                                id: name,\r\n                                data: [],\r\n                            };\r\n                            records.forEach((record) =>\r\n                                newData.data.push({\r\n                                    x: format(\r\n                                        new Date(record.timestamp),\r\n                                        'mm/dd/yyyy'\r\n                                    ),\r\n                                    y:\r\n                                        parseInt(record.price) /\r\n                                        parseInt(record.quant),\r\n                                    quant: parseInt(record.quant),\r\n                                    guild: record.guild,\r\n                                })\r\n                            );\r\n                            this.setState({ scatterData: [newData] });\r\n                        }}\r\n                    />\r\n                </div>\r\n                {this.state.scatterData[0].data.length > 0 ? (\r\n                    <div style={{ width: '100%', height: '350px' }}>\r\n                        <ResponsiveScatterPlot\r\n                            data={this.state.scatterData}\r\n                            xScale={{\r\n                                type: 'time',\r\n                                format: '%m/%d/%Y',\r\n                                useUTC: false,\r\n                                precision: 'day',\r\n                            }}\r\n                            xFormat=\"time:%m/%d/%Y\"\r\n                            yScale={{\r\n                                type: 'linear',\r\n                                stacked: false,\r\n                            }}\r\n                            axisLeft={{\r\n                                legend: 'linear scale',\r\n                                legendOffset: 12,\r\n                            }}\r\n                            axisBottom={{\r\n                                format: '%b %d',\r\n                                tickValues: 'every 45 days',\r\n                                legend: 'time scale',\r\n                                legendOffset: -12,\r\n                            }}\r\n                            margin={{\r\n                                top: 20,\r\n                                right: 110,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            theme={{ textColor: '#fff' }}\r\n                            tooltip={(point: any) => {\r\n                                console.log(point);\r\n                                const { data } = point.node;\r\n                                return (\r\n                                    <div className=\"tooltip\">\r\n                                        <div>\r\n                                            Sold {data.quant} {data.serieId} for{' '}\r\n                                            {Math.round(data.y)} each on{' '}\r\n                                            {data.formattedX} in {data.guild}\r\n                                        </div>\r\n                                    </div>\r\n                                );\r\n                            }}\r\n                        />\r\n                    </div>\r\n                ) : (\r\n                    <span />\r\n                )}\r\n                <div\r\n                    style={{\r\n                        display: 'grid',\r\n                        gridTemplate: '1fr 1fr 1fr 1fr 1fr / 1fr 1fr 1fr',\r\n                    }}\r\n                >\r\n                    {this.data.children.map((child, i) =>\r\n                        i < 15 ? (\r\n                            <div style={{ marginTop: '0.5rem' }}>\r\n                                <div>\r\n                                    {i + 1}) {child.name}\r\n                                </div>\r\n                                <div>{child.value.toLocaleString()}</div>\r\n                            </div>\r\n                        ) : (\r\n                            <span />\r\n                        )\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveLine } from '@nivo/line';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n}\r\n\r\nexport default class SellerBars extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        id: string;\r\n        data: {\r\n            x: string;\r\n            y: number;\r\n        }[];\r\n    }[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        const motifs = Object.keys(props.data)\r\n            .filter((item) => {\r\n                return /Crafting Motif [0-9]{1,2}: .*Chests/.test(item);\r\n            })\r\n            .filter((motif) => {\r\n                // return /.*Akaviri.*|.*Daggerfall.*|.*Order.*|.*Silver.*|.*Honor.*|.*Meridian.*|.*Dragonguard.*|.*Refabricated.*|.*Icereach.*/.test(\r\n                return /.*Honor.*|.*Silver.*|.*Refabricated.*|.*Meridian.*|.*Order.*|.*Icereach.*/.test(\r\n                    motif\r\n                );\r\n            });\r\n        console.log(motifs);\r\n\r\n        motifs.forEach((key) => {\r\n            const tempRecord: {\r\n                id: string;\r\n                data: {\r\n                    x: string;\r\n                    y: number;\r\n                }[];\r\n            } = {\r\n                id: key,\r\n                data: [],\r\n            };\r\n            const records = props.data[key];\r\n            const earliestDate = new Date('3/25/2021');\r\n            records.forEach((record) => {\r\n                const date = new Date(record.timestamp);\r\n                if (date > earliestDate)\r\n                    tempRecord.data.push({\r\n                        x: this.formatDate(date),\r\n                        y: parseInt(record.price),\r\n                    });\r\n            });\r\n\r\n            const temp: { [value: string]: { x: string; y: number } } = {};\r\n            const count: { [value: string]: number } = {};\r\n            tempRecord.data.forEach((point) => {\r\n                if (temp[point.x]) {\r\n                    temp[point.x].y = temp[point.x].y + point.y;\r\n                    count[point.x] += 1;\r\n                } else {\r\n                    temp[point.x] = point;\r\n                    count[point.x] = 1;\r\n                }\r\n            });\r\n            tempRecord.data.map((point) => {\r\n                return { x: point.x, y: point.y / count[point.x] };\r\n            });\r\n\r\n            tempRecord.data = Object.values(temp);\r\n            tempRecord.data.sort(\r\n                (a, b) => (new Date(b.x) as any) - (new Date(a.x) as any)\r\n            );\r\n\r\n            this.data.push(tempRecord);\r\n        });\r\n        this.data.push({\r\n            id: 'Anniversary Event Start',\r\n            data: [\r\n                { x: '4/1/2021', y: 0 },\r\n                { x: '4/1/2021', y: 280000 },\r\n            ],\r\n        });\r\n        this.data.push({\r\n            id: 'Anniversary Event End',\r\n            data: [\r\n                { x: '4/15/2021', y: 0 },\r\n                { x: '4/15/2021', y: 280000 },\r\n            ],\r\n        });\r\n    }\r\n\r\n    formatDate(d: Date) {\r\n        return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\r\n    }\r\n\r\n    render() {\r\n        console.log(this.data);\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '500px',\r\n                    }}\r\n                >\r\n                    <ResponsiveLine\r\n                        data={this.data}\r\n                        xScale={{\r\n                            type: 'time',\r\n                            format: '%m/%d/%Y',\r\n                            useUTC: false,\r\n                            precision: 'day',\r\n                        }}\r\n                        xFormat=\"time:%m/%d/%Y\"\r\n                        yScale={{\r\n                            type: 'linear',\r\n                            stacked: false,\r\n                        }}\r\n                        axisLeft={{\r\n                            legend: 'linear scale',\r\n                            legendOffset: 12,\r\n                        }}\r\n                        axisBottom={{\r\n                            format: '%b %d',\r\n                            tickValues: 'every 4 days',\r\n                            legend: 'time scale',\r\n                            legendOffset: -12,\r\n                        }}\r\n                        margin={{ top: 20, right: 110, bottom: 50, left: 60 }}\r\n                        theme={{ textColor: '#fff' }}\r\n                        useMesh\r\n                        curve=\"monotoneX\"\r\n                        colors={{ scheme: 'paired' }}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                direction: 'column',\r\n                                itemWidth: 150,\r\n                                itemHeight: 20,\r\n                                translateX: 10,\r\n                            },\r\n                        ]}\r\n                        enableSlices={false}\r\n                        tooltip={(data: any) => {\r\n                            console.log(data);\r\n                            const { point } = data;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <div>{point.serieId}</div>\r\n                                    <div>\r\n                                        Sold for an average of{' '}\r\n                                        {point.data.yFormatted} on{' '}\r\n                                        {point.data.xFormatted}\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveChord } from '@nivo/chord';\r\nimport { Button, Table } from 'antd';\r\nimport format from 'dateformat';\r\ninterface IProps {\r\n    buyers: { [name: string]: Record[] };\r\n    sellers: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\ninterface ITableEntry {\r\n    name: string;\r\n    price: number;\r\n    date: string;\r\n    dateName: string;\r\n    quantity: number;\r\n}\r\n\r\ninterface ITableData {\r\n    direction: string[];\r\n    s2t: ITableEntry[];\r\n    t2s: ITableEntry[];\r\n}\r\n\r\ninterface IState {\r\n    tableData: ITableData;\r\n}\r\n\r\n/**\r\n * This is the most disgusting thing I have ever written in my JS career\r\n *\r\n * May the FSM have mercy on our soul...\r\n * @param map - an object mapping records by the opposite of @key\r\n * @param key - the opposite person of the map you are passing\r\n * @returns the data mutated from an object of records seperated by buyer/seller to an array in ascending order of the most frequently occuring buyers / sellers, with their own mapping of the most frequent sellers / buyers who interacted with them, in ascending order\r\n */\r\nconst mutate = (\r\n    map: { [name: string]: Record[] },\r\n    key: 'buyer' | 'seller',\r\n    count: number\r\n) => {\r\n    return Object.keys(map)\r\n        .map((player) => {\r\n            const sellers: { [seller: string]: number } = map[player]\r\n                .map((rec) => rec[key])\r\n                .reduce((acc: { [value: string]: number }, curr) => {\r\n                    acc[curr] = -~acc[curr];\r\n\r\n                    return acc;\r\n                }, {});\r\n            return {\r\n                records: Object.keys(sellers)\r\n                    .map((seller) => {\r\n                        return {\r\n                            player: seller,\r\n                            count: sellers[seller],\r\n                        };\r\n                    })\r\n                    .sort((a, b) => b.count - a.count)\r\n                    .slice(0, count),\r\n                player,\r\n            };\r\n        })\r\n        .sort((a, b) => b.records.length - a.records.length)\r\n        .slice(0, count);\r\n};\r\n\r\nexport default class ChordChart extends Component<IProps, IState> {\r\n    props!: IProps;\r\n    state: IState;\r\n    matrix: number[][];\r\n    keys: string[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.state = {\r\n            tableData: {\r\n                direction: [],\r\n                s2t: [],\r\n                t2s: [],\r\n            },\r\n        };\r\n        const sellerArr = mutate(props.sellers, 'buyer', props.count);\r\n\r\n        let i = 0;\r\n        const playerToIndex: { [tag: string]: number } = {};\r\n        const pairings: { [pair: string]: number } = {};\r\n        sellerArr.forEach((seller) => {\r\n            seller.records.forEach((buyer) => {\r\n                pairings[`${seller.player}-${buyer.player}`] = buyer.count;\r\n            });\r\n        });\r\n        console.log(pairings);\r\n\r\n        // const pairingCount: {\r\n        //     [pair: string]: { forward: string; reverse: string; count: number };\r\n        // } = {};\r\n\r\n        Object.keys(pairings).forEach((pairing) => {\r\n            const split = pairing.split('-');\r\n            const reversed = `${split[1]}-${split[0]}`;\r\n            if (!pairings[reversed]) {\r\n                delete pairings[pairing];\r\n            } else if (pairings[pairing] === pairings[reversed]) {\r\n                delete pairings[pairing];\r\n                delete pairings[reversed];\r\n            }\r\n        });\r\n        console.log(pairings);\r\n\r\n        Object.keys(pairings).forEach((pair) => {\r\n            const split = pair.split('-');\r\n            playerToIndex[split[0]] ??= i++;\r\n        });\r\n        // console.log(pairingCount);\r\n        // console.log(pairings);\r\n        console.log(playerToIndex);\r\n\r\n        const tempKeys = Object.keys(playerToIndex)\r\n            .map((entry) => {\r\n                return { player: entry, index: playerToIndex[entry] };\r\n            })\r\n            .sort((a, b) => a.index - b.index);\r\n        this.keys = tempKeys.map((rec) => rec.player);\r\n        console.log(this.keys);\r\n\r\n        this.matrix = Array.from(Array(this.keys.length), () =>\r\n            Array(this.keys.length).fill(0)\r\n        );\r\n        // console.log(this.matrix);\r\n        Object.keys(pairings).forEach((pair) => {\r\n            const split = pair.split('-');\r\n            this.matrix[playerToIndex[split[0]]][playerToIndex[split[1]]] =\r\n                pairings[pair];\r\n            this.matrix[playerToIndex[split[1]]][playerToIndex[split[0]]] =\r\n                pairings[`${split[1]}-${split[0]}`];\r\n        });\r\n        console.log(this.matrix);\r\n    }\r\n\r\n    Title = (obj: any, title: string) => {\r\n        const { center } = obj;\r\n        console.log(obj);\r\n        return (\r\n            <text\r\n                x={center[0]}\r\n                textAnchor=\"middle\"\r\n                y={-60}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <p style={{ color: 'red' }}>\r\n                    Note: Click a cord to see what was exchanged between\r\n                    players!\r\n                </p>\r\n                <div style={{ width: '100%', height: '500px' }}>\r\n                    <ResponsiveChord\r\n                        matrix={this.matrix}\r\n                        keys={this.keys}\r\n                        margin={{ top: 90, right: 90, bottom: 90, left: 90 }}\r\n                        layers={[\r\n                            'ribbons',\r\n                            'arcs',\r\n                            'labels',\r\n                            'legends',\r\n                            (obj: any) =>\r\n                                this.Title(\r\n                                    obj,\r\n                                    `Read as: seller sold to buyer \"n\" times`\r\n                                ),\r\n                        ]}\r\n                        arcTooltip={(data: any) => {\r\n                            const { arc } = data;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    {arc.id}: {arc.formattedValue}\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        ribbonTooltip={(data: any) => {\r\n                            const { ribbon } = data;\r\n                            const { source, target } = ribbon;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <div>\r\n                                        {source.id} sold to {target.id}{' '}\r\n                                        {source.formattedValue} times\r\n                                    </div>\r\n                                    <div>\r\n                                        {target.id} sold to {source.id}{' '}\r\n                                        {target.formattedValue} times\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        colors={{ scheme: 'paired' }}\r\n                        labelRotation={-90}\r\n                        onRibbonClick={(ribbon, e) => {\r\n                            console.log(ribbon);\r\n                            const source = ribbon.source;\r\n                            const target = ribbon.target;\r\n\r\n                            const data: ITableData = {\r\n                                direction: ribbon.id.split('.'),\r\n                                s2t: [],\r\n                                t2s: [],\r\n                            };\r\n                            this.props.sellers[source.id].forEach((record) => {\r\n                                if (record.buyer === target.id) {\r\n                                    data.s2t.push({\r\n                                        name: record.item,\r\n                                        price: parseInt(record.price),\r\n                                        quantity: parseInt(record.quant),\r\n                                        date: record.timestamp,\r\n                                        dateName: format(\r\n                                            new Date(record.timestamp),\r\n                                            'mm/d/yy'\r\n                                        ),\r\n                                    });\r\n                                }\r\n                            });\r\n                            const targetToSource = [];\r\n                            this.props.sellers[target.id].forEach((record) => {\r\n                                if (record.buyer === source.id) {\r\n                                    data.t2s.push({\r\n                                        name: record.item,\r\n                                        price: parseInt(record.price),\r\n                                        quantity: parseInt(record.quant),\r\n                                        date: record.timestamp,\r\n                                        dateName: format(\r\n                                            new Date(record.timestamp),\r\n                                            'mm/d/yy'\r\n                                        ),\r\n                                    });\r\n                                }\r\n                            });\r\n                            console.log(data);\r\n                            this.setState({ tableData: data });\r\n                        }}\r\n                    />\r\n                </div>\r\n                {this.state.tableData.s2t.length > 0 ||\r\n                this.state.tableData.t2s.length > 0 ? (\r\n                    <div style={{ display: 'flex' }}>\r\n                        <div style={{ display: 'flex', position: 'relative' }}>\r\n                            <div\r\n                                style={{\r\n                                    position: 'absolute',\r\n                                    zIndex: 1,\r\n                                    bottom: '16px',\r\n                                    right: '586px',\r\n                                }}\r\n                            >\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    onClick={(e) =>\r\n                                        this.setState({\r\n                                            tableData: {\r\n                                                direction: [],\r\n                                                s2t: [],\r\n                                                t2s: [],\r\n                                            },\r\n                                        })\r\n                                    }\r\n                                >\r\n                                    Close Table\r\n                                </Button>\r\n                            </div>\r\n\r\n                            <Table\r\n                                style={{ marginRight: '2%' }}\r\n                                dataSource={this.state.tableData.s2t}\r\n                                columns={[\r\n                                    {\r\n                                        title: `Items sold by ${this.state.tableData.direction[1]} to ${this.state.tableData.direction[0]}`,\r\n                                        children: [\r\n                                            {\r\n                                                title: 'Date',\r\n                                                dataIndex: 'dateName',\r\n                                                key: 'date',\r\n                                                sorter: (a, b) => {\r\n                                                    return (\r\n                                                        new Date(\r\n                                                            a.date\r\n                                                        ).getTime() -\r\n                                                        new Date(\r\n                                                            b.date\r\n                                                        ).getTime()\r\n                                                    );\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                title: 'Item',\r\n                                                dataIndex: 'name',\r\n                                                key: 'item',\r\n                                            },\r\n                                            {\r\n                                                title: 'Quantity',\r\n                                                dataIndex: 'quantity',\r\n                                                key: 'quantity',\r\n                                                sorter: (a, b) =>\r\n                                                    a.quantity - b.quantity,\r\n                                            },\r\n                                            {\r\n                                                title: 'Price',\r\n                                                dataIndex: 'price',\r\n                                                key: 'value',\r\n                                                sorter: (a, b) =>\r\n                                                    a.price - b.price,\r\n                                            },\r\n                                        ],\r\n                                    },\r\n                                ]}\r\n                            />\r\n                            <Table\r\n                                dataSource={this.state.tableData.t2s}\r\n                                columns={[\r\n                                    {\r\n                                        title: `Items sold by ${this.state.tableData.direction[0]} to ${this.state.tableData.direction[1]}`,\r\n                                        children: [\r\n                                            {\r\n                                                title: 'Date',\r\n                                                dataIndex: 'dateName',\r\n                                                key: 'date',\r\n                                                sorter: (a, b) => {\r\n                                                    return (\r\n                                                        new Date(\r\n                                                            a.date\r\n                                                        ).getTime() -\r\n                                                        new Date(\r\n                                                            b.date\r\n                                                        ).getTime()\r\n                                                    );\r\n                                                },\r\n                                            },\r\n                                            {\r\n                                                title: 'Item',\r\n                                                dataIndex: 'name',\r\n                                                key: 'item',\r\n                                            },\r\n                                            {\r\n                                                title: 'Quantity',\r\n                                                dataIndex: 'quantity',\r\n                                                key: 'quantity',\r\n                                                sorter: (a, b) =>\r\n                                                    a.quantity - b.quantity,\r\n                                            },\r\n                                            {\r\n                                                title: 'Price',\r\n                                                dataIndex: 'price',\r\n                                                key: 'value',\r\n                                                sorter: (a, b) =>\r\n                                                    a.price - b.price,\r\n                                            },\r\n                                        ],\r\n                                    },\r\n                                ]}\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                ) : (\r\n                    <span />\r\n                )}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\n// import { Record } from '../../classes/DataParser';\r\nimport ItemLink, { WritType } from '../../classes/ItemLink';\r\nimport { ResponsiveSunburst } from '@nivo/sunburst';\r\n\r\ninterface IProps {\r\n    writs: { [key in WritType]: ItemLink[] };\r\n}\r\n\r\ninterface IData {\r\n    id: string | number;\r\n    value?: number;\r\n    children?: IData[];\r\n}\r\n\r\nexport default class WritSunburst extends Component<IProps> {\r\n    props!: IProps;\r\n    data: IData;\r\n\r\n    compileAlchemyData(alchemyWrits: ItemLink[]): IData {\r\n        const potionData: IData = { id: 'Potion', value: 0 };\r\n        const poisonData: IData = { id: 'Poison', value: 0 };\r\n        alchemyWrits.forEach((writ) => {\r\n            if (writ.itemLink.writ1 === 199 && potionData.value !== undefined) {\r\n                potionData.value = potionData.value + 1;\r\n            } else if (\r\n                writ.itemLink.writ1 === 239 &&\r\n                poisonData.value !== undefined\r\n            ) {\r\n                poisonData.value = poisonData.value + 1;\r\n            }\r\n        });\r\n\r\n        return {\r\n            id: 'Alchemy',\r\n            children: [potionData, poisonData],\r\n        };\r\n    }\r\n\r\n    compileBSData(bsWrits: ItemLink[]): IData {\r\n        const bs_weapon_1h_yellowData: IData = { id: '1H Legendary', value: 0 };\r\n        const bs_weapon_1h_purpleData: IData = { id: '1H Purple', value: 0 };\r\n        const bs_weapon_1hData: IData = {\r\n            id: 'One-handed',\r\n            children: [bs_weapon_1h_purpleData, bs_weapon_1h_yellowData],\r\n        };\r\n\r\n        const bs_weapon_2h_yellowData: IData = { id: '2H Legendary', value: 0 };\r\n        const bs_weapon_2h_purpleData: IData = { id: '2H Purple', value: 0 };\r\n        const bs_weapon_2hData: IData = {\r\n            id: 'Two-handed',\r\n            children: [bs_weapon_2h_purpleData, bs_weapon_2h_yellowData],\r\n        };\r\n\r\n        const bs_weapon_Data: IData = {\r\n            id: 'Blacksmithing Weapons',\r\n            children: [bs_weapon_1hData, bs_weapon_2hData],\r\n        };\r\n\r\n        const bs_armor_yellowData: IData = { id: 'Legendary Armor', value: 0 };\r\n        const bs_armor_purpleData: IData = { id: 'Purple Armor', value: 0 };\r\n        const bs_armor_Data: IData = {\r\n            id: 'Blacksmithing Armor',\r\n            children: [bs_armor_purpleData, bs_armor_yellowData],\r\n        };\r\n\r\n        const updateBSData = (itemType: number, itemQuality: number) => {\r\n            const update_quality = (purpleData: IData, yellowData: IData) => {\r\n                switch (itemQuality) {\r\n                    case 4:\r\n                        purpleData.value !== undefined &&\r\n                            (purpleData.value = purpleData.value + 1);\r\n                        return;\r\n                    case 5:\r\n                        yellowData.value !== undefined &&\r\n                            (yellowData.value = yellowData.value + 1);\r\n                        return;\r\n                    default:\r\n                        console.log('SKIP');\r\n                }\r\n            };\r\n            switch (itemType) {\r\n                /* falls through */\r\n                case 44:\r\n                case 46:\r\n                case 47:\r\n                case 48:\r\n                case 49:\r\n                case 50:\r\n                case 52:\r\n                    update_quality(bs_armor_purpleData, bs_armor_yellowData);\r\n                    return;\r\n                case 53:\r\n                case 56:\r\n                case 59:\r\n                case 62:\r\n                    update_quality(\r\n                        bs_weapon_1h_purpleData,\r\n                        bs_weapon_1h_yellowData\r\n                    );\r\n                    return;\r\n                case 67:\r\n                case 68:\r\n                case 69:\r\n                    update_quality(\r\n                        bs_weapon_2h_purpleData,\r\n                        bs_weapon_2h_yellowData\r\n                    );\r\n                    return;\r\n                default:\r\n                    console.log('SKIP ' + itemType);\r\n            }\r\n        };\r\n        bsWrits.forEach((writ) => {\r\n            const itemType = writ.itemLink.writ1;\r\n            const itemQuality = writ.itemLink.writ3;\r\n            updateBSData(itemType, itemQuality);\r\n        });\r\n        return {\r\n            id: 'Blacksmithing',\r\n            children: [bs_armor_Data, bs_weapon_Data],\r\n        };\r\n    }\r\n\r\n    compileClothierData(clothierWrits: ItemLink[]): IData {\r\n        const clo_light_purple_armor: IData = { id: 'Light Purple', value: 0 };\r\n        const clo_light_yellow_armor: IData = { id: 'Light Yellow', value: 0 };\r\n        const clo_light_armor: IData = {\r\n            id: 'Light Armor',\r\n            children: [clo_light_purple_armor, clo_light_yellow_armor],\r\n        };\r\n\r\n        const clo_medium_purple_armor: IData = {\r\n            id: 'Medium Purple',\r\n            value: 0,\r\n        };\r\n        const clo_medium_yellow_armor: IData = {\r\n            id: 'Medium Yellow',\r\n            value: 0,\r\n        };\r\n        const clo_medium_armor: IData = {\r\n            id: 'Medium Armor',\r\n            children: [clo_medium_purple_armor, clo_medium_yellow_armor],\r\n        };\r\n\r\n        const updateData = (itemType: number, itemQuality: number) => {\r\n            const update_quality = (purpleData: IData, yellowData: IData) => {\r\n                switch (itemQuality) {\r\n                    case 4:\r\n                        purpleData.value !== undefined &&\r\n                            (purpleData.value = purpleData.value + 1);\r\n                        return;\r\n                    case 5:\r\n                        yellowData.value !== undefined &&\r\n                            (yellowData.value = yellowData.value + 1);\r\n                        return;\r\n                    default:\r\n                        console.log('SKIP');\r\n                }\r\n            };\r\n            switch (itemType) {\r\n                /* falls through */\r\n                case 26:\r\n                case 28:\r\n                case 29:\r\n                case 30:\r\n                case 31:\r\n                case 32:\r\n                case 34:\r\n                    update_quality(\r\n                        clo_light_purple_armor,\r\n                        clo_light_yellow_armor\r\n                    );\r\n                    return;\r\n                case 35:\r\n                case 37:\r\n                case 38:\r\n                case 39:\r\n                case 40:\r\n                case 41:\r\n                case 43:\r\n                    update_quality(\r\n                        clo_medium_purple_armor,\r\n                        clo_medium_yellow_armor\r\n                    );\r\n                    return;\r\n                default:\r\n                    console.log('SKIP ' + itemType);\r\n            }\r\n        };\r\n\r\n        clothierWrits.forEach((writ) => {\r\n            const itemType = writ.itemLink.writ1;\r\n            const itemQuality = writ.itemLink.writ3;\r\n            updateData(itemType, itemQuality);\r\n        });\r\n\r\n        return {\r\n            id: 'Clothier',\r\n            children: [clo_light_armor, clo_medium_armor],\r\n        };\r\n    }\r\n\r\n    compileWoodworkingData(woodworkingWrits: ItemLink[]): IData {\r\n        const wood_weapons_purple: IData = {\r\n            id: 'Purple Wooden Weapons',\r\n            value: 0,\r\n        };\r\n        const wood_weapons_yellow: IData = {\r\n            id: 'Yellow Wooden Weapons',\r\n            value: 0,\r\n        };\r\n        const wood_weapons: IData = {\r\n            id: 'Wooden Weapons',\r\n            children: [wood_weapons_purple, wood_weapons_yellow],\r\n        };\r\n\r\n        const wood_shield_purple_armor: IData = {\r\n            id: 'Purple Shields',\r\n            value: 0,\r\n        };\r\n        const wood_shield_yellow_armor: IData = {\r\n            id: 'Yellow Shields',\r\n            value: 0,\r\n        };\r\n        const wood_armor: IData = {\r\n            id: 'Shields',\r\n            children: [wood_shield_purple_armor, wood_shield_yellow_armor],\r\n        };\r\n\r\n        const updateData = (itemType: number, itemQuality: number) => {\r\n            const update_quality = (purpleData: IData, yellowData: IData) => {\r\n                switch (itemQuality) {\r\n                    case 4:\r\n                        purpleData.value !== undefined &&\r\n                            (purpleData.value = purpleData.value + 1);\r\n                        return;\r\n                    case 5:\r\n                        yellowData.value !== undefined &&\r\n                            (yellowData.value = yellowData.value + 1);\r\n                        return;\r\n                    default:\r\n                        console.log('SKIP');\r\n                }\r\n            };\r\n            switch (itemType) {\r\n                case 70: // bow\r\n                case 71:\r\n                case 72:\r\n                case 73:\r\n                case 74:\r\n                    update_quality(wood_weapons_purple, wood_weapons_yellow);\r\n                    return;\r\n                case 65:\r\n                    update_quality(\r\n                        wood_shield_purple_armor,\r\n                        wood_shield_yellow_armor\r\n                    );\r\n                    return;\r\n                default:\r\n                    console.log('SKIP ' + itemType);\r\n            }\r\n        };\r\n\r\n        woodworkingWrits.forEach((writ) => {\r\n            const itemType = writ.itemLink.writ1;\r\n            const itemQuality = writ.itemLink.writ3;\r\n            updateData(itemType, itemQuality);\r\n        });\r\n\r\n        return {\r\n            id: 'Woodworking',\r\n            children: [wood_armor, wood_weapons],\r\n        };\r\n    }\r\n\r\n    compileEnchantingData(alchemyWrits: ItemLink[]): IData {\r\n        return {\r\n            id: 'Enchanting',\r\n            value: alchemyWrits.length,\r\n        };\r\n    }\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        console.log(props.writs['ALCHEMY'].length);\r\n        console.log(props.writs['BLACKSMITHING'].length);\r\n        console.log(props.writs['CLOTHIER'].length);\r\n        console.log(props.writs['ENCHANTING'].length);\r\n        console.log(props.writs['JEWELRY'].length);\r\n        console.log(props.writs['PROVISIONING'].length);\r\n        console.log(props.writs['WOODWORKING'].length);\r\n\r\n        this.data = {\r\n            id: 'writs',\r\n            children: [\r\n                this.compileAlchemyData(props.writs['ALCHEMY']),\r\n                this.compileBSData(props.writs['BLACKSMITHING']),\r\n                this.compileClothierData(props.writs['CLOTHIER']),\r\n                this.compileWoodworkingData(props.writs['WOODWORKING']),\r\n                this.compileEnchantingData(props.writs['ENCHANTING']),\r\n            ],\r\n        };\r\n\r\n        console.log(this.data);\r\n    }\r\n\r\n    // Title = (obj: any, title: string) => {\r\n    //     const { center } = obj;\r\n    //     console.log(obj);\r\n    //     return (\r\n    //         <text\r\n    //             x={center[0]}\r\n    //             textAnchor=\"middle\"\r\n    //             y={-60}\r\n    //             fill=\"white\"\r\n    //             fontWeight=\"bold\"\r\n    //         >\r\n    //             {title}\r\n    //         </text>\r\n    //     );\r\n    // };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <div style={{ width: '100%', height: '500px' }}>\r\n                    <ResponsiveSunburst\r\n                        data={this.data}\r\n                        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\r\n                        colors={{ scheme: 'nivo' }}\r\n                        tooltip={(data: any) => {\r\n                            console.log(data);\r\n\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <p>{data.id}</p>\r\n                                    <p>{data.formattedValue}</p>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        enableArcLabels\r\n                        arcLabelsSkipAngle={8}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport TransactionHistory from './Charts/TransactionHistory';\r\nimport SellerBars from './Charts/SellerBars';\r\nimport ItemTreemap from './Charts/ItemTreemap';\r\nimport MotifTracker from './Charts/MotifTracker';\r\nimport ChordChart from './Charts/ChordChart';\r\nimport WritSunburst from './Charts/WritSunburst';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Story extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Transaction History</h1>\r\n                <TransactionHistory data={this.props.data} />\r\n                <h1>Top Sellers</h1>\r\n                <SellerBars data={this.props.data.sellerMap} count={10} />\r\n                <h1>Item Marketshare</h1>\r\n                <ItemTreemap data={this.props.data.itemMap} count={75} />\r\n                <div style={{ paddingBottom: '2rem' }}> </div>\r\n                <h1>Changes in Price as a Result of Changes in Supply</h1>\r\n                <MotifTracker data={this.props.data.itemMap} />\r\n                <em>\r\n                    April 1st was the start of the Anniversary event, where\r\n                    compleating any quest has a chance to give you any motif\r\n                    (recipe that teaches you how to craft a unique style of\r\n                    armor) in the game. This substatially increases the supply\r\n                    as they are normally very rare. As a result, we should\r\n                    expect the price to decrease\r\n                </em>\r\n                <h1>Interactions between Sellers {'&'} Buyers</h1>\r\n                <ChordChart\r\n                    buyers={this.props.data.buyerMap}\r\n                    sellers={this.props.data.sellerMap}\r\n                    count={250}\r\n                />\r\n                <h1>Crafting Writ Distribution</h1>\r\n                <WritSunburst writs={this.props.data.writs} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/perfect_comp.2a26e959.png\";","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\r\nimport format from 'dateformat';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    item: string;\r\n    players: string[];\r\n}\r\nexport default class PlayerScatterPlot extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        id: string;\r\n        data: { x: number; y: number; date: string }[];\r\n    }[] = [];\r\n    yMax: number = Number.MIN_VALUE;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        props.players.forEach((player) => {\r\n            const playerRecords = props.data[player].filter(\r\n                (record) => record.item === props.item\r\n            );\r\n            const temp: {\r\n                id: string;\r\n                data: { x: number; y: number; date: string }[];\r\n            } = {\r\n                id: player,\r\n                data: [],\r\n            };\r\n            playerRecords.forEach((record) => {\r\n                const price = parseInt(record.price) / parseInt(record.quant);\r\n                if (this.yMax < price) {\r\n                    this.yMax = price;\r\n                }\r\n                temp.data.push({\r\n                    x: parseInt(record.quant),\r\n                    y: price,\r\n                    date: record.timestamp,\r\n                });\r\n            });\r\n            this.data.push(temp);\r\n        });\r\n    }\r\n\r\n    Title = (obj: any, title: string) => {\r\n        const { innerWidth } = obj;\r\n        console.log(obj);\r\n        return (\r\n            <text\r\n                x={innerWidth / 2}\r\n                textAnchor=\"middle\"\r\n                y={-15}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '300px',\r\n                    }}\r\n                >\r\n                    <ResponsiveScatterPlot\r\n                        data={this.data}\r\n                        margin={{ top: 60, right: 140, bottom: 70, left: 90 }}\r\n                        xScale={{ type: 'linear', min: 0, max: 'auto' }}\r\n                        xFormat={function (e) {\r\n                            return e + ' pcs';\r\n                        }}\r\n                        yScale={{\r\n                            type: 'linear',\r\n                            min: 0,\r\n                            max: 1.5 * this.yMax,\r\n                        }}\r\n                        yFormat={function (e) {\r\n                            return e + 'g per';\r\n                        }}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'bottom-right',\r\n                                direction: 'column',\r\n                                justify: false,\r\n                                translateX: 130,\r\n                                translateY: 0,\r\n                                itemWidth: 100,\r\n                                itemHeight: 12,\r\n                                itemsSpacing: 5,\r\n                                itemDirection: 'left-to-right',\r\n                                symbolSize: 12,\r\n                                symbolShape: 'circle',\r\n                                effects: [\r\n                                    {\r\n                                        on: 'hover',\r\n                                        style: {\r\n                                            itemOpacity: 1,\r\n                                        },\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ]}\r\n                        theme={{ textColor: '#fff' }}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'nodes',\r\n                            'markers',\r\n                            'legends',\r\n                            (obj) =>\r\n                                this.Title(\r\n                                    obj,\r\n                                    `Price per unit of ${\r\n                                        this.props.item\r\n                                    } for players: ${this.props.players.join(\r\n                                        ', '\r\n                                    )}`\r\n                                ),\r\n                        ]}\r\n                        tooltip={(obj: any) => {\r\n                            const { data } = obj.node;\r\n                            console.log(obj);\r\n                            console.log(data);\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    {data.serieId} sold a stack of {data.x}{' '}\r\n                                    {this.props.item} for {data.y}g per unit on{' '}\r\n                                    {format(new Date(data.date), 'mm/dd/yy')}\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    />\r\n                    {/* <ResponsiveBar\r\n                        data={this.data}\r\n                        keys={['quant']}\r\n                        indexBy=\"player\"\r\n                        groupMode=\"grouped\"\r\n                        margin={{\r\n                            top: 50,\r\n                            right: 130,\r\n                            bottom: 50,\r\n                            left: 60,\r\n                        }}\r\n                        colors={'#0f0'}\r\n                        theme={{ textColor: '#fff' }}\r\n                        axisLeft={null}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                itemWidth: -10,\r\n                                itemHeight: 20,\r\n                                dataFrom: 'keys',\r\n                                direction: 'column',\r\n                            },\r\n                        ]}\r\n                        labelTextColor={'#fff'}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'bars',\r\n                            'markers',\r\n                            'legends',\r\n                            this.Title,\r\n                        ]}\r\n                    /> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\nimport { ResponsiveBar } from '@nivo/bar';\r\nimport PlayerScatterPlot from './PlayerScatterPlot';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    item: string;\r\n    computeStat: (arr: number[]) => number;\r\n    show: number;\r\n    title: string;\r\n}\r\n\r\ninterface IState {\r\n    player: string;\r\n    quant: number;\r\n    key: number;\r\n}\r\n\r\nexport default class PriceTakerPlot extends Component<IProps, IState> {\r\n    props!: IProps;\r\n    state: IState;\r\n    data: {\r\n        player: string;\r\n        quant: number;\r\n    }[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const recordsPerPlayer: {\r\n            player: string;\r\n            recordsForItem: Record[];\r\n        }[] = [];\r\n\r\n        Object.keys(props.data).forEach((player) => {\r\n            const records = props.data[player];\r\n            const recordsForItem: Record[] = [];\r\n            records.forEach((record) => {\r\n                if (record.item === props.item) {\r\n                    recordsForItem.push(record);\r\n                }\r\n            });\r\n            if (recordsForItem.length > 0) {\r\n                recordsPerPlayer.push({ player, recordsForItem });\r\n            }\r\n        });\r\n        console.log(recordsPerPlayer);\r\n\r\n        recordsPerPlayer.forEach((portfolio) => {\r\n            const records = portfolio.recordsForItem;\r\n            const quant = records.map((record) => parseInt(record.quant));\r\n            this.data.push({\r\n                player: portfolio.player,\r\n                quant: props.computeStat(quant),\r\n            });\r\n        });\r\n        console.log(this.data);\r\n\r\n        this.data.sort((a, b) => b.quant - a.quant);\r\n        this.data = this.data.slice(0, props.show + 1);\r\n        console.log(this.data);\r\n\r\n        this.state = {\r\n            player: this.data[0].player,\r\n            quant: this.data[0].quant,\r\n            key: 1,\r\n        };\r\n    }\r\n\r\n    Title = (obj: any) => {\r\n        const { width, height } = obj;\r\n        return (\r\n            <text\r\n                x={width / 2}\r\n                textAnchor=\"middle\"\r\n                y={-15}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {this.props.title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '300px',\r\n                    }}\r\n                >\r\n                    <ResponsiveBar\r\n                        data={this.data}\r\n                        keys={['quant']}\r\n                        indexBy=\"player\"\r\n                        groupMode=\"grouped\"\r\n                        margin={{\r\n                            top: 50,\r\n                            right: 130,\r\n                            bottom: 50,\r\n                            left: 60,\r\n                        }}\r\n                        colors={'#0f0'}\r\n                        theme={{ textColor: '#fff' }}\r\n                        axisLeft={null}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                itemWidth: -10,\r\n                                itemHeight: 20,\r\n                                dataFrom: 'keys',\r\n                                direction: 'column',\r\n                            },\r\n                        ]}\r\n                        labelTextColor={'#fff'}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'bars',\r\n                            'markers',\r\n                            'legends',\r\n                            this.Title,\r\n                        ]}\r\n                        tooltip={(obj: any) => {\r\n                            const { data } = obj;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    {data.player} sold {data.quant} unique\r\n                                    quantities of {this.props.item}\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        onClick={(obj) => {\r\n                            const player = obj.indexValue.toString();\r\n                            const quant = obj.value;\r\n                            this.setState({\r\n                                player,\r\n                                quant,\r\n                                key: this.state.key + 1,\r\n                            });\r\n                        }}\r\n                    />\r\n                </div>\r\n                <p>\r\n                    Looking at the above chart, player {this.state.player} sold{' '}\r\n                    {this.state.quant} different quantities of the item\r\n                </p>\r\n                <p style={{ color: 'red' }}>\r\n                    Note: Click a bar to see a plot of their sales\r\n                </p>\r\n                <PlayerScatterPlot\r\n                    key={this.state.key}\r\n                    data={this.props.data}\r\n                    item=\"dreugh wax\"\r\n                    players={[this.state.player]}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    item: string;\r\n    dateStart: Date;\r\n    dateEnd: Date;\r\n}\r\nexport default class ItemScatterPlot extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        id: string;\r\n        data: { x: string; y: number }[];\r\n    }[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const entries: {\r\n            [key: string]: {\r\n                id: string;\r\n                data: { x: string; y: number }[];\r\n            };\r\n        } = {};\r\n        props.data[props.item].forEach((record) => {\r\n            const recordDate = new Date(record.timestamp);\r\n            if (recordDate > props.dateStart && recordDate < props.dateEnd) {\r\n                // entry.data.push({\r\n                //     x: record.timestamp.split(' ')[0],\r\n                //     y: parseInt(record.price) / parseInt(record.quant),\r\n                // });\r\n                if (!entries[record.guild]) {\r\n                    entries[record.guild] = {\r\n                        id: record.guild,\r\n                        data: [\r\n                            {\r\n                                x: record.timestamp.split(' ')[0],\r\n                                y:\r\n                                    parseInt(record.price) /\r\n                                    parseInt(record.quant),\r\n                            },\r\n                        ],\r\n                    };\r\n                } else {\r\n                    entries[record.guild].data.push({\r\n                        x: record.timestamp.split(' ')[0],\r\n                        y: parseInt(record.price) / parseInt(record.quant),\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        Object.keys(entries).forEach((entry) => this.data.push(entries[entry]));\r\n    }\r\n\r\n    Title = (obj: any, title: string) => {\r\n        const { innerWidth } = obj;\r\n        console.log(obj);\r\n        return (\r\n            <text\r\n                x={innerWidth / 2}\r\n                textAnchor=\"middle\"\r\n                y={-15}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    formatDate(d: Date) {\r\n        return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '300px',\r\n                    }}\r\n                >\r\n                    <ResponsiveScatterPlot\r\n                        data={this.data}\r\n                        margin={{ top: 60, right: 140, bottom: 70, left: 90 }}\r\n                        xScale={{\r\n                            type: 'time',\r\n                            format: '%Y-%m-%d',\r\n                            precision: 'day',\r\n                        }}\r\n                        xFormat=\"time:%Y-%m-%d\"\r\n                        // yScale={{\r\n                        //     type: 'linear',\r\n                        //     min: 0,\r\n                        //     // max: 1.5 * this.yMax,\r\n                        // }}\r\n                        // yFormat={function (e) {\r\n                        //     return e + 'g';\r\n                        // }}\r\n                        axisBottom={{\r\n                            format: '%b %d',\r\n                            tickValues: 'every 2 days',\r\n                        }}\r\n                        colors={{ scheme: 'category10' }}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'bottom-right',\r\n                                direction: 'column',\r\n                                justify: false,\r\n                                translateX: 130,\r\n                                translateY: 0,\r\n                                itemWidth: 100,\r\n                                itemHeight: 12,\r\n                                itemsSpacing: 5,\r\n                                itemDirection: 'left-to-right',\r\n                                symbolSize: 12,\r\n                                symbolShape: 'circle',\r\n                                effects: [\r\n                                    {\r\n                                        on: 'hover',\r\n                                        style: {\r\n                                            itemOpacity: 1,\r\n                                        },\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ]}\r\n                        theme={{ textColor: '#fff' }}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'nodes',\r\n                            'markers',\r\n                            'legends',\r\n                            (obj) =>\r\n                                this.Title(\r\n                                    obj,\r\n                                    `Sales of ${\r\n                                        this.props.item\r\n                                    } between ${this.formatDate(\r\n                                        this.props.dateStart\r\n                                    )} to ${this.formatDate(\r\n                                        this.props.dateEnd\r\n                                    )}`\r\n                                ),\r\n                        ]}\r\n                        tooltip={(obj: any) => {\r\n                            const { data } = obj.node;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <div>Guild: {data.serieId}</div>\r\n                                    <div>Date: {data.formattedX}</div>\r\n                                    <div>Price: {data.formattedY}g</div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport MotifTracker from './Charts/MotifTracker';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { Popover } from 'antd';\r\nimport ImgPerfectCompetition from '../perfect_comp.png';\r\nimport PlayerBarChart from './Analysis/PriceTakerPlot';\r\n// import PlayerBarChart from './Analysis/PlayerBarChart';\r\nimport PlayerScatterPlot from './Analysis/PlayerScatterPlot';\r\nimport ItemScatterPlot from './Analysis/ItemScatterPlot';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Analysis extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.props;\r\n        return (\r\n            <div>\r\n                <h1>Preface</h1>\r\n                <p>\r\n                    In order to determine wheather or not the economy can be\r\n                    modeled by perfect competition, we need to assess if the\r\n                    following conditions hold true\r\n                </p>\r\n                <h1>1) Many firms</h1>\r\n                <p>\r\n                    In a perfectly competitive market, this condition is\r\n                    important as the more sellers you have, the harder it is to\r\n                    colude on fixing prices. Without the ability to colude,\r\n                    sellers are forced to sell at the markets asking price. From\r\n                    this data set alone, {data.sellers.length} unique sellers\r\n                    were recorded across {data.guilds.length} guilds. With over\r\n                    200 guild traders available, there could be anywhere from{' '}\r\n                    {(100 * 200).toLocaleString()} to{' '}\r\n                    {(500 * 200).toLocaleString()} sellers.\r\n                </p>\r\n                <h1>2) Freedom of entry and exit</h1>\r\n                <p>\r\n                    The 2nd condition for a perfectly competitive market is\r\n                    there are no barries of entry or exit into or out of the\r\n                    market. If any barriers exist, it will limit new firms from\r\n                    entering the market due to high costs of entry, or fear of\r\n                    costs from leaving.\r\n                </p>\r\n                <h2>Freedom of entry</h2>\r\n                <p>\r\n                    As mentioned previously, in order to sell on the market, one\r\n                    must be a member of a guild who owns a trader. Due to the\r\n                    high costs required by a guild to bid on one, most require\r\n                    weekly dues from their members. If one is a new player\r\n                    starting out, their fees are often to high, forcing them to\r\n                    join a guild in a remote location that receives little foot\r\n                    traffic. As a result of this, barriers exist for entry into\r\n                    the market which lowers the amount of sellers present in the\r\n                    economy\r\n                </p>\r\n                <h2>Freedom of exit</h2>\r\n                <p>\r\n                    In order to list an item on the market, a tax must be paid,\r\n                    based on the value of the item you are selling, which goes\r\n                    to oblivion (this is a measure implemented by the developers\r\n                    of many MMOs as one method of a{' '}\r\n                    <a href=\"https://en.wikipedia.org/wiki/Gold_sink\">\r\n                        gold sink\r\n                    </a>\r\n                    ). If a player is listing multiple high value items but\r\n                    suddenly has to exist the market, that gold will be\r\n                    permenetly lost as they won't make it back once the item(s)\r\n                    sell.\r\n                </p>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Listing Price</th>\r\n                            <th>Listing Tax (1%)</th>\r\n                            <th>Sale Tax (7%)</th>\r\n                            <th>Profit with sale</th>\r\n                            <th>Profit without sale</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>100g</td>\r\n                            <td>1g</td>\r\n                            <td>7g</td>\r\n                            <td>92g</td>\r\n                            <td>-1g</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>1,000g</td>\r\n                            <td>10g</td>\r\n                            <td>70g</td>\r\n                            <td>920g</td>\r\n                            <td>-10g</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>10,000g</td>\r\n                            <td>100g</td>\r\n                            <td>700g</td>\r\n                            <td>9,200g</td>\r\n                            <td>-100g</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>100,000g</td>\r\n                            <td>1,000g</td>\r\n                            <td>7,000g</td>\r\n                            <td>92,000g</td>\r\n                            <td>-1,000g</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>1,000,000g</td>\r\n                            <td>10,000g</td>\r\n                            <td>70,000g</td>\r\n                            <td>920,000g</td>\r\n                            <td>-10,000g</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>10,000,000g</td>\r\n                            <td>100,000g</td>\r\n                            <td>700,000g</td>\r\n                            <td>9,200,000g</td>\r\n                            <td>-100,000g</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n                <h1>3) All firms produce an identical product</h1>\r\n                <p>\r\n                    The products that can be sold are determined by what items\r\n                    the developers create. Players are not able to create their\r\n                    own unique products, making this requirement true.\r\n                </p>\r\n                <h1>4) All firms are price takers</h1>\r\n                <p>\r\n                    In order for this condition to be true, an individual seller\r\n                    should have no influence over the price . The easiest way to\r\n                    determine this is by checking if a seller's demand curve is\r\n                    perfectly elastic{' '}\r\n                    <Popover\r\n                        content={\r\n                            <div style={{ width: '21vw' }}>\r\n                                <p>\r\n                                    In economics, elasticity is the measure of\r\n                                    the sensitivity to change between two\r\n                                    variables. In our scenario, perfect\r\n                                    elasticity implies that if a seller where to\r\n                                    change their price, all of the demand for\r\n                                    their items will disapear. In other words,\r\n                                    ploting a curve for demand would result in a\r\n                                    horizontal line with a slope of 0.\r\n                                </p>\r\n                                <img\r\n                                    src={ImgPerfectCompetition}\r\n                                    alt=\"Perfect competition\"\r\n                                    style={{ width: '20vw' }}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        title=\"Econommics: Elasticity\"\r\n                        trigger=\"hover\"\r\n                    >\r\n                        <QuestionCircleOutlined />\r\n                    </Popover>\r\n                </p>\r\n                <p>\r\n                    The easiest way to check this is to find a seller with a\r\n                    large number of distinct quantities sold for a particular\r\n                    item\r\n                </p>\r\n                <PlayerBarChart\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    computeStat={(arr: number[]) =>\r\n                        [...((new Set(arr) as unknown) as number[])].length\r\n                    }\r\n                    show={10}\r\n                    title={\r\n                        'Unique quantities for the quantity of dreugh wax sold, per player'\r\n                    }\r\n                />\r\n                {/* <p>\r\n                    Looking at the above chart, player @358 sold 11 different\r\n                    quantities of the item\r\n                </p> */}\r\n                {/* <PlayerBarChart\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    computeStat={(arr: number[]) =>\r\n                        arr.reduce((prev, curr) => prev + curr) / arr.length\r\n                    }\r\n                    show={10}\r\n                /> */}\r\n                {/* <PlayerScatterPlot\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    players={['@358']}\r\n                /> */}\r\n                <p>\r\n                    If we make a Quantity v. Price chart, we can see that the\r\n                    line of best fit would have a slope near 0, making this\r\n                    true.\r\n                </p>\r\n                <h1>5) There is perfect information and knowledge</h1>\r\n                <h2>Update 29 Analysis</h2>\r\n                {/* <MotifTracker data={this.props.data.itemMap} /> */}\r\n                <p>\r\n                    For this condition to be true, everyone must be aware of the\r\n                    most up-to-date info on prices and events that could effect\r\n                    prices\r\n                </p>\r\n                <p>\r\n                    On March 8th, U29: <em>The Flames of Ambition</em> was\r\n                    released. With this update, the max level was raised for the\r\n                    first time in over 3 years. As a result of this, many\r\n                    competitive players wanted to get to the new level cap as\r\n                    fast as possible. One way to do this is with a potion called\r\n                    Mythic Ambrosia, which increases the rate at which you level\r\n                    up by 150%.\r\n                </p>\r\n                <p>\r\n                    By now, many who are knowledgeable of ecomonics will know\r\n                    that with a drastic increase in demand, prices will\r\n                    skyrocket. If this condition was true, every seller would\r\n                    have been aware of this and have accounted for it\r\n                    accordingly.\r\n                </p>\r\n                <ItemScatterPlot\r\n                    item=\"Aetherial Dust\"\r\n                    data={this.props.data.itemMap}\r\n                    dateStart={new Date('3/05/2021')}\r\n                    dateEnd={new Date('3/30/2021')}\r\n                />\r\n                <p>\r\n                    Looking at the above chart, some interesting trends surface:\r\n                </p>\r\n                <ol>\r\n                    <li>\r\n                        The point at which the price will be highest is right\r\n                        when it becomes available. Looking at sales before the\r\n                        8th, we see some people sold too early and lost a\r\n                        substantial amount of money\r\n                    </li>\r\n                    <li>\r\n                        Lucian Allegiance is one of the most competitive trading\r\n                        guilds in the game, holding their trader at the most\r\n                        populous city of Mournhold. Looking at all of the sales\r\n                        at the peak (March 7th), this was the only guild which\r\n                        sold the item at an inflated price. The only sale from\r\n                        another guild was at the original price before the price\r\n                        increase\r\n                    </li>\r\n                    <li>\r\n                        As the time since the updates draw out, we start seeing\r\n                        more and more sales from other guilds. This is most\r\n                        likely due to word of mouth, as players who were\r\n                        initially not aware of the increased demand start trying\r\n                        to obtain the item to sell\r\n                    </li>\r\n                </ol>\r\n                <p>\r\n                    Based on these observations, the spread of information\r\n                    doesn't appear to immedietly reach everyone, making this\r\n                    condition untrue\r\n                </p>\r\n                <h2>Addons</h2>\r\n                <p>\r\n                    Another factor that effects the validity of this condition\r\n                    are price tracking addons. By default, there are no tools\r\n                    provided by the creators of the game to efficiently track\r\n                    prices of items. As a result, players of the game created\r\n                    addons and tools such as{' '}\r\n                    <a href=\"https://esouimods.github.io/3-master_merchant.html\">\r\n                        Master Merchant\r\n                    </a>{' '}\r\n                    (MM) and{' '}\r\n                    <a href=\"https://tamrieltradecentre.com/\">\r\n                        Tamriel Trade Center\r\n                    </a>{' '}\r\n                    (TTC). As helpful as these may be, many casual players are\r\n                    unaware of these addons, and have no basis on which to judge\r\n                    the true value of an item. As a result of this, we see many\r\n                    outliers within the data where an item was sold well below\r\n                    the average, or was bought well above it.\r\n                </p>\r\n                <h1>Conclusion</h1>\r\n                <p>\r\n                    After careful analysis, the only conditions which hold true\r\n                    are 1, 3, and 4. Since 2 and 5 don't, we cannot use this\r\n                    economy as a model for perfect competition\r\n                </p>\r\n                <h2>Differences from World of Warcraft</h2>\r\n                <p>\r\n                    In Eli Kosminsky's paper, he determined that the econonmy\r\n                    within WoW infact does follow the model of perfect\r\n                    competition. The reason for these two different conclusions\r\n                    are that WoW has a centralized economy, with only one\r\n                    central auction house with which you can buy and sell items.\r\n                    Furthurmore, anyone has access to the auction house and no\r\n                    3rd party is needed. While WoW also needs 3rd party addons\r\n                    to track prices, a novice seller can easily search for what\r\n                    they are selling and see every single listing of that item,\r\n                    and immedietly know the true value. Compared to ESO, you\r\n                    only see the listings for that trader, which could have\r\n                    prices that vastly differ from another\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n} from 'react-router-dom';\r\n\r\nimport Home from './components/Home';\r\nimport Story from './components/Story';\r\nimport { DataTable } from './classes/DataParser';\r\nimport Analysis from './components/Analysis';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class App extends React.PureComponent<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>The Economy of ESO</h1>\r\n                <nav className=\"nav\">\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/home\"\r\n                            >\r\n                                Home\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/overview\"\r\n                            >\r\n                                Overview\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/analysis\"\r\n                            >\r\n                                Analysis\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <Switch>\r\n                    <Route path=\"/app/analysis\">\r\n                        <Analysis data={this.props.data} />\r\n                    </Route>\r\n                    <Route path=\"/app/overview\">\r\n                        <Story data={this.props.data} />\r\n                    </Route>\r\n                    <Route path=\"/app/home\">\r\n                        <Home data={this.props.data} />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/spinner.3fd780cb.png\";","import * as React from 'react';\r\nimport {\r\n    Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n    useHistory,\r\n    Redirect,\r\n    RouteComponentProps,\r\n    withRouter,\r\n} from 'react-router-dom';\r\nimport App from '../App';\r\nimport DataParser from '../classes/DataParser';\r\nimport spinner from '../spinner.png';\r\n\r\ninterface IProps extends RouteComponentProps<any> {}\r\n\r\ninterface IState {\r\n    stageText: string;\r\n}\r\n\r\nclass Root extends React.Component<IProps, IState> {\r\n    props!: IProps;\r\n    parser: DataParser;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.parser = new DataParser(this.redirect, this.setStageText);\r\n        this.state = {\r\n            stageText: 'Fetching data...',\r\n        };\r\n        console.log(props);\r\n    }\r\n\r\n    setStageText = (text: string) => {\r\n        if (this.state) {\r\n            this.setState({ stageText: text });\r\n        }\r\n    };\r\n\r\n    redirect = () => {\r\n        console.log('here');\r\n        this.props.history.push('/app/home');\r\n        console.log(this.props.history);\r\n    };\r\n\r\n    render() {\r\n        console.log(this.parser.getDataTable());\r\n        console.log(this.props.history);\r\n        console.log(this.state);\r\n        if (\r\n            this.parser.getDataTable().global.length === 0 &&\r\n            this.props.history.location.pathname !== '/loading'\r\n        ) {\r\n            this.props.history.push('/loading');\r\n        }\r\n        return (\r\n            <Switch>\r\n                <Route\r\n                    path=\"/app\"\r\n                    component={() => {\r\n                        return <App data={this.parser.getDataTable()} />;\r\n                    }}\r\n                />\r\n                <Route path=\"/loading\">\r\n                    <div style={{ textAlign: 'center', marginTop: '10vh' }}>\r\n                        <h2>Please wait while the app processes the data</h2>\r\n                        <div>\r\n                            <div>{this.state.stageText}</div>\r\n                            <img\r\n                                src={spinner}\r\n                                style={{\r\n                                    width: '15rem',\r\n                                    marginTop: '2rem',\r\n                                    animationName: 'spinner',\r\n                                    animationDuration: '4s',\r\n                                    animationIterationCount: 'infinite',\r\n                                    background: 'transparent',\r\n                                }}\r\n                                alt=\"Spinner\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Route>\r\n                {/* <Redirect from=\"/\" to=\"/loading\" /> */}\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Root);\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Router } from 'react-router-dom';\r\nimport Root from './components/Root';\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory();\r\n// const parser = new DataParser();\r\n\r\nReactDOM.render(\r\n    <Router history={history}>\r\n        <Root />\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}