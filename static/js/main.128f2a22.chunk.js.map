{"version":3,"sources":["classes/DataParser.ts","reportWebVitals.ts","components/Home.tsx","components/Charts/TransactionHistory.tsx","components/Charts/SellerBars.tsx","components/Charts/ItemTreemap.tsx","components/Story.tsx","App.tsx","spinner.png","components/Root.tsx","index.tsx"],"names":["DataParser","redirect","global","buyerMap","buyers","sellerMap","sellers","itemMap","items","guildMap","guilds","dateMap","dates","isNode","process","versions","node","fetch","then","res","text","parse","worker","header","step","row","data","push","undefined","timestamp","name","item","insert","buyer","seller","guild","date","split","complete","console","log","length","Object","keys","delimiter","key","record","map","this","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Home","props","href","Component","TransactionHistory","min","Date","max","avg","forEach","guildArr","exclude","includes","value","day","getMonth","getDate","getFullYear","getDay","dateToString","Math","floor","reduce","prev","curr","style","width","height","to","from","tooltip","padding","backgroundColor","dateToDayOfWeek","color","SellerBars","totalSaleCount","totalSaleValue","tempRecords","player","origRecords","saleValue","rec","parseInt","price","saleCount","nil","sort","a","b","i","count","toLocaleString","position","indexBy","groupMode","margin","top","right","bottom","left","colors","theme","textColor","axisLeft","legends","anchor","itemWidth","itemHeight","dataFrom","direction","labelTextColor","opacity","enableGridY","labelFormat","ItemTreemap","children","perItemSaleValue","quant","round","identity","valueFormat","labelSkipSize","parentLabelTextColor","modifiers","borderColor","leavesOnly","display","gridTemplate","child","marginTop","Story","paddingBottom","App","className","exact","activeClassName","path","React","PureComponent","Root","parser","history","getDataTable","location","pathname","component","textAlign","src","spinner","animationName","animationDuration","animationIterationCount","alt","withRouter","createBrowserHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.128f2a22.chunk.js","sourcesContent":["// import { Record } from '../data_dump';\r\nimport { parse, ParseResult } from 'papaparse';\r\n\r\nexport interface DataTable {\r\n    global: Record[];\r\n    buyerMap: { [name: string]: Record[] };\r\n    buyers: string[];\r\n    sellerMap: { [name: string]: Record[] };\r\n    sellers: string[];\r\n    itemMap: { [item: string]: Record[] };\r\n    items: string[];\r\n    guildMap: { [guild: string]: Record[] };\r\n    guilds: string[];\r\n    dateMap: { [date: string]: Record[] };\r\n    dates: string[];\r\n}\r\n\r\nexport interface Record {\r\n    buyer: string;\r\n    guild: string;\r\n    item: string;\r\n    price: string;\r\n    quant: string;\r\n    seller: string;\r\n    timestamp: string;\r\n}\r\n\r\nexport default class DataParser {\r\n    global: Record[] = [];\r\n    buyerMap: { [name: string]: Record[] } = {};\r\n    buyers: string[] = [];\r\n    sellerMap: { [name: string]: Record[] } = {};\r\n    sellers: string[] = [];\r\n    itemMap: { [item: string]: Record[] } = {};\r\n    items: string[] = [];\r\n    guildMap: { [guild: string]: Record[] } = {};\r\n    guilds: string[] = [];\r\n    dateMap: { [date: string]: Record[] } = {};\r\n    dates: string[] = [];\r\n\r\n    private insert(\r\n        key: string,\r\n        record: Record,\r\n        map: { [key: string]: Record[] }\r\n    ) {\r\n        if (map[key] === undefined) {\r\n            map[key] = [];\r\n        }\r\n        map[key].push(record);\r\n    }\r\n\r\n    constructor(redirect: () => void) {\r\n        const isNode =\r\n            typeof process !== 'undefined' &&\r\n            process.versions != null &&\r\n            process.versions.node != null;\r\n        const url = isNode\r\n            ? 'NicolasNewman/CGT290-Final/master/data/data.csv'\r\n            : 'https://raw.githubusercontent.com/NicolasNewman/CGT290-Final/master/data/data.csv';\r\n        fetch(url)\r\n            .then((res) => res.text())\r\n            .then((text) => {\r\n                parse<Record>(text, {\r\n                    worker: true,\r\n                    header: true,\r\n\r\n                    step: (row) => {\r\n                        const data = (row.data as unknown) as Record;\r\n                        this.global.push(data);\r\n                        if (data.timestamp === undefined) {\r\n                            return;\r\n                        }\r\n\r\n                        const name = data.item;\r\n                        this.insert(name, data, this.itemMap);\r\n                        const buyer = data.buyer;\r\n                        this.insert(buyer, data, this.buyerMap);\r\n                        const seller = data.seller;\r\n                        this.insert(seller, data, this.sellerMap);\r\n                        const guild = data.guild;\r\n                        this.insert(guild, data, this.guildMap);\r\n\r\n                        const date = data.timestamp.split(' ')[0];\r\n                        if (!this.dateMap[date]) {\r\n                            this.dates.push(date);\r\n                        }\r\n                        this.insert(date, data, this.dateMap);\r\n                    },\r\n                    complete: () => {\r\n                        console.log('Done!');\r\n                        console.log(this.global[0]);\r\n                        console.log(this.global.length);\r\n                        console.log(this.dateMap);\r\n                        this.items = Object.keys(this.itemMap);\r\n                        this.buyers = Object.keys(this.buyerMap);\r\n                        this.sellers = Object.keys(this.sellerMap);\r\n                        this.guilds = Object.keys(this.guildMap);\r\n                        redirect();\r\n                    },\r\n                    delimiter: '#',\r\n                });\r\n            });\r\n    }\r\n\r\n    getDataTable(): DataTable {\r\n        return {\r\n            global: this.global,\r\n            sellerMap: this.sellerMap,\r\n            sellers: this.sellers,\r\n            buyerMap: this.buyerMap,\r\n            buyers: this.buyers,\r\n            itemMap: this.itemMap,\r\n            items: this.items,\r\n            guildMap: this.guildMap,\r\n            guilds: this.guilds,\r\n            dateMap: this.dateMap,\r\n            dates: this.dates,\r\n        };\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Home extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Overview</h1>\r\n                <p>\r\n                    In the Elder Scrolls Online (ESO), trading is done through\r\n                    traders owned by guilds. Each week guilds can bid on a\r\n                    trader and the guild with the highest bid gets to use that\r\n                    trader for the week. Traders are located in every major\r\n                    town, and since some are more populated then others, the\r\n                    average bid on a trader varies grately by location.\r\n                    <br />\r\n                    <br />\r\n                    Any player can go to these traders and use their gold to\r\n                    purchase items they desire, but only members of the guild\r\n                    can sell items through that trader. When a player purchases\r\n                    an item, a majority of the gold goes to the seller, but a\r\n                    small portion is taken as tax for the guild.\r\n                </p>\r\n                <h1>Analysis</h1>\r\n                <p>\r\n                    The goal of my analysis is to determine if ESO follows an\r\n                    economic model of perfect competition. For those unfimilar\r\n                    with economics, a market that is perfectly competitive has\r\n                    the following characteristics:\r\n                </p>\r\n                <ol>\r\n                    <li>Competition is at its greatest possible level</li>\r\n                    <li>\r\n                        There is perfect knowledge, with no time lags in the\r\n                        flow of information\r\n                    </li>\r\n                    <li>\r\n                        There are no barries to entry into or exit out of the\r\n                        market\r\n                    </li>\r\n                    <li>\r\n                        No single seller can influence the market price or\r\n                        conditions\r\n                    </li>\r\n                </ol>\r\n                <h1>Data</h1>\r\n                <p>\r\n                    In ESO, guild trader data is only visible to members within\r\n                    that guild, and only the past 10 days of sales are kept. A\r\n                    player by the name of Sharlikran created a program called{' '}\r\n                    <a href=\"https://www.esoui.com/downloads/info2753-MasterMerchant3.0.html\">\r\n                        Master Merchant\r\n                    </a>{' '}\r\n                    to analyze and collect this data. Unfortunetly, this means\r\n                    the data set used is limited to traders I have access too.\r\n                    <br />\r\n                    <br />\r\n                    Overall, data was recorded for{' '}\r\n                    {this.props.data.guilds.length} guilds, with{' '}\r\n                    {this.props.data.global.length} transactions being recorded\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n    exclude?: string[];\r\n}\r\n\r\nexport default class TransactionHistory extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        day: string;\r\n        value: number;\r\n        guilds: { name: string; value: number }[];\r\n    }[] = [];\r\n    min: Date = new Date('2100-1-1');\r\n    max: Date = new Date('1990-1-1');\r\n    avg: number[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        console.log(props);\r\n        // key is each date in the list\r\n        props.data.dates.forEach((key) => {\r\n            const guilds: { [key: string]: number } = {};\r\n\r\n            // compute the number of sales per guild for a particular date\r\n            props.data.dateMap[key].forEach((record) => {\r\n                guilds[record.guild] !== undefined\r\n                    ? guilds[record.guild]++\r\n                    : (guilds[record.guild] = 1);\r\n            });\r\n\r\n            // create an extra data field containing each guild and their computed number of sales\r\n            const guildArr: { name: string; value: number }[] = [];\r\n            Object.keys(guilds).forEach((guild) => {\r\n                if (!props.exclude?.includes(guild)) {\r\n                    guildArr.push({ name: guild, value: guilds[guild] });\r\n                }\r\n            });\r\n\r\n            // subtract the excluded guilds from the total value\r\n            let value = props.data.dateMap[key].length;\r\n            props.exclude?.forEach((guild) => {\r\n                console.log(guild);\r\n                console.log(guilds[guild]);\r\n                console.log(value);\r\n                value = value - (guilds[guild] ? guilds[guild] : 0);\r\n                console.log(value);\r\n            });\r\n\r\n            this.data.push({\r\n                day: key,\r\n                value,\r\n                guilds: guildArr,\r\n            });\r\n            this.avg.push(props.data.dateMap[key].length);\r\n            const date = new Date(key);\r\n            if (date < this.min) {\r\n                this.min = date;\r\n            }\r\n            if (date > this.max) {\r\n                this.max = date;\r\n            }\r\n        });\r\n        // for (let key in props.data.dates) {\r\n        //     if (!props.data.dateMap[key]) {\r\n        //         console.log(key);\r\n        //         continue;\r\n        //     }\r\n        //     this.data.push({\r\n        //         day: key,\r\n        //         value: props.data.dateMap[key].length,\r\n        //     });\r\n        //     const date = new Date(key);\r\n        //     if (date < this.min) {\r\n        //         this.min = date;\r\n        //     }\r\n        //     if (date > this.max) {\r\n        //         this.max = date;\r\n        //     }\r\n        // }\r\n        console.log(this.data);\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n    }\r\n\r\n    dateToString(date: Date) {\r\n        return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n    }\r\n\r\n    dateToDayOfWeek(date: string): string {\r\n        const d = new Date(date);\r\n        const day = d.getDay();\r\n        switch (day) {\r\n            case 0:\r\n                return 'Sunday';\r\n            case 1:\r\n                return 'Monday';\r\n            case 2:\r\n                return 'Tuesday';\r\n            case 3:\r\n                return 'Wednesday';\r\n            case 4:\r\n                return 'Thursday';\r\n            case 5:\r\n                return 'Friday';\r\n            case 6:\r\n                return 'Saturday';\r\n            default:\r\n                return 'Unknown';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n        return (\r\n            <div>\r\n                {this.props.exclude ? (\r\n                    <span />\r\n                ) : (\r\n                    <div>\r\n                        <p>\r\n                            Transactions were recorded between{' '}\r\n                            {this.dateToString(this.min)} and{' '}\r\n                            {this.dateToString(this.max)}\r\n                        </p>\r\n                        <p>\r\n                            The average amount of transactions per day was{' '}\r\n                            {Math.floor(\r\n                                this.avg.reduce((prev, curr) => prev + curr) /\r\n                                    this.avg.length\r\n                            )}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n                <div style={{ width: '100%', height: '225px' }}>\r\n                    <ResponsiveCalendar\r\n                        data={this.data}\r\n                        to={this.max}\r\n                        from={this.min}\r\n                        tooltip={(...args) => {\r\n                            const data = (args[0] as any).data;\r\n                            console.log(data);\r\n                            return (\r\n                                <div\r\n                                    style={{\r\n                                        padding: '0.25rem',\r\n                                        backgroundColor: '#999',\r\n                                    }}\r\n                                >\r\n                                    <div>\r\n                                        <strong>\r\n                                            {this.dateToDayOfWeek(data.day)}\r\n                                        </strong>\r\n                                    </div>\r\n                                    {data.guilds ? (\r\n                                        data.guilds.map((guild: any) => (\r\n                                            <div\r\n                                                style={{\r\n                                                    padding: '0.1rem 0.5rem',\r\n                                                }}\r\n                                            >\r\n                                                {guild.name}: {guild.value}\r\n                                            </div>\r\n                                        ))\r\n                                    ) : (\r\n                                        <span />\r\n                                    )}\r\n                                    <div\r\n                                        style={{\r\n                                            color: 'red',\r\n                                            padding: '0.1rem 0.5rem',\r\n                                        }}\r\n                                    >\r\n                                        Total: {data.value ? data.value : 0}\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        // from=\"2020-01-01\"\r\n                        // to=\"2021-05-01\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\nimport { ResponsiveBar } from '@nivo/bar';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\nexport default class SellerBars extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        player: string;\r\n        saleCount: number;\r\n        saleValue: number;\r\n        nil: number;\r\n    }[] = [];\r\n    totalSaleCount: number = 0;\r\n    totalSaleValue: number = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tempRecords: {\r\n            player: string;\r\n            saleCount: number;\r\n            saleValue: number;\r\n            nil: number;\r\n        }[] = [];\r\n        Object.keys(props.data).forEach((player) => {\r\n            const origRecords = props.data[player];\r\n            // const saleValue = parseInt(\r\n            //     origRecords.reduce((prev, curr) => {\r\n            //         return ({\r\n            //             price: parseInt(prev.price) + parseInt(curr.price),\r\n            //         } as unknown) as Record;\r\n            //     }).price\r\n            // );\r\n            let saleValue = 0;\r\n            origRecords.forEach((rec) => {\r\n                saleValue += parseInt(rec.price);\r\n            });\r\n            const saleCount = origRecords.length;\r\n            tempRecords.push({\r\n                player,\r\n                saleCount,\r\n                saleValue,\r\n                nil: 0,\r\n            });\r\n\r\n            this.totalSaleCount += saleCount;\r\n            this.totalSaleValue += saleValue;\r\n        });\r\n\r\n        tempRecords.sort((a, b) => {\r\n            return b.saleValue - a.saleValue;\r\n        });\r\n\r\n        for (let i = 0; i < props.count; i++) {\r\n            this.data.push(tempRecords[i]);\r\n        }\r\n        // key is each date in the list\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <p>\r\n                        There was {Object.keys(this.props.data).length} unique\r\n                        sellers, who sold {this.totalSaleCount.toLocaleString()}{' '}\r\n                        items, valued at {this.totalSaleValue.toLocaleString()}{' '}\r\n                        gold\r\n                    </p>\r\n                </div>\r\n                <div style={{ position: 'relative', height: '300px' }}>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '300px',\r\n                            position: 'absolute',\r\n                        }}\r\n                    >\r\n                        <ResponsiveBar\r\n                            data={this.data}\r\n                            keys={['saleCount', 'nil']}\r\n                            indexBy=\"player\"\r\n                            groupMode=\"grouped\"\r\n                            margin={{\r\n                                top: 50,\r\n                                right: 130,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            colors={'#0f0'}\r\n                            theme={{ textColor: '#fff' }}\r\n                            axisLeft={null}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'top-right',\r\n                                    itemWidth: -10,\r\n                                    itemHeight: 20,\r\n                                    dataFrom: 'keys',\r\n                                    direction: 'column',\r\n                                },\r\n                            ]}\r\n                            labelTextColor={'#fff'}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '300px',\r\n                            position: 'absolute',\r\n                            opacity: '0.5',\r\n                        }}\r\n                    >\r\n                        <ResponsiveBar\r\n                            data={this.data}\r\n                            keys={['nil', 'saleValue']}\r\n                            indexBy=\"player\"\r\n                            groupMode=\"grouped\"\r\n                            margin={{\r\n                                top: 50,\r\n                                right: 130,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            colors={'#f00'}\r\n                            theme={{ textColor: '#fff' }}\r\n                            enableGridY={false}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'bottom-right',\r\n                                    itemWidth: -10,\r\n                                    itemHeight: 20,\r\n                                    dataFrom: 'keys',\r\n                                    direction: 'column',\r\n                                },\r\n                            ]}\r\n                            labelTextColor={'#fff'}\r\n                            labelFormat={'.3~s'}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveTreeMap } from '@nivo/treemap';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\nexport default class ItemTreemap extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        name: 'Items';\r\n        children: {\r\n            name: string;\r\n            value: number;\r\n            avg: number;\r\n            count: number;\r\n        }[];\r\n    } = { name: 'Items', children: [] };\r\n    totalSaleCount: number = 0;\r\n    totalSaleValue: number = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tempRecords: {\r\n            name: string;\r\n            value: number;\r\n            avg: number;\r\n            count: number;\r\n        }[] = [];\r\n        Object.keys(props.data).forEach((item) => {\r\n            const origRecords = props.data[item];\r\n            // const saleValue = parseInt(\r\n            //     origRecords.reduce((prev, curr) => {\r\n            //         return ({\r\n            //             price: parseInt(prev.price) + parseInt(curr.price),\r\n            //         } as unknown) as Record;\r\n            //     }).price\r\n            // );\r\n            let saleValue = 0;\r\n            let perItemSaleValue = 0;\r\n            origRecords.forEach((rec) => {\r\n                saleValue += parseInt(rec.price);\r\n                perItemSaleValue += parseInt(rec.price) / parseInt(rec.quant);\r\n            });\r\n            tempRecords.push({\r\n                name: item,\r\n                value: saleValue,\r\n                count: origRecords.length,\r\n                avg: Math.round(perItemSaleValue / origRecords.length),\r\n            });\r\n        });\r\n\r\n        tempRecords.sort((a, b) => {\r\n            return b.value - a.value;\r\n        });\r\n\r\n        for (let i = 0; i < props.count; i++) {\r\n            this.data.children.push(tempRecords[i]);\r\n        }\r\n        // key is each date in the list\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{ width: '100%', height: '500px' }}>\r\n                    <ResponsiveTreeMap\r\n                        data={this.data}\r\n                        identity=\"name\"\r\n                        value=\"value\"\r\n                        valueFormat=\".03~s\"\r\n                        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\r\n                        labelSkipSize={12}\r\n                        labelTextColor={'#fff'}\r\n                        parentLabelTextColor={{\r\n                            from: 'color',\r\n                            modifiers: [['darker', 2]],\r\n                        }}\r\n                        borderColor={{\r\n                            from: 'color',\r\n                            modifiers: [['darker', 0.1]],\r\n                        }}\r\n                        leavesOnly\r\n                        // @ts-ignore\r\n                        tooltip={(node: any) => {\r\n                            console.log(node);\r\n                            const data = node.node.data;\r\n                            return (\r\n                                <div\r\n                                    style={{\r\n                                        padding: ' 0.25rem 1rem',\r\n                                    }}\r\n                                >\r\n                                    <div>\r\n                                        <strong>{data.name}</strong>\r\n                                        <div>Sold: {data.count}</div>\r\n                                        <div>\r\n                                            Total value:{' '}\r\n                                            {data.value.toLocaleString()}\r\n                                        </div>\r\n                                        <div>\r\n                                            Avg price per unit:{' '}\r\n                                            {data.avg.toLocaleString()}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                            // return (\r\n                            //     <div\r\n                            //         style={{\r\n                            //             padding: '0.25rem',\r\n                            //             backgroundColor: '#999',\r\n                            //         }}\r\n                            //     >\r\n                            //         <div>\r\n                            //             <strong>\r\n                            //                 {this.dateToDayOfWeek(data.day)}\r\n                            //             </strong>\r\n                            //         </div>\r\n                            //         {data.guilds ? (\r\n                            //             data.guilds.map((guild: any) => (\r\n                            //                 <div\r\n                            //                     style={{\r\n                            //                         padding: '0.1rem 0.5rem',\r\n                            //                     }}\r\n                            //                 >\r\n                            //                     {guild.name}: {guild.value}\r\n                            //                 </div>\r\n                            //             ))\r\n                            //         ) : (\r\n                            //             <span />\r\n                            //         )}\r\n                            //         <div\r\n                            //             style={{\r\n                            //                 color: 'red',\r\n                            //                 padding: '0.1rem 0.5rem',\r\n                            //             }}\r\n                            //         >\r\n                            //             Total: {data.value ? data.value : 0}\r\n                            //         </div>\r\n                            //     </div>\r\n                            // );\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: 'grid',\r\n                        gridTemplate: '1fr 1fr 1fr 1fr 1fr / 1fr 1fr 1fr',\r\n                    }}\r\n                >\r\n                    {this.data.children.map((child, i) =>\r\n                        i < 15 ? (\r\n                            <div style={{ marginTop: '0.5rem' }}>\r\n                                <div>\r\n                                    {i + 1}) {child.name}\r\n                                </div>\r\n                                <div>{child.value.toLocaleString()}</div>\r\n                            </div>\r\n                        ) : (\r\n                            <span />\r\n                        )\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport TransactionHistory from './Charts/TransactionHistory';\r\nimport SellerBars from './Charts/SellerBars';\r\nimport ItemTreemap from './Charts/ItemTreemap';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Story extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Transaction History</h1>\r\n                <TransactionHistory data={this.props.data} />\r\n                <h1>Top Sellers</h1>\r\n                <SellerBars data={this.props.data.sellerMap} count={10} />\r\n                <h1>Item Marketshare</h1>\r\n                <ItemTreemap data={this.props.data.itemMap} count={75} />\r\n                <div style={{ paddingBottom: '2rem' }}> </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n} from 'react-router-dom';\r\n\r\nimport Home from './components/Home';\r\nimport Story from './components/Story';\r\nimport { DataTable } from './classes/DataParser';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class App extends React.PureComponent<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>The Economy of ESO</h1>\r\n                <nav className=\"nav\">\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/home\"\r\n                            >\r\n                                Home\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/story\"\r\n                            >\r\n                                Story\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <Switch>\r\n                    <Route path=\"/app/story\">\r\n                        <Story data={this.props.data} />\r\n                    </Route>\r\n                    <Route path=\"/app/home\">\r\n                        <Home data={this.props.data} />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/spinner.3fd780cb.png\";","import * as React from 'react';\r\nimport {\r\n    Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n    useHistory,\r\n    Redirect,\r\n    RouteComponentProps,\r\n    withRouter,\r\n} from 'react-router-dom';\r\nimport App from '../App';\r\nimport DataParser from '../classes/DataParser';\r\nimport spinner from '../spinner.png';\r\n\r\ninterface IProps extends RouteComponentProps<any> {}\r\n\r\nclass Root extends React.Component<IProps> {\r\n    props!: IProps;\r\n    parser: DataParser;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.parser = new DataParser(this.redirect);\r\n        console.log(props);\r\n    }\r\n\r\n    redirect = () => {\r\n        console.log('here');\r\n        this.props.history.push('/app/home');\r\n        console.log(this.props.history);\r\n    };\r\n\r\n    render() {\r\n        console.log(this.parser.getDataTable());\r\n        console.log(this.props.history);\r\n        if (\r\n            this.parser.getDataTable().global.length === 0 &&\r\n            this.props.history.location.pathname !== '/loading'\r\n        ) {\r\n            this.props.history.push('/loading');\r\n        }\r\n        return (\r\n            <Switch>\r\n                <Route\r\n                    path=\"/app\"\r\n                    component={() => {\r\n                        return <App data={this.parser.getDataTable()} />;\r\n                    }}\r\n                />\r\n                <Route path=\"/loading\">\r\n                    <div style={{ textAlign: 'center', marginTop: '10vh' }}>\r\n                        <h2>Please wait while the app processes the data</h2>\r\n                        <img\r\n                            src={spinner}\r\n                            style={{\r\n                                width: '20%',\r\n                                marginTop: '2rem',\r\n                                animationName: 'spinner',\r\n                                animationDuration: '4s',\r\n                                animationIterationCount: 'infinite',\r\n                            }}\r\n                            alt=\"Spinner\"\r\n                        />\r\n                    </div>\r\n                </Route>\r\n                {/* <Redirect from=\"/\" to=\"/loading\" /> */}\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Root);\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Router } from 'react-router-dom';\r\nimport Root from './components/Root';\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory();\r\n// const parser = new DataParser();\r\n\r\nReactDOM.render(\r\n    <Router history={history}>\r\n        <Root />\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}