{"version":3,"sources":["classes/DataParser.ts","reportWebVitals.ts","components/Home.tsx","components/Charts/TransactionHistory.tsx","components/Charts/SellerBars.tsx","components/Charts/ItemTreemap.tsx","components/Story.tsx","components/Charts/MotifTracker.tsx","perfect_comp.png","components/Analysis/PlayerBarChart.tsx","components/Analysis/PlayerScatterPlot.tsx","components/Analysis.tsx","App.tsx","spinner.png","components/Root.tsx","index.tsx"],"names":["DataParser","redirect","updateStage","global","buyerMap","buyers","sellerMap","sellers","itemMap","items","guildMap","guilds","dateMap","dates","i","len","isNode","process","versions","node","fetch","then","res","text","parse","worker","header","step","row","data","push","undefined","timestamp","name","item","insert","buyer","seller","guild","date","split","complete","console","log","length","Object","keys","delimiter","key","record","map","Math","ceil","this","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Home","props","href","Component","TransactionHistory","min","Date","max","avg","forEach","guildArr","exclude","includes","value","day","getMonth","getDate","getFullYear","getDay","dateToString","floor","reduce","prev","curr","style","width","height","to","from","tooltip","padding","backgroundColor","dateToDayOfWeek","color","SellerBars","totalSaleCount","totalSaleValue","tempRecords","player","origRecords","saleValue","rec","parseInt","price","saleCount","nil","sort","a","b","count","toLocaleString","position","indexBy","groupMode","margin","top","right","bottom","left","colors","theme","textColor","axisLeft","legends","anchor","itemWidth","itemHeight","dataFrom","direction","labelTextColor","opacity","enableGridY","labelFormat","ItemTreemap","children","perItemSaleValue","quant","round","identity","valueFormat","labelSkipSize","parentLabelTextColor","modifiers","borderColor","leavesOnly","display","gridTemplate","child","marginTop","Story","paddingBottom","motifs","filter","test","motif","tempRecord","id","records","earliestDate","x","formatDate","y","temp","point","values","d","xScale","type","format","useUTC","precision","xFormat","yScale","stacked","legend","legendOffset","axisBottom","tickValues","useMesh","curve","scheme","translateX","enableSlices","PlayerBarChart","Title","obj","textAnchor","fill","fontWeight","title","recordsPerPlayer","recordsForItem","portfolio","computeStat","slice","show","layers","PlayerScatterPlot","yMax","Number","MIN_VALUE","innerWidth","players","playerRecords","e","yFormat","justify","translateY","itemsSpacing","itemDirection","symbolSize","symbolShape","effects","on","itemOpacity","join","Analysis","content","src","ImgPerfectCompetition","alt","trigger","QuestionCircleOutlined","arr","Set","App","className","exact","activeClassName","path","React","PureComponent","Root","parser","setStageText","state","setState","stageText","history","getDataTable","location","pathname","component","textAlign","spinner","animationName","animationDuration","animationIterationCount","background","withRouter","createBrowserHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.bdd36c5d.chunk.js","sourcesContent":["// import { Record } from '../data_dump';\r\nimport { parse, ParseResult } from 'papaparse';\r\n\r\nexport interface DataTable {\r\n    global: Record[];\r\n    buyerMap: { [name: string]: Record[] };\r\n    buyers: string[];\r\n    sellerMap: { [name: string]: Record[] };\r\n    sellers: string[];\r\n    itemMap: { [item: string]: Record[] };\r\n    items: string[];\r\n    guildMap: { [guild: string]: Record[] };\r\n    guilds: string[];\r\n    dateMap: { [date: string]: Record[] };\r\n    dates: string[];\r\n}\r\n\r\nexport interface Record {\r\n    buyer: string;\r\n    guild: string;\r\n    item: string;\r\n    price: string;\r\n    quant: string;\r\n    seller: string;\r\n    timestamp: string;\r\n}\r\n\r\nexport default class DataParser {\r\n    global: Record[] = [];\r\n    buyerMap: { [name: string]: Record[] } = {};\r\n    buyers: string[] = [];\r\n    sellerMap: { [name: string]: Record[] } = {};\r\n    sellers: string[] = [];\r\n    itemMap: { [item: string]: Record[] } = {};\r\n    items: string[] = [];\r\n    guildMap: { [guild: string]: Record[] } = {};\r\n    guilds: string[] = [];\r\n    dateMap: { [date: string]: Record[] } = {};\r\n    dates: string[] = [];\r\n\r\n    i: number = 0;\r\n    len: number = 1;\r\n\r\n    private insert(\r\n        key: string,\r\n        record: Record,\r\n        map: { [key: string]: Record[] }\r\n    ) {\r\n        if (map[key] === undefined) {\r\n            map[key] = [];\r\n        }\r\n        map[key].push(record);\r\n    }\r\n\r\n    getProgress() {\r\n        return Math.ceil((this.i / this.len) * 100);\r\n    }\r\n\r\n    constructor(redirect: () => void, updateStage: (text: string) => void) {\r\n        updateStage('Fetching data...');\r\n        const isNode =\r\n            typeof process !== 'undefined' &&\r\n            process.versions != null &&\r\n            process.versions.node != null;\r\n        const url = isNode\r\n            ? 'NicolasNewman/CGT290-Final/master/data/data.csv'\r\n            : 'https://raw.githubusercontent.com/NicolasNewman/CGT290-Final/master/data/data.csv';\r\n\r\n        fetch(url)\r\n            .then((res) => res.text())\r\n            .then((text) => {\r\n                updateStage('Loading csv...');\r\n                // const prog = setInterval(() => {\r\n                //     console.log(this.i);\r\n                //     console.log(this.len);\r\n                //     updateStage(`Loading csv [${this.getProgress()}%]...`);\r\n                // }, 100);\r\n                // this.len = (text.match(/\\n/g) || []).length;\r\n                parse<Record>(text, {\r\n                    worker: true,\r\n                    header: true,\r\n\r\n                    step: (row) => {\r\n                        this.i = this.i + 1;\r\n                        const data = (row.data as unknown) as Record;\r\n                        // if (this.i % 50000 === 0) {\r\n                        //     console.log(this.i);\r\n                        //     updateStage(\r\n                        //         `Loading csv [${this.getProgress()}%]...`\r\n                        //     );\r\n                        // }\r\n                        this.global.push(data);\r\n                        if (data.timestamp === undefined) {\r\n                            return;\r\n                        }\r\n\r\n                        const name = data.item;\r\n                        this.insert(name, data, this.itemMap);\r\n                        const buyer = data.buyer;\r\n                        this.insert(buyer, data, this.buyerMap);\r\n                        const seller = data.seller;\r\n                        this.insert(seller, data, this.sellerMap);\r\n                        const guild = data.guild;\r\n                        this.insert(guild, data, this.guildMap);\r\n\r\n                        const date = data.timestamp.split(' ')[0];\r\n                        if (!this.dateMap[date]) {\r\n                            this.dates.push(date);\r\n                        }\r\n                        this.insert(date, data, this.dateMap);\r\n                    },\r\n                    complete: () => {\r\n                        console.log('Done!');\r\n                        console.log(this.i);\r\n                        console.log(this.len);\r\n                        updateStage('Done!');\r\n                        console.log(this.global[0]);\r\n                        console.log(this.global.length);\r\n                        console.log(this.dateMap);\r\n                        this.items = Object.keys(this.itemMap);\r\n                        this.buyers = Object.keys(this.buyerMap);\r\n                        this.sellers = Object.keys(this.sellerMap);\r\n                        this.guilds = Object.keys(this.guildMap);\r\n                        // clearTimeout(prog);\r\n                        redirect();\r\n                    },\r\n                    delimiter: '#',\r\n                });\r\n            });\r\n    }\r\n\r\n    getDataTable(): DataTable {\r\n        return {\r\n            global: this.global,\r\n            sellerMap: this.sellerMap,\r\n            sellers: this.sellers,\r\n            buyerMap: this.buyerMap,\r\n            buyers: this.buyers,\r\n            itemMap: this.itemMap,\r\n            items: this.items,\r\n            guildMap: this.guildMap,\r\n            guilds: this.guilds,\r\n            dateMap: this.dateMap,\r\n            dates: this.dates,\r\n        };\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Home extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Overview</h1>\r\n                <p>\r\n                    In the Elder Scrolls Online (ESO), trading is done through\r\n                    traders owned by guilds. Each week guilds can bid on a\r\n                    trader and the guild with the highest bid gets to use that\r\n                    trader for the week. Traders are located in every major\r\n                    town, and since some are more populated then others, the\r\n                    average bid on a trader varies grately by location.\r\n                    <br />\r\n                    <br />\r\n                    Any player can go to these traders and use their gold to\r\n                    purchase items they desire, but only members of the guild\r\n                    can sell items through that trader. When a player purchases\r\n                    an item, a majority of the gold goes to the seller, but a\r\n                    small portion is taken as tax for the guild.\r\n                </p>\r\n                <h1>Analysis</h1>\r\n                <p>\r\n                    The goal of my analysis is to determine if ESO follows an\r\n                    economic model of perfect competition. For those unfimilar\r\n                    with economics, a market that is perfectly competitive has\r\n                    the following characteristics:\r\n                </p>\r\n                <ol>\r\n                    <li>Competition is at its greatest possible level</li>\r\n                    <li>\r\n                        There is perfect knowledge, with no time lags in the\r\n                        flow of information\r\n                    </li>\r\n                    <li>\r\n                        There are no barries to entry into or exit out of the\r\n                        market\r\n                    </li>\r\n                    <li>\r\n                        No single seller can influence the market price or\r\n                        conditions\r\n                    </li>\r\n                </ol>\r\n                <h1>Data</h1>\r\n                <p>\r\n                    In ESO, guild trader data is only visible to members within\r\n                    that guild, and only the past 10 days of sales are kept. A\r\n                    player by the name of Sharlikran created a program called{' '}\r\n                    <a href=\"https://www.esoui.com/downloads/info2753-MasterMerchant3.0.html\">\r\n                        Master Merchant\r\n                    </a>{' '}\r\n                    to analyze and collect this data. Unfortunetly, this means\r\n                    the data set used is limited to traders I have access too.\r\n                    <br />\r\n                    <br />\r\n                    Overall, data was recorded for{' '}\r\n                    {this.props.data.guilds.length} guilds, with{' '}\r\n                    {this.props.data.global.length} transactions being recorded\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n    exclude?: string[];\r\n}\r\n\r\nexport default class TransactionHistory extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        day: string;\r\n        value: number;\r\n        guilds: { name: string; value: number }[];\r\n    }[] = [];\r\n    min: Date = new Date('2100-1-1');\r\n    max: Date = new Date('1990-1-1');\r\n    avg: number[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        console.log(props);\r\n        // key is each date in the list\r\n        props.data.dates.forEach((key) => {\r\n            const guilds: { [key: string]: number } = {};\r\n\r\n            // compute the number of sales per guild for a particular date\r\n            props.data.dateMap[key].forEach((record) => {\r\n                guilds[record.guild] !== undefined\r\n                    ? guilds[record.guild]++\r\n                    : (guilds[record.guild] = 1);\r\n            });\r\n\r\n            // create an extra data field containing each guild and their computed number of sales\r\n            const guildArr: { name: string; value: number }[] = [];\r\n            Object.keys(guilds).forEach((guild) => {\r\n                if (!props.exclude?.includes(guild)) {\r\n                    guildArr.push({ name: guild, value: guilds[guild] });\r\n                }\r\n            });\r\n\r\n            // subtract the excluded guilds from the total value\r\n            let value = props.data.dateMap[key].length;\r\n            props.exclude?.forEach((guild) => {\r\n                console.log(guild);\r\n                console.log(guilds[guild]);\r\n                console.log(value);\r\n                value = value - (guilds[guild] ? guilds[guild] : 0);\r\n                console.log(value);\r\n            });\r\n\r\n            this.data.push({\r\n                day: key,\r\n                value,\r\n                guilds: guildArr,\r\n            });\r\n            this.avg.push(props.data.dateMap[key].length);\r\n            const date = new Date(key);\r\n            if (date < this.min) {\r\n                this.min = date;\r\n            }\r\n            if (date > this.max) {\r\n                this.max = date;\r\n            }\r\n        });\r\n        // for (let key in props.data.dates) {\r\n        //     if (!props.data.dateMap[key]) {\r\n        //         console.log(key);\r\n        //         continue;\r\n        //     }\r\n        //     this.data.push({\r\n        //         day: key,\r\n        //         value: props.data.dateMap[key].length,\r\n        //     });\r\n        //     const date = new Date(key);\r\n        //     if (date < this.min) {\r\n        //         this.min = date;\r\n        //     }\r\n        //     if (date > this.max) {\r\n        //         this.max = date;\r\n        //     }\r\n        // }\r\n        console.log(this.data);\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n    }\r\n\r\n    dateToString(date: Date) {\r\n        return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n    }\r\n\r\n    dateToDayOfWeek(date: string): string {\r\n        const d = new Date(date);\r\n        const day = d.getDay();\r\n        switch (day) {\r\n            case 0:\r\n                return 'Sunday';\r\n            case 1:\r\n                return 'Monday';\r\n            case 2:\r\n                return 'Tuesday';\r\n            case 3:\r\n                return 'Wednesday';\r\n            case 4:\r\n                return 'Thursday';\r\n            case 5:\r\n                return 'Friday';\r\n            case 6:\r\n                return 'Saturday';\r\n            default:\r\n                return 'Unknown';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n        return (\r\n            <div>\r\n                {this.props.exclude ? (\r\n                    <span />\r\n                ) : (\r\n                    <div>\r\n                        <p>\r\n                            Transactions were recorded between{' '}\r\n                            {this.dateToString(this.min)} and{' '}\r\n                            {this.dateToString(this.max)}\r\n                        </p>\r\n                        <p>\r\n                            The average amount of transactions per day was{' '}\r\n                            {Math.floor(\r\n                                this.avg.reduce((prev, curr) => prev + curr) /\r\n                                    this.avg.length\r\n                            )}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n                <div style={{ width: '100%', height: '225px' }}>\r\n                    <ResponsiveCalendar\r\n                        data={this.data}\r\n                        to={this.max}\r\n                        from={this.min}\r\n                        tooltip={(...args) => {\r\n                            const data = (args[0] as any).data;\r\n                            console.log(data);\r\n                            return (\r\n                                <div\r\n                                    style={{\r\n                                        padding: '0.25rem',\r\n                                        backgroundColor: '#999',\r\n                                    }}\r\n                                >\r\n                                    <div>\r\n                                        <strong>\r\n                                            {this.dateToDayOfWeek(data.day)}\r\n                                        </strong>\r\n                                    </div>\r\n                                    {data.guilds ? (\r\n                                        data.guilds.map((guild: any) => (\r\n                                            <div\r\n                                                style={{\r\n                                                    padding: '0.1rem 0.5rem',\r\n                                                }}\r\n                                            >\r\n                                                {guild.name}: {guild.value}\r\n                                            </div>\r\n                                        ))\r\n                                    ) : (\r\n                                        <span />\r\n                                    )}\r\n                                    <div\r\n                                        style={{\r\n                                            color: 'red',\r\n                                            padding: '0.1rem 0.5rem',\r\n                                        }}\r\n                                    >\r\n                                        Total: {data.value ? data.value : 0}\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        // from=\"2020-01-01\"\r\n                        // to=\"2021-05-01\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\nimport { ResponsiveBar } from '@nivo/bar';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\nexport default class SellerBars extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        player: string;\r\n        saleCount: number;\r\n        saleValue: number;\r\n        nil: number;\r\n    }[] = [];\r\n    totalSaleCount: number = 0;\r\n    totalSaleValue: number = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tempRecords: {\r\n            player: string;\r\n            saleCount: number;\r\n            saleValue: number;\r\n            nil: number;\r\n        }[] = [];\r\n        Object.keys(props.data).forEach((player) => {\r\n            const origRecords = props.data[player];\r\n            // const saleValue = parseInt(\r\n            //     origRecords.reduce((prev, curr) => {\r\n            //         return ({\r\n            //             price: parseInt(prev.price) + parseInt(curr.price),\r\n            //         } as unknown) as Record;\r\n            //     }).price\r\n            // );\r\n            let saleValue = 0;\r\n            origRecords.forEach((rec) => {\r\n                saleValue += parseInt(rec.price);\r\n            });\r\n            const saleCount = origRecords.length;\r\n            tempRecords.push({\r\n                player,\r\n                saleCount,\r\n                saleValue,\r\n                nil: 0,\r\n            });\r\n\r\n            this.totalSaleCount += saleCount;\r\n            this.totalSaleValue += saleValue;\r\n        });\r\n\r\n        tempRecords.sort((a, b) => {\r\n            return b.saleValue - a.saleValue;\r\n        });\r\n\r\n        for (let i = 0; i < props.count; i++) {\r\n            this.data.push(tempRecords[i]);\r\n        }\r\n        // key is each date in the list\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <p>\r\n                        There was {Object.keys(this.props.data).length} unique\r\n                        sellers, who sold {this.totalSaleCount.toLocaleString()}{' '}\r\n                        items, valued at {this.totalSaleValue.toLocaleString()}{' '}\r\n                        gold\r\n                    </p>\r\n                </div>\r\n                <div style={{ position: 'relative', height: '300px' }}>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '300px',\r\n                            position: 'absolute',\r\n                        }}\r\n                    >\r\n                        <ResponsiveBar\r\n                            data={this.data}\r\n                            keys={['saleCount', 'nil']}\r\n                            indexBy=\"player\"\r\n                            groupMode=\"grouped\"\r\n                            margin={{\r\n                                top: 50,\r\n                                right: 130,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            colors={'#0f0'}\r\n                            theme={{ textColor: '#fff' }}\r\n                            axisLeft={null}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'top-right',\r\n                                    itemWidth: -10,\r\n                                    itemHeight: 20,\r\n                                    dataFrom: 'keys',\r\n                                    direction: 'column',\r\n                                },\r\n                            ]}\r\n                            labelTextColor={'#fff'}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '300px',\r\n                            position: 'absolute',\r\n                            opacity: '0.5',\r\n                        }}\r\n                    >\r\n                        <ResponsiveBar\r\n                            data={this.data}\r\n                            keys={['nil', 'saleValue']}\r\n                            indexBy=\"player\"\r\n                            groupMode=\"grouped\"\r\n                            margin={{\r\n                                top: 50,\r\n                                right: 130,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            colors={'#f00'}\r\n                            theme={{ textColor: '#fff' }}\r\n                            enableGridY={false}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'bottom-right',\r\n                                    itemWidth: -10,\r\n                                    itemHeight: 20,\r\n                                    dataFrom: 'keys',\r\n                                    direction: 'column',\r\n                                },\r\n                            ]}\r\n                            labelTextColor={'#fff'}\r\n                            labelFormat={'.3~s'}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveTreeMap } from '@nivo/treemap';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\nexport default class ItemTreemap extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        name: 'Items';\r\n        children: {\r\n            name: string;\r\n            value: number;\r\n            avg: number;\r\n            count: number;\r\n        }[];\r\n    } = { name: 'Items', children: [] };\r\n    totalSaleCount: number = 0;\r\n    totalSaleValue: number = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tempRecords: {\r\n            name: string;\r\n            value: number;\r\n            avg: number;\r\n            count: number;\r\n        }[] = [];\r\n        Object.keys(props.data).forEach((item) => {\r\n            const origRecords = props.data[item];\r\n            // const saleValue = parseInt(\r\n            //     origRecords.reduce((prev, curr) => {\r\n            //         return ({\r\n            //             price: parseInt(prev.price) + parseInt(curr.price),\r\n            //         } as unknown) as Record;\r\n            //     }).price\r\n            // );\r\n            let saleValue = 0;\r\n            let perItemSaleValue = 0;\r\n            origRecords.forEach((rec) => {\r\n                saleValue += parseInt(rec.price);\r\n                perItemSaleValue += parseInt(rec.price) / parseInt(rec.quant);\r\n            });\r\n            tempRecords.push({\r\n                name: item,\r\n                value: saleValue,\r\n                count: origRecords.length,\r\n                avg: Math.round(perItemSaleValue / origRecords.length),\r\n            });\r\n        });\r\n\r\n        tempRecords.sort((a, b) => {\r\n            return b.value - a.value;\r\n        });\r\n\r\n        for (let i = 0; i < props.count; i++) {\r\n            this.data.children.push(tempRecords[i]);\r\n        }\r\n        // key is each date in the list\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div style={{ width: '100%', height: '500px' }}>\r\n                    <ResponsiveTreeMap\r\n                        data={this.data}\r\n                        identity=\"name\"\r\n                        value=\"value\"\r\n                        valueFormat=\".03~s\"\r\n                        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\r\n                        labelSkipSize={12}\r\n                        labelTextColor={'#fff'}\r\n                        parentLabelTextColor={{\r\n                            from: 'color',\r\n                            modifiers: [['darker', 2]],\r\n                        }}\r\n                        borderColor={{\r\n                            from: 'color',\r\n                            modifiers: [['darker', 0.1]],\r\n                        }}\r\n                        leavesOnly\r\n                        // @ts-ignore\r\n                        tooltip={(node: any) => {\r\n                            console.log(node);\r\n                            const data = node.node.data;\r\n                            return (\r\n                                <div\r\n                                    style={{\r\n                                        padding: ' 0.25rem 1rem',\r\n                                    }}\r\n                                >\r\n                                    <div>\r\n                                        <strong>{data.name}</strong>\r\n                                        <div>Sold: {data.count}</div>\r\n                                        <div>\r\n                                            Total value:{' '}\r\n                                            {data.value.toLocaleString()}\r\n                                        </div>\r\n                                        <div>\r\n                                            Avg price per unit:{' '}\r\n                                            {data.avg.toLocaleString()}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                            // return (\r\n                            //     <div\r\n                            //         style={{\r\n                            //             padding: '0.25rem',\r\n                            //             backgroundColor: '#999',\r\n                            //         }}\r\n                            //     >\r\n                            //         <div>\r\n                            //             <strong>\r\n                            //                 {this.dateToDayOfWeek(data.day)}\r\n                            //             </strong>\r\n                            //         </div>\r\n                            //         {data.guilds ? (\r\n                            //             data.guilds.map((guild: any) => (\r\n                            //                 <div\r\n                            //                     style={{\r\n                            //                         padding: '0.1rem 0.5rem',\r\n                            //                     }}\r\n                            //                 >\r\n                            //                     {guild.name}: {guild.value}\r\n                            //                 </div>\r\n                            //             ))\r\n                            //         ) : (\r\n                            //             <span />\r\n                            //         )}\r\n                            //         <div\r\n                            //             style={{\r\n                            //                 color: 'red',\r\n                            //                 padding: '0.1rem 0.5rem',\r\n                            //             }}\r\n                            //         >\r\n                            //             Total: {data.value ? data.value : 0}\r\n                            //         </div>\r\n                            //     </div>\r\n                            // );\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: 'grid',\r\n                        gridTemplate: '1fr 1fr 1fr 1fr 1fr / 1fr 1fr 1fr',\r\n                    }}\r\n                >\r\n                    {this.data.children.map((child, i) =>\r\n                        i < 15 ? (\r\n                            <div style={{ marginTop: '0.5rem' }}>\r\n                                <div>\r\n                                    {i + 1}) {child.name}\r\n                                </div>\r\n                                <div>{child.value.toLocaleString()}</div>\r\n                            </div>\r\n                        ) : (\r\n                            <span />\r\n                        )\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport TransactionHistory from './Charts/TransactionHistory';\r\nimport SellerBars from './Charts/SellerBars';\r\nimport ItemTreemap from './Charts/ItemTreemap';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Story extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Transaction History</h1>\r\n                <TransactionHistory data={this.props.data} />\r\n                <h1>Top Sellers</h1>\r\n                <SellerBars data={this.props.data.sellerMap} count={10} />\r\n                <h1>Item Marketshare</h1>\r\n                <ItemTreemap data={this.props.data.itemMap} count={75} />\r\n                <div style={{ paddingBottom: '2rem' }}> </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveLine } from '@nivo/line';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n}\r\n\r\nexport default class SellerBars extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        id: string;\r\n        data: {\r\n            x: string;\r\n            y: number;\r\n        }[];\r\n    }[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        const motifs = Object.keys(props.data)\r\n            .filter((item) => {\r\n                return /Crafting Motif [0-9]{1,2}: .*Chests/.test(item);\r\n            })\r\n            .filter((motif) => {\r\n                // return /.*Akaviri.*|.*Daggerfall.*|.*Order.*|.*Silver.*|.*Honor.*|.*Meridian.*|.*Dragonguard.*|.*Refabricated.*|.*Icereach.*/.test(\r\n                return /.*Honor.*|.*Silver.*|.*Refabricated.*|.*Meridian.*|.*Order.*|.*Icereach.*/.test(\r\n                    motif\r\n                );\r\n            });\r\n        console.log(motifs);\r\n\r\n        motifs.forEach((key) => {\r\n            const tempRecord: {\r\n                id: string;\r\n                data: {\r\n                    x: string;\r\n                    y: number;\r\n                }[];\r\n            } = {\r\n                id: key,\r\n                data: [],\r\n            };\r\n            const records = props.data[key];\r\n            const earliestDate = new Date('3/25/2021');\r\n            records.forEach((record) => {\r\n                const date = new Date(record.timestamp);\r\n                if (date > earliestDate)\r\n                    tempRecord.data.push({\r\n                        x: this.formatDate(date),\r\n                        y: parseInt(record.price),\r\n                    });\r\n            });\r\n\r\n            const temp: { [value: string]: { x: string; y: number } } = {};\r\n            const count: { [value: string]: number } = {};\r\n            tempRecord.data.forEach((point) => {\r\n                if (temp[point.x]) {\r\n                    temp[point.x].y = temp[point.x].y + point.y;\r\n                    count[point.x] += 1;\r\n                } else {\r\n                    temp[point.x] = point;\r\n                    count[point.x] = 1;\r\n                }\r\n            });\r\n            tempRecord.data.map((point) => {\r\n                return { x: point.x, y: point.y / count[point.x] };\r\n            });\r\n\r\n            tempRecord.data = Object.values(temp);\r\n            tempRecord.data.sort(\r\n                (a, b) => (new Date(b.x) as any) - (new Date(a.x) as any)\r\n            );\r\n\r\n            this.data.push(tempRecord);\r\n        });\r\n        this.data.push({\r\n            id: 'Anniversary Event Start',\r\n            data: [\r\n                { x: '4/1/2021', y: 0 },\r\n                { x: '4/1/2021', y: 280000 },\r\n            ],\r\n        });\r\n    }\r\n\r\n    formatDate(d: Date) {\r\n        return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\r\n    }\r\n\r\n    render() {\r\n        console.log(this.data);\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <p>Info</p>\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '500px',\r\n                    }}\r\n                >\r\n                    <ResponsiveLine\r\n                        data={this.data}\r\n                        xScale={{\r\n                            type: 'time',\r\n                            format: '%m/%d/%Y',\r\n                            useUTC: false,\r\n                            precision: 'day',\r\n                        }}\r\n                        xFormat=\"time:%m/%d/%Y\"\r\n                        yScale={{\r\n                            type: 'linear',\r\n                            stacked: false,\r\n                        }}\r\n                        axisLeft={{\r\n                            legend: 'linear scale',\r\n                            legendOffset: 12,\r\n                        }}\r\n                        axisBottom={{\r\n                            format: '%b %d',\r\n                            tickValues: 'every 4 days',\r\n                            legend: 'time scale',\r\n                            legendOffset: -12,\r\n                        }}\r\n                        margin={{ top: 50, right: 110, bottom: 50, left: 60 }}\r\n                        theme={{ textColor: '#fff' }}\r\n                        useMesh\r\n                        curve=\"monotoneX\"\r\n                        colors={{ scheme: 'paired' }}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                direction: 'column',\r\n                                itemWidth: 150,\r\n                                itemHeight: 20,\r\n                                translateX: 10,\r\n                            },\r\n                        ]}\r\n                        enableSlices={false}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/perfect_comp.2a26e959.png\";","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\nimport { ResponsiveBar } from '@nivo/bar';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    item: string;\r\n    computeStat: (arr: number[]) => number;\r\n    show: number;\r\n    title: string;\r\n}\r\nexport default class PlayerBarChart extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        player: string;\r\n        quant: number;\r\n    }[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const recordsPerPlayer: {\r\n            player: string;\r\n            recordsForItem: Record[];\r\n        }[] = [];\r\n\r\n        Object.keys(props.data).forEach((player) => {\r\n            const records = props.data[player];\r\n            const recordsForItem: Record[] = [];\r\n            records.forEach((record) => {\r\n                if (record.item === props.item) {\r\n                    recordsForItem.push(record);\r\n                }\r\n            });\r\n            if (recordsForItem.length > 0) {\r\n                recordsPerPlayer.push({ player, recordsForItem });\r\n            }\r\n        });\r\n        console.log(recordsPerPlayer);\r\n\r\n        recordsPerPlayer.forEach((portfolio) => {\r\n            const records = portfolio.recordsForItem;\r\n            const quant = records.map((record) => parseInt(record.quant));\r\n            this.data.push({\r\n                player: portfolio.player,\r\n                quant: props.computeStat(quant),\r\n            });\r\n        });\r\n        console.log(this.data);\r\n\r\n        this.data.sort((a, b) => b.quant - a.quant);\r\n        this.data = this.data.slice(0, props.show + 1);\r\n        console.log(this.data);\r\n    }\r\n\r\n    Title = (obj: any) => {\r\n        const { width, height } = obj;\r\n        return (\r\n            <text\r\n                x={width / 2}\r\n                textAnchor=\"middle\"\r\n                y={-15}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {this.props.title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '300px',\r\n                    }}\r\n                >\r\n                    <ResponsiveBar\r\n                        data={this.data}\r\n                        keys={['quant']}\r\n                        indexBy=\"player\"\r\n                        groupMode=\"grouped\"\r\n                        margin={{\r\n                            top: 50,\r\n                            right: 130,\r\n                            bottom: 50,\r\n                            left: 60,\r\n                        }}\r\n                        colors={'#0f0'}\r\n                        theme={{ textColor: '#fff' }}\r\n                        axisLeft={null}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                itemWidth: -10,\r\n                                itemHeight: 20,\r\n                                dataFrom: 'keys',\r\n                                direction: 'column',\r\n                            },\r\n                        ]}\r\n                        labelTextColor={'#fff'}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'bars',\r\n                            'markers',\r\n                            'legends',\r\n                            this.Title,\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    item: string;\r\n    players: string[];\r\n}\r\nexport default class PlayerScatterPlot extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        id: string;\r\n        data: { x: number; y: number }[];\r\n    }[] = [];\r\n    yMax: number = Number.MIN_VALUE;\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        props.players.forEach((player) => {\r\n            const playerRecords = props.data[player].filter(\r\n                (record) => record.item === props.item\r\n            );\r\n            const temp: { id: string; data: { x: number; y: number }[] } = {\r\n                id: player,\r\n                data: [],\r\n            };\r\n            playerRecords.forEach((record) => {\r\n                const price = parseInt(record.price) / parseInt(record.quant);\r\n                if (this.yMax < price) {\r\n                    this.yMax = price;\r\n                }\r\n                temp.data.push({\r\n                    x: parseInt(record.quant),\r\n                    y: price,\r\n                });\r\n            });\r\n            this.data.push(temp);\r\n        });\r\n    }\r\n\r\n    Title = (obj: any, title: string) => {\r\n        const { innerWidth } = obj;\r\n        console.log(obj);\r\n        return (\r\n            <text\r\n                x={innerWidth / 2}\r\n                textAnchor=\"middle\"\r\n                y={-15}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '300px',\r\n                    }}\r\n                >\r\n                    <ResponsiveScatterPlot\r\n                        data={this.data}\r\n                        margin={{ top: 60, right: 140, bottom: 70, left: 90 }}\r\n                        xScale={{ type: 'linear', min: 0, max: 'auto' }}\r\n                        xFormat={function (e) {\r\n                            return e + ' pcs';\r\n                        }}\r\n                        yScale={{\r\n                            type: 'linear',\r\n                            min: 0,\r\n                            max: 1.5 * this.yMax,\r\n                        }}\r\n                        yFormat={function (e) {\r\n                            return e + 'g per';\r\n                        }}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'bottom-right',\r\n                                direction: 'column',\r\n                                justify: false,\r\n                                translateX: 130,\r\n                                translateY: 0,\r\n                                itemWidth: 100,\r\n                                itemHeight: 12,\r\n                                itemsSpacing: 5,\r\n                                itemDirection: 'left-to-right',\r\n                                symbolSize: 12,\r\n                                symbolShape: 'circle',\r\n                                effects: [\r\n                                    {\r\n                                        on: 'hover',\r\n                                        style: {\r\n                                            itemOpacity: 1,\r\n                                        },\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ]}\r\n                        theme={{ textColor: '#fff' }}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'nodes',\r\n                            'markers',\r\n                            'legends',\r\n                            (obj) =>\r\n                                this.Title(\r\n                                    obj,\r\n                                    `Price per unit of ${\r\n                                        this.props.item\r\n                                    } for players: ${this.props.players.join(\r\n                                        ', '\r\n                                    )}`\r\n                                ),\r\n                        ]}\r\n                    />\r\n                    {/* <ResponsiveBar\r\n                        data={this.data}\r\n                        keys={['quant']}\r\n                        indexBy=\"player\"\r\n                        groupMode=\"grouped\"\r\n                        margin={{\r\n                            top: 50,\r\n                            right: 130,\r\n                            bottom: 50,\r\n                            left: 60,\r\n                        }}\r\n                        colors={'#0f0'}\r\n                        theme={{ textColor: '#fff' }}\r\n                        axisLeft={null}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                itemWidth: -10,\r\n                                itemHeight: 20,\r\n                                dataFrom: 'keys',\r\n                                direction: 'column',\r\n                            },\r\n                        ]}\r\n                        labelTextColor={'#fff'}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'bars',\r\n                            'markers',\r\n                            'legends',\r\n                            this.Title,\r\n                        ]}\r\n                    /> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport MotifTracker from './Charts/MotifTracker';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { Popover } from 'antd';\r\nimport ImgPerfectCompetition from '../perfect_comp.png';\r\nimport PlayerBarChart from './Analysis/PlayerBarChart';\r\nimport PlayerScatterPlot from './Analysis/PlayerScatterPlot';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Analysis extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.props;\r\n        return (\r\n            <div>\r\n                <h1>Preface</h1>\r\n                <p>\r\n                    To make the analysis easier, we will assume both buyers and\r\n                    sellers are only making use of tool provided by the game\r\n                    itself. This means we will not account for tools such as{' '}\r\n                    <a href=\"https://esouimods.github.io/3-master_merchant.html\">\r\n                        Master Merchant\r\n                    </a>{' '}\r\n                    (MM) and{' '}\r\n                    <a href=\"https://tamrieltradecentre.com/\">\r\n                        Tamriel Trade Center\r\n                    </a>{' '}\r\n                    (TTC), which only a small portion of the player base make\r\n                    use of.\r\n                </p>\r\n                <h1>1) Many firms</h1>\r\n                <p>\r\n                    From this data set alone, {data.sellers.length} unique\r\n                    sellers were recorded across {data.guilds.length} guilds.\r\n                    With over 200 guild traders available, there could be\r\n                    anywhere from {(100 * 200).toLocaleString()} to{' '}\r\n                    {(500 * 200).toLocaleString()} sellers.\r\n                </p>\r\n                <h1>2) Freedom of entry and exit</h1>\r\n                <h2>Freedom of entry</h2>\r\n                <p>\r\n                    Barriers to entry can go both ways. In order to sell items,\r\n                    one must be a member of a guild to have access to a trader.\r\n                    Depending on the guild, they may require a weekly fee to\r\n                    maintain membership, causing a barrier to enter the market\r\n                </p>\r\n                <h2>Freedom of exit</h2>\r\n                <p>\r\n                    In order to list an item on the market, a tax must be paid,\r\n                    based on the value of the item you are selling, which goes\r\n                    to oblivion (this is a measure implemented by the developers\r\n                    of many MMOs as one method of a{' '}\r\n                    <a href=\"https://en.wikipedia.org/wiki/Gold_sink\">\r\n                        gold sink\r\n                    </a>\r\n                    ). If a player is listing multiple high value items but\r\n                    suddenly has to exist the market, that gold will be\r\n                    permenetly lost as they won't make it back once the item(s)\r\n                    sell.\r\n                </p>\r\n                <h1>3) All firms produce an identical product</h1>\r\n                <p>\r\n                    The products that can be sold are determined by what items\r\n                    the developers create. Players are not able to create their\r\n                    own unique products, making this requirement true.\r\n                </p>\r\n                <h1>4) All firms are price takers</h1>\r\n                <p>\r\n                    In order for this condition to be true, an individual seller\r\n                    should have no influence over the price . The easiest way to\r\n                    determine this is by checking if a seller's demand curve is\r\n                    perfectly elastic{' '}\r\n                    <Popover\r\n                        content={\r\n                            <div style={{ width: '21vw' }}>\r\n                                <p>\r\n                                    In economics, elasticity is the measure of\r\n                                    the sensitivity to change between two\r\n                                    variables. In our scenario, perfect\r\n                                    elasticity implies that if a seller where to\r\n                                    change their price, all of the demand for\r\n                                    their items will disapear. In other words,\r\n                                    ploting a curve for demand would result in a\r\n                                    horizontal line with a slope of 0.\r\n                                </p>\r\n                                <img\r\n                                    src={ImgPerfectCompetition}\r\n                                    alt=\"Perfect competition\"\r\n                                    style={{ width: '20vw' }}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        title=\"Econommics: Elasticity\"\r\n                        trigger=\"hover\"\r\n                    >\r\n                        <QuestionCircleOutlined />\r\n                    </Popover>\r\n                </p>\r\n                <PlayerBarChart\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    computeStat={(arr: number[]) =>\r\n                        [...((new Set(arr) as unknown) as number[])].length\r\n                    }\r\n                    show={10}\r\n                    title={\r\n                        'Unique quantities for the quantity of dreugh wax sold, per player'\r\n                    }\r\n                />\r\n                {/* <PlayerBarChart\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    computeStat={(arr: number[]) =>\r\n                        arr.reduce((prev, curr) => prev + curr) / arr.length\r\n                    }\r\n                    show={10}\r\n                /> */}\r\n                <PlayerScatterPlot\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    players={['@3753']}\r\n                />\r\n                <h1>5) There is perfect information and knowledge</h1>\r\n                <MotifTracker data={this.props.data.itemMap} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n} from 'react-router-dom';\r\n\r\nimport Home from './components/Home';\r\nimport Story from './components/Story';\r\nimport { DataTable } from './classes/DataParser';\r\nimport Analysis from './components/Analysis';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class App extends React.PureComponent<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>The Economy of ESO</h1>\r\n                <nav className=\"nav\">\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/home\"\r\n                            >\r\n                                Home\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/overview\"\r\n                            >\r\n                                Overview\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/analysis\"\r\n                            >\r\n                                Analysis\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <Switch>\r\n                    <Route path=\"/app/analysis\">\r\n                        <Analysis data={this.props.data} />\r\n                    </Route>\r\n                    <Route path=\"/app/overview\">\r\n                        <Story data={this.props.data} />\r\n                    </Route>\r\n                    <Route path=\"/app/home\">\r\n                        <Home data={this.props.data} />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/spinner.3fd780cb.png\";","import * as React from 'react';\r\nimport {\r\n    Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n    useHistory,\r\n    Redirect,\r\n    RouteComponentProps,\r\n    withRouter,\r\n} from 'react-router-dom';\r\nimport App from '../App';\r\nimport DataParser from '../classes/DataParser';\r\nimport spinner from '../spinner.png';\r\n\r\ninterface IProps extends RouteComponentProps<any> {}\r\n\r\ninterface IState {\r\n    stageText: string;\r\n}\r\n\r\nclass Root extends React.Component<IProps, IState> {\r\n    props!: IProps;\r\n    parser: DataParser;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.parser = new DataParser(this.redirect, this.setStageText);\r\n        this.state = {\r\n            stageText: 'Fetching data...',\r\n        };\r\n        console.log(props);\r\n    }\r\n\r\n    setStageText = (text: string) => {\r\n        if (this.state) {\r\n            this.setState({ stageText: text });\r\n        }\r\n    };\r\n\r\n    redirect = () => {\r\n        console.log('here');\r\n        this.props.history.push('/app/home');\r\n        console.log(this.props.history);\r\n    };\r\n\r\n    render() {\r\n        console.log(this.parser.getDataTable());\r\n        console.log(this.props.history);\r\n        console.log(this.state);\r\n        if (\r\n            this.parser.getDataTable().global.length === 0 &&\r\n            this.props.history.location.pathname !== '/loading'\r\n        ) {\r\n            this.props.history.push('/loading');\r\n        }\r\n        return (\r\n            <Switch>\r\n                <Route\r\n                    path=\"/app\"\r\n                    component={() => {\r\n                        return <App data={this.parser.getDataTable()} />;\r\n                    }}\r\n                />\r\n                <Route path=\"/loading\">\r\n                    <div style={{ textAlign: 'center', marginTop: '10vh' }}>\r\n                        <h2>Please wait while the app processes the data</h2>\r\n                        <div>\r\n                            <div>{this.state.stageText}</div>\r\n                            <img\r\n                                src={spinner}\r\n                                style={{\r\n                                    width: '15rem',\r\n                                    marginTop: '2rem',\r\n                                    animationName: 'spinner',\r\n                                    animationDuration: '4s',\r\n                                    animationIterationCount: 'infinite',\r\n                                    background: 'transparent',\r\n                                }}\r\n                                alt=\"Spinner\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Route>\r\n                {/* <Redirect from=\"/\" to=\"/loading\" /> */}\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Root);\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Router } from 'react-router-dom';\r\nimport Root from './components/Root';\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory();\r\n// const parser = new DataParser();\r\n\r\nReactDOM.render(\r\n    <Router history={history}>\r\n        <Root />\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}