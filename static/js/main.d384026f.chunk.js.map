{"version":3,"sources":["classes/DataParser.ts","reportWebVitals.ts","components/Home.tsx","text/mmSample.ts","text/pyMain.ts","text/pyAnon.ts","text/pyRead.ts","text/pyTableau.ts","components/Charts/TransactionHistory.tsx","components/Charts/SellerBars.tsx","components/Charts/ItemTreemap.tsx","components/Charts/MotifTracker.tsx","components/Charts/ChordChart.tsx","components/Story.tsx","perfect_comp.png","components/Analysis/PlayerBarChart.tsx","components/Analysis/PlayerScatterPlot.tsx","components/Analysis/ItemScatterPlot.tsx","components/Analysis.tsx","App.tsx","spinner.png","components/Root.tsx","index.tsx"],"names":["DataParser","redirect","updateStage","global","buyerMap","buyers","sellerMap","sellers","itemMap","items","guildMap","guilds","dateMap","dates","i","len","isNode","process","versions","node","fetch","then","res","text","parse","worker","header","step","row","data","push","undefined","timestamp","name","item","insert","buyer","seller","guild","date","split","complete","console","log","length","Object","keys","delimiter","key","record","map","Math","ceil","this","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Home","props","href","style","a11yDark","language","wrapLongLines","Component","TransactionHistory","min","Date","max","avg","forEach","guildArr","exclude","includes","value","day","getMonth","getDate","getFullYear","getDay","className","dateToString","floor","reduce","prev","curr","width","height","to","from","tooltip","dateToDayOfWeek","padding","color","SellerBars","totalSaleCount","totalSaleValue","tempRecords","player","origRecords","saleValue","rec","parseInt","price","saleCount","nil","sort","a","b","count","toLocaleString","position","indexBy","groupMode","margin","top","right","bottom","left","colors","theme","textColor","axisLeft","legends","anchor","itemWidth","itemHeight","dataFrom","direction","labelTextColor","opacity","enableGridY","labelFormat","ItemTreemap","children","perItemSaleValue","quant","round","identity","valueFormat","labelSkipSize","parentLabelTextColor","modifiers","borderColor","leavesOnly","display","gridTemplate","child","marginTop","motifs","filter","test","motif","tempRecord","id","records","earliestDate","x","formatDate","y","temp","point","values","d","xScale","type","format","useUTC","precision","xFormat","yScale","stacked","legend","legendOffset","axisBottom","tickValues","useMesh","curve","scheme","translateX","enableSlices","serieId","yFormatted","xFormatted","ChordChart","matrix","Title","obj","title","center","textAnchor","fill","fontWeight","sellerArr","acc","slice","playerToIndex","pairings","pairing","reversed","pair","tempKeys","entry","index","Array","layers","arcTooltip","arc","formattedValue","ribbonTooltip","ribbon","source","target","labelRotation","Story","paddingBottom","PlayerBarChart","recordsPerPlayer","recordsForItem","portfolio","computeStat","show","PlayerScatterPlot","yMax","Number","MIN_VALUE","innerWidth","players","playerRecords","e","yFormat","justify","translateY","itemsSpacing","itemDirection","symbolSize","symbolShape","effects","on","itemOpacity","join","ItemScatterPlot","entries","recordDate","dateStart","dateEnd","formattedX","formattedY","Analysis","content","src","ImgPerfectCompetition","alt","trigger","QuestionCircleOutlined","arr","Set","App","exact","activeClassName","path","React","PureComponent","Root","parser","setStageText","state","setState","stageText","history","getDataTable","location","pathname","component","textAlign","spinner","animationName","animationDuration","animationIterationCount","background","withRouter","createBrowserHistory","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d384026f.chunk.js","sourcesContent":["// import { Record } from '../data_dump';\r\nimport { parse, ParseResult } from 'papaparse';\r\n\r\nexport interface DataTable {\r\n    global: Record[];\r\n    buyerMap: { [name: string]: Record[] };\r\n    buyers: string[];\r\n    sellerMap: { [name: string]: Record[] };\r\n    sellers: string[];\r\n    itemMap: { [item: string]: Record[] };\r\n    items: string[];\r\n    guildMap: { [guild: string]: Record[] };\r\n    guilds: string[];\r\n    dateMap: { [date: string]: Record[] };\r\n    dates: string[];\r\n}\r\n\r\nexport interface Record {\r\n    buyer: string;\r\n    guild: string;\r\n    item: string;\r\n    price: string;\r\n    quant: string;\r\n    seller: string;\r\n    timestamp: string;\r\n}\r\n\r\nexport default class DataParser {\r\n    global: Record[] = [];\r\n    buyerMap: { [name: string]: Record[] } = {};\r\n    buyers: string[] = [];\r\n    sellerMap: { [name: string]: Record[] } = {};\r\n    sellers: string[] = [];\r\n    itemMap: { [item: string]: Record[] } = {};\r\n    items: string[] = [];\r\n    guildMap: { [guild: string]: Record[] } = {};\r\n    guilds: string[] = [];\r\n    dateMap: { [date: string]: Record[] } = {};\r\n    dates: string[] = [];\r\n\r\n    i: number = 0;\r\n    len: number = 1;\r\n\r\n    private insert(\r\n        key: string,\r\n        record: Record,\r\n        map: { [key: string]: Record[] }\r\n    ) {\r\n        if (map[key] === undefined) {\r\n            map[key] = [];\r\n        }\r\n        map[key].push(record);\r\n    }\r\n\r\n    getProgress() {\r\n        return Math.ceil((this.i / this.len) * 100);\r\n    }\r\n\r\n    constructor(redirect: () => void, updateStage: (text: string) => void) {\r\n        updateStage('Fetching data...');\r\n        const isNode =\r\n            typeof process !== 'undefined' &&\r\n            process.versions != null &&\r\n            process.versions.node != null;\r\n        const url = isNode\r\n            ? 'NicolasNewman/CGT290-Final/master/data/data.csv'\r\n            : 'https://raw.githubusercontent.com/NicolasNewman/CGT290-Final/master/data/data.csv';\r\n\r\n        fetch(url)\r\n            .then((res) => res.text())\r\n            .then((text) => {\r\n                updateStage('Loading csv...');\r\n                // const prog = setInterval(() => {\r\n                //     console.log(this.i);\r\n                //     console.log(this.len);\r\n                //     updateStage(`Loading csv [${this.getProgress()}%]...`);\r\n                // }, 100);\r\n                // this.len = (text.match(/\\n/g) || []).length;\r\n                parse<Record>(text, {\r\n                    worker: true,\r\n                    header: true,\r\n\r\n                    step: (row) => {\r\n                        this.i = this.i + 1;\r\n                        const data = (row.data as unknown) as Record;\r\n                        // if (this.i % 50000 === 0) {\r\n                        //     console.log(this.i);\r\n                        //     updateStage(\r\n                        //         `Loading csv [${this.getProgress()}%]...`\r\n                        //     );\r\n                        // }\r\n                        this.global.push(data);\r\n                        if (data.timestamp === undefined) {\r\n                            return;\r\n                        }\r\n\r\n                        const name = data.item;\r\n                        this.insert(name, data, this.itemMap);\r\n                        const buyer = data.buyer;\r\n                        this.insert(buyer, data, this.buyerMap);\r\n                        const seller = data.seller;\r\n                        this.insert(seller, data, this.sellerMap);\r\n                        const guild = data.guild;\r\n                        this.insert(guild, data, this.guildMap);\r\n\r\n                        const date = data.timestamp.split(' ')[0];\r\n                        if (!this.dateMap[date]) {\r\n                            this.dates.push(date);\r\n                        }\r\n                        this.insert(date, data, this.dateMap);\r\n                    },\r\n                    complete: () => {\r\n                        console.log('Done!');\r\n                        console.log(this.i);\r\n                        console.log(this.len);\r\n                        updateStage('Done!');\r\n                        console.log(this.global[0]);\r\n                        console.log(this.global.length);\r\n                        console.log(this.dateMap);\r\n                        this.items = Object.keys(this.itemMap);\r\n                        this.buyers = Object.keys(this.buyerMap);\r\n                        this.sellers = Object.keys(this.sellerMap);\r\n                        this.guilds = Object.keys(this.guildMap);\r\n                        // clearTimeout(prog);\r\n                        redirect();\r\n                    },\r\n                    delimiter: '#',\r\n                });\r\n            });\r\n    }\r\n\r\n    getDataTable(): DataTable {\r\n        return {\r\n            global: this.global,\r\n            sellerMap: this.sellerMap,\r\n            sellers: this.sellers,\r\n            buyerMap: this.buyerMap,\r\n            buyers: this.buyers,\r\n            itemMap: this.itemMap,\r\n            items: this.items,\r\n            guildMap: this.guildMap,\r\n            guilds: this.guilds,\r\n            dateMap: this.dateMap,\r\n            dates: this.dates,\r\n        };\r\n    }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\r\nimport { a11yDark } from 'react-syntax-highlighter/dist/esm/styles/prism';\r\nimport MMSampleText from '../text/mmSample';\r\nimport PythonMain from '../text/pyMain';\r\nimport PythonAnon from '../text/pyAnon';\r\nimport PythonRead from '../text/pyRead';\r\nimport PythonCSV from '../text/pyTableau';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Home extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Overview</h1>\r\n                <p>\r\n                    In the Elder Scrolls Online (ESO), trading is done through\r\n                    traders owned by guilds. Each week guilds can bid on a\r\n                    trader and the guild with the highest bid gets to use that\r\n                    trader for the week. Traders are located in every major\r\n                    town, and since some are more populated then others, the\r\n                    average bid on a trader varies grately by location.\r\n                    <br />\r\n                    <br />\r\n                    Any player can go to these traders and use their gold to\r\n                    purchase items they desire, but only members of the guild\r\n                    can sell items through that trader. When a player purchases\r\n                    an item, a majority of the gold goes to the seller, but a\r\n                    small portion is taken as tax for the guild.\r\n                </p>\r\n                <h1>Analysis</h1>\r\n                <p>\r\n                    The goal of my analysis is to determine if ESO follows an\r\n                    economic model of perfect competition. For those unfimilar\r\n                    with economics, a market that is perfectly competitive has\r\n                    the following characteristics:\r\n                </p>\r\n                <ol>\r\n                    <li>Competition is at its greatest possible level</li>\r\n                    <li>\r\n                        There is perfect knowledge, with no time lags in the\r\n                        flow of information\r\n                    </li>\r\n                    <li>\r\n                        There are no barries to entry into or exit out of the\r\n                        market\r\n                    </li>\r\n                    <li>\r\n                        No single seller can influence the market price or\r\n                        conditions\r\n                    </li>\r\n                </ol>\r\n                <h1>Data</h1>\r\n                <p>\r\n                    In ESO, guild trader data is only visible to members within\r\n                    that guild, and only the past 10 days of sales are kept. A\r\n                    player by the name of Sharlikran created a program called{' '}\r\n                    <a href=\"https://www.esoui.com/downloads/info2753-MasterMerchant3.0.html\">\r\n                        Master Merchant\r\n                    </a>{' '}\r\n                    to analyze and collect this data. Unfortunetly, this means\r\n                    the data set used is limited to traders I have access too.\r\n                </p>\r\n                <p>A sample of a record within the data set is as follows: </p>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"lua\"\r\n                    wrapLongLines\r\n                >\r\n                    {MMSampleText}\r\n                </SyntaxHighlighter>\r\n                <p>\r\n                    Overall, data was recorded for{' '}\r\n                    {this.props.data.guilds.length} guilds, with{' '}\r\n                    {this.props.data.global.length} transactions being recorded\r\n                </p>\r\n                <h1>Processing</h1>\r\n                <p>\r\n                    A python script was used to process the data. Since the data\r\n                    was a lua file,{' '}\r\n                    <a href=\"https://pypi.org/project/lupa/\">lupa</a> was a very\r\n                    useful module to quickly import the data into a format\r\n                    recognizable to Python\r\n                </p>\r\n                <h2>Main.py</h2>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"python\"\r\n                    wrapLongLines\r\n                >\r\n                    {PythonMain}\r\n                </SyntaxHighlighter>\r\n                <h2>anonymizer.py</h2>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"python\"\r\n                    wrapLongLines\r\n                >\r\n                    {PythonAnon}\r\n                </SyntaxHighlighter>\r\n                <h2>read.py</h2>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"python\"\r\n                    wrapLongLines\r\n                >\r\n                    {PythonRead}\r\n                </SyntaxHighlighter>\r\n                <h2>convert_tableau.py</h2>\r\n                <SyntaxHighlighter\r\n                    style={a11yDark}\r\n                    language=\"python\"\r\n                    wrapLongLines\r\n                >\r\n                    {PythonCSV}\r\n                </SyntaxHighlighter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","const str = `MM01DataSavedVariables =\r\n{\r\n    [\"Default\"] = \r\n    {\r\n        [\"MasterMerchant\"] = \r\n        {\r\n            [\"$AccountWide\"] = \r\n            {\r\n                [\"dataLocations\"] = \r\n                {\r\n                    [\"NA Megaserver\"] = true,\r\n                },\r\n                [\"version\"] = 1,\r\n                [\"SalesData\"] = \r\n                {\r\n                    [122880] = \r\n                    {\r\n                        [\"50:16:3:7:0\"] = \r\n                        {\r\n                            [\"itemIcon\"] = \"/esoui/art/icons/gear_telvanni_1hsword_a.dds\",\r\n                            [\"wasAltered\"] = false,\r\n                            [\"itemAdderText\"] = \"cp160 blue superior weapon set war maiden sword one-handed sharpened\",\r\n                            [\"sales\"] = \r\n                            {\r\n                                [1] = \r\n                                {\r\n                                    [\"price\"] = 13500,\r\n                                    [\"guild\"] = \"AK Tamriel Trade\",\r\n                                    [\"itemLink\"] = \"|H0:item:122880:362:50:0:0:0:0:0:0:0:0:0:0:0:0:51:0:0:0:0:0|h|h\",\r\n                                    [\"id\"] = \"1490373815\",\r\n                                    [\"wasKiosk\"] = true,\r\n                                    [\"seller\"] = \"@MyUsername1\",\r\n                                    [\"quant\"] = 1,\r\n                                    [\"buyer\"] = \"@MyUsername2\",\r\n                                    [\"timestamp\"] = 1613007047,\r\n                                },\r\n                                [2] = \r\n                                {\r\n                                    [\"price\"] = 10000,\r\n                                    [\"guild\"] = \"Unstable Unicorns\",\r\n                                    [\"itemLink\"] = \"|H0:item:122880:362:50:0:0:0:0:0:0:0:0:0:0:0:0:51:0:0:0:0:0|h|h\",\r\n                                    [\"id\"] = \"1291545171\",\r\n                                    [\"wasKiosk\"] = true,\r\n                                    [\"seller\"] = \"@MyUsername3\",\r\n                                    [\"quant\"] = 1,\r\n                                    [\"buyer\"] = \"@MyUsername1\",\r\n                                    [\"timestamp\"] = 1590189492,\r\n                                },\r\n                            },\r\n                            [\"oldestTime\"] = 1590189492,\r\n                            [\"itemDesc\"] = \"War Maiden's Sword\",\r\n                            [\"totalCount\"] = 2,\r\n                        },\r\n                    },\r\n                },\r\n            }\r\n        }\r\n    }\r\n}`;\r\n\r\nexport default str;\r\n","const str = `from convert_tableau import dump_tableau\r\nfrom anonymizer import save\r\nfrom anonymizer import load\r\n\r\nif __name__ == '__main__':\r\n    load()\r\n    dump_tableau()\r\n    save()`;\r\n\r\nexport default str;\r\n","const str = `anon_dict = {}\r\ni = 1\r\n\r\ndef load(filename='dict.csv'):\r\n    global anon_dict\r\n    global i\r\n    with open(filename, 'r') as f:\r\n        for line in f:\r\n            (key, val) = line.split(',')\r\n            anon_dict[key] = val\r\n            i += 1\r\n\r\ndef get(name):\r\n    global anon_dict\r\n    global i\r\n    if name not in anon_dict:\r\n        anon_dict[name] = f'@{i}'\r\n        i += 1\r\n    return anon_dict[name]\r\n\r\n\r\ndef save(filename='dict.csv'):\r\n    global anon_dict\r\n    with open(filename, 'w') as f:\r\n        for key in anon_dict:\r\n            f.write(f'{key},{anon_dict[key]}\\n')\r\n`;\r\n\r\nexport default str;\r\n","const str = `import os\r\nimport re\r\n\r\nimport lupa\r\nfrom lupa import LuaRuntime\r\n\r\nlua = LuaRuntime(unpack_returned_tuples=True)\r\n\r\n\r\ndef find_all_files(path='./mm'):\r\n    data_files = []\r\n    dir_count = 0\r\n    file_count = 0\r\n    for root, dirs, files in os.walk(path):\r\n        dir_count += len(dirs)\r\n        for name in files:\r\n            if name.endswith(\".lua\"):\r\n                file_count += 1\r\n                full_path = os.path.join(root, name)\r\n                data_files.append(os.path.join(root, name))\r\n    print(f\"Found {file_count} files across {dir_count} directories\")\r\n    return data_files\r\n\r\n\r\ndef process_files(files, func):\r\n    lines = []\r\n    skipped = 0\r\n    file_count = len(files)\r\n\r\n    for i, file in enumerate(files):\r\n        print(f'[{i + 1}/{file_count}] Parsing {file}')\r\n        file = open(file, 'r')\r\n        file_str = file.read()\r\n        # Replace the MM file header\r\n        file_str = re.sub(r'MM[0-9]{2}DataSavedVariables =', '', file_str)\r\n        table = lua.eval(file_str)[\"Default\"][\"MasterMerchant\"][\"$AccountWide\"][\"SalesData\"]\r\n        for _, lv0 in enumerate(sorted(table.items())):\r\n            item_hash = lv0[0]\r\n            table_items = lv0[1]\r\n\r\n            for _, lv1 in enumerate(sorted(table_items.items())):\r\n                unknown_id = lv1[0]\r\n                table_grouping = lv1[1]\r\n\r\n                record = sorted(table_grouping.items())\r\n                if not (len(record) == 7 or len(record) == 4 or len(record) == 6):\r\n                    print(f'Warning: Could not parse record {record}')\r\n                    skipped += 1\r\n                    continue\r\n\r\n                item_desc = ''\r\n                table_sales = ''\r\n                if len(record) == 7:\r\n                    item_desc = record[1][1]\r\n                    table_sales = record[4][1]\r\n                if len(record) == 6:\r\n                    item_desc = record[1][1]\r\n                    table_sales = record[4][1]\r\n                if len(record) == 4:\r\n                    item_desc = record[1][1]\r\n                    table_sales = record[3][1]\r\n\r\n                for _, lv2 in enumerate(sorted(table_sales.items())):\r\n                    index = lv2[0]\r\n                    table_sale = lv2[1]\r\n                    sale = sorted(table_sale.items())\r\n                    line = func(item_desc, sale)\r\n                    lines.append(line)\r\n\r\n    print(f'Parsed {len(lines)} sale records across all files')\r\n    unique_lines = set(lines)\r\n    # print(f'{len(lines) - len(pd.unique(lines).tolist())} duplicates')\r\n    print(f'Skipped {skipped} records due to incomplete data')\r\n    print(f'Removed {len(lines) - len(unique_lines)} duplicate entries')\r\n    return unique_lines\r\n`;\r\n\r\nexport default str;\r\n","const str = `from datetime import datetime\r\nfrom read import find_all_files\r\nfrom read import process_files\r\nfrom anonymizer import get\r\n\r\n\r\ndef process_func(item_desc, sale):\r\n    buyer = get(sale[0][1])\r\n    guild = sale[1][1]\r\n    item_id = sale[2][1]\r\n    item_link = sale[3][1]\r\n    price = sale[4][1]\r\n    quant = sale[5][1]\r\n    seller = get(sale[6][1])\r\n    timestamp = sale[7][1]\r\n    timestamp_str = datetime.fromtimestamp(timestamp)\r\n    was_kiosk = sale[8][1]\r\n\r\n    return f'{item_desc}#{guild}#{buyer}#{seller}#{price}#{quant}#{timestamp_str}\\n'\r\n\r\n\r\ndef dump_tableau(filename='data_dump.csv'):\r\n    data = process_files(find_all_files(), process_func)\r\n    with open(filename, 'w') as f:\r\n        f.write('item#guild#buyer#seller#price#quant#timestamp\\n')\r\n        f.writelines(data)\r\n`;\r\n\r\nexport default str;\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n    exclude?: string[];\r\n}\r\n\r\nexport default class TransactionHistory extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        day: string;\r\n        value: number;\r\n        guilds: { name: string; value: number }[];\r\n    }[] = [];\r\n    min: Date = new Date('2100-1-1');\r\n    max: Date = new Date('1990-1-1');\r\n    avg: number[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        console.log(props);\r\n        // key is each date in the list\r\n        props.data.dates.forEach((key) => {\r\n            const guilds: { [key: string]: number } = {};\r\n\r\n            // compute the number of sales per guild for a particular date\r\n            props.data.dateMap[key].forEach((record) => {\r\n                guilds[record.guild] !== undefined\r\n                    ? guilds[record.guild]++\r\n                    : (guilds[record.guild] = 1);\r\n            });\r\n\r\n            // create an extra data field containing each guild and their computed number of sales\r\n            const guildArr: { name: string; value: number }[] = [];\r\n            Object.keys(guilds).forEach((guild) => {\r\n                if (!props.exclude?.includes(guild)) {\r\n                    guildArr.push({ name: guild, value: guilds[guild] });\r\n                }\r\n            });\r\n\r\n            // subtract the excluded guilds from the total value\r\n            let value = props.data.dateMap[key].length;\r\n            props.exclude?.forEach((guild) => {\r\n                console.log(guild);\r\n                console.log(guilds[guild]);\r\n                console.log(value);\r\n                value = value - (guilds[guild] ? guilds[guild] : 0);\r\n                console.log(value);\r\n            });\r\n\r\n            this.data.push({\r\n                day: key,\r\n                value,\r\n                guilds: guildArr,\r\n            });\r\n            this.avg.push(props.data.dateMap[key].length);\r\n            const date = new Date(key);\r\n            if (date < this.min) {\r\n                this.min = date;\r\n            }\r\n            if (date > this.max) {\r\n                this.max = date;\r\n            }\r\n        });\r\n        // for (let key in props.data.dates) {\r\n        //     if (!props.data.dateMap[key]) {\r\n        //         console.log(key);\r\n        //         continue;\r\n        //     }\r\n        //     this.data.push({\r\n        //         day: key,\r\n        //         value: props.data.dateMap[key].length,\r\n        //     });\r\n        //     const date = new Date(key);\r\n        //     if (date < this.min) {\r\n        //         this.min = date;\r\n        //     }\r\n        //     if (date > this.max) {\r\n        //         this.max = date;\r\n        //     }\r\n        // }\r\n        console.log(this.data);\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n    }\r\n\r\n    dateToString(date: Date) {\r\n        return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\r\n    }\r\n\r\n    dateToDayOfWeek(date: string): string {\r\n        const d = new Date(date);\r\n        const day = d.getDay();\r\n        switch (day) {\r\n            case 0:\r\n                return 'Sunday';\r\n            case 1:\r\n                return 'Monday';\r\n            case 2:\r\n                return 'Tuesday';\r\n            case 3:\r\n                return 'Wednesday';\r\n            case 4:\r\n                return 'Thursday';\r\n            case 5:\r\n                return 'Friday';\r\n            case 6:\r\n                return 'Saturday';\r\n            default:\r\n                return 'Unknown';\r\n        }\r\n    }\r\n\r\n    render() {\r\n        console.log(this.min);\r\n        console.log(this.max);\r\n        return (\r\n            <div className=\"chart\">\r\n                {this.props.exclude ? (\r\n                    <span />\r\n                ) : (\r\n                    <div>\r\n                        <p>\r\n                            Transactions were recorded between{' '}\r\n                            {this.dateToString(this.min)} and{' '}\r\n                            {this.dateToString(this.max)}\r\n                        </p>\r\n                        <p>\r\n                            The average amount of transactions per day was{' '}\r\n                            {Math.floor(\r\n                                this.avg.reduce((prev, curr) => prev + curr) /\r\n                                    this.avg.length\r\n                            )}\r\n                        </p>\r\n                    </div>\r\n                )}\r\n                <div style={{ width: '100%', height: '225px' }}>\r\n                    <ResponsiveCalendar\r\n                        data={this.data}\r\n                        to={this.max}\r\n                        from={this.min}\r\n                        tooltip={(...args) => {\r\n                            const data = (args[0] as any).data;\r\n                            console.log(data);\r\n                            return (\r\n                                <div\r\n                                    // style={{\r\n                                    //     padding: '0.25rem',\r\n                                    //     backgroundColor: '#999',\r\n                                    // }}\r\n                                    className=\"tooltip\"\r\n                                >\r\n                                    <div>\r\n                                        <strong>\r\n                                            {this.dateToDayOfWeek(data.day)}\r\n                                        </strong>\r\n                                    </div>\r\n                                    {data.guilds ? (\r\n                                        data.guilds.map((guild: any) => (\r\n                                            <div\r\n                                                style={{\r\n                                                    padding: '0.1rem 0.5rem',\r\n                                                }}\r\n                                            >\r\n                                                {guild.name}: {guild.value}\r\n                                            </div>\r\n                                        ))\r\n                                    ) : (\r\n                                        <span />\r\n                                    )}\r\n                                    <div\r\n                                        style={{\r\n                                            color: 'red',\r\n                                            padding: '0.1rem 0.5rem',\r\n                                        }}\r\n                                    >\r\n                                        Total: {data.value ? data.value : 0}\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        // from=\"2020-01-01\"\r\n                        // to=\"2021-05-01\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\nimport { ResponsiveBar } from '@nivo/bar';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\nexport default class SellerBars extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        player: string;\r\n        saleCount: number;\r\n        saleValue: number;\r\n        nil: number;\r\n    }[] = [];\r\n    totalSaleCount: number = 0;\r\n    totalSaleValue: number = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tempRecords: {\r\n            player: string;\r\n            saleCount: number;\r\n            saleValue: number;\r\n            nil: number;\r\n        }[] = [];\r\n        Object.keys(props.data).forEach((player) => {\r\n            const origRecords = props.data[player];\r\n            // const saleValue = parseInt(\r\n            //     origRecords.reduce((prev, curr) => {\r\n            //         return ({\r\n            //             price: parseInt(prev.price) + parseInt(curr.price),\r\n            //         } as unknown) as Record;\r\n            //     }).price\r\n            // );\r\n            let saleValue = 0;\r\n            origRecords.forEach((rec) => {\r\n                saleValue += parseInt(rec.price);\r\n            });\r\n            const saleCount = origRecords.length;\r\n            tempRecords.push({\r\n                player,\r\n                saleCount,\r\n                saleValue,\r\n                nil: 0,\r\n            });\r\n\r\n            this.totalSaleCount += saleCount;\r\n            this.totalSaleValue += saleValue;\r\n        });\r\n\r\n        tempRecords.sort((a, b) => {\r\n            return b.saleValue - a.saleValue;\r\n        });\r\n\r\n        for (let i = 0; i < props.count; i++) {\r\n            this.data.push(tempRecords[i]);\r\n        }\r\n        // key is each date in the list\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <div>\r\n                    <p>\r\n                        There was {Object.keys(this.props.data).length} unique\r\n                        sellers, who sold {this.totalSaleCount.toLocaleString()}{' '}\r\n                        items, valued at {this.totalSaleValue.toLocaleString()}{' '}\r\n                        gold\r\n                    </p>\r\n                </div>\r\n                <div style={{ position: 'relative', height: '300px' }}>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '300px',\r\n                            position: 'absolute',\r\n                        }}\r\n                    >\r\n                        <ResponsiveBar\r\n                            data={this.data}\r\n                            keys={['saleCount', 'nil']}\r\n                            indexBy=\"player\"\r\n                            groupMode=\"grouped\"\r\n                            margin={{\r\n                                top: 50,\r\n                                right: 130,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            colors={'#0f0'}\r\n                            theme={{ textColor: '#fff' }}\r\n                            axisLeft={null}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'top-right',\r\n                                    itemWidth: -10,\r\n                                    itemHeight: 20,\r\n                                    dataFrom: 'keys',\r\n                                    direction: 'column',\r\n                                },\r\n                            ]}\r\n                            labelTextColor={'#fff'}\r\n                        />\r\n                    </div>\r\n                    <div\r\n                        style={{\r\n                            width: '100%',\r\n                            height: '300px',\r\n                            position: 'absolute',\r\n                            opacity: '0.5',\r\n                        }}\r\n                    >\r\n                        <ResponsiveBar\r\n                            data={this.data}\r\n                            keys={['nil', 'saleValue']}\r\n                            indexBy=\"player\"\r\n                            groupMode=\"grouped\"\r\n                            margin={{\r\n                                top: 50,\r\n                                right: 130,\r\n                                bottom: 50,\r\n                                left: 60,\r\n                            }}\r\n                            colors={'#f00'}\r\n                            theme={{ textColor: '#fff' }}\r\n                            enableGridY={false}\r\n                            legends={[\r\n                                {\r\n                                    anchor: 'bottom-right',\r\n                                    itemWidth: -10,\r\n                                    itemHeight: 20,\r\n                                    dataFrom: 'keys',\r\n                                    direction: 'column',\r\n                                },\r\n                            ]}\r\n                            labelTextColor={'#fff'}\r\n                            labelFormat={'.3~s'}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveTreeMap } from '@nivo/treemap';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\nexport default class ItemTreemap extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        name: 'Items';\r\n        children: {\r\n            name: string;\r\n            value: number;\r\n            avg: number;\r\n            count: number;\r\n        }[];\r\n    } = { name: 'Items', children: [] };\r\n    totalSaleCount: number = 0;\r\n    totalSaleValue: number = 0;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const tempRecords: {\r\n            name: string;\r\n            value: number;\r\n            avg: number;\r\n            count: number;\r\n        }[] = [];\r\n        Object.keys(props.data).forEach((item) => {\r\n            const origRecords = props.data[item];\r\n            // const saleValue = parseInt(\r\n            //     origRecords.reduce((prev, curr) => {\r\n            //         return ({\r\n            //             price: parseInt(prev.price) + parseInt(curr.price),\r\n            //         } as unknown) as Record;\r\n            //     }).price\r\n            // );\r\n            let saleValue = 0;\r\n            let perItemSaleValue = 0;\r\n            origRecords.forEach((rec) => {\r\n                saleValue += parseInt(rec.price);\r\n                perItemSaleValue += parseInt(rec.price) / parseInt(rec.quant);\r\n            });\r\n            tempRecords.push({\r\n                name: item,\r\n                value: saleValue,\r\n                count: origRecords.length,\r\n                avg: Math.round(perItemSaleValue / origRecords.length),\r\n            });\r\n        });\r\n\r\n        tempRecords.sort((a, b) => {\r\n            return b.value - a.value;\r\n        });\r\n\r\n        for (let i = 0; i < props.count; i++) {\r\n            this.data.children.push(tempRecords[i]);\r\n        }\r\n        // key is each date in the list\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <div style={{ width: '100%', height: '500px' }}>\r\n                    <ResponsiveTreeMap\r\n                        data={this.data}\r\n                        identity=\"name\"\r\n                        value=\"value\"\r\n                        valueFormat=\".03~s\"\r\n                        margin={{ top: 10, right: 10, bottom: 10, left: 10 }}\r\n                        labelSkipSize={12}\r\n                        labelTextColor={'#fff'}\r\n                        parentLabelTextColor={{\r\n                            from: 'color',\r\n                            modifiers: [['darker', 2]],\r\n                        }}\r\n                        borderColor={{\r\n                            from: 'color',\r\n                            modifiers: [['darker', 0.1]],\r\n                        }}\r\n                        leavesOnly\r\n                        // @ts-ignore\r\n                        tooltip={(node: any) => {\r\n                            console.log(node);\r\n                            const data = node.node.data;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <div>\r\n                                        <strong>{data.name}</strong>\r\n                                        <div>Sold: {data.count}</div>\r\n                                        <div>\r\n                                            Total value:{' '}\r\n                                            {data.value.toLocaleString()}\r\n                                        </div>\r\n                                        <div>\r\n                                            Avg price per unit:{' '}\r\n                                            {data.avg.toLocaleString()}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                            // return (\r\n                            //     <div\r\n                            //         style={{\r\n                            //             padding: '0.25rem',\r\n                            //             backgroundColor: '#999',\r\n                            //         }}\r\n                            //     >\r\n                            //         <div>\r\n                            //             <strong>\r\n                            //                 {this.dateToDayOfWeek(data.day)}\r\n                            //             </strong>\r\n                            //         </div>\r\n                            //         {data.guilds ? (\r\n                            //             data.guilds.map((guild: any) => (\r\n                            //                 <div\r\n                            //                     style={{\r\n                            //                         padding: '0.1rem 0.5rem',\r\n                            //                     }}\r\n                            //                 >\r\n                            //                     {guild.name}: {guild.value}\r\n                            //                 </div>\r\n                            //             ))\r\n                            //         ) : (\r\n                            //             <span />\r\n                            //         )}\r\n                            //         <div\r\n                            //             style={{\r\n                            //                 color: 'red',\r\n                            //                 padding: '0.1rem 0.5rem',\r\n                            //             }}\r\n                            //         >\r\n                            //             Total: {data.value ? data.value : 0}\r\n                            //         </div>\r\n                            //     </div>\r\n                            // );\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div\r\n                    style={{\r\n                        display: 'grid',\r\n                        gridTemplate: '1fr 1fr 1fr 1fr 1fr / 1fr 1fr 1fr',\r\n                    }}\r\n                >\r\n                    {this.data.children.map((child, i) =>\r\n                        i < 15 ? (\r\n                            <div style={{ marginTop: '0.5rem' }}>\r\n                                <div>\r\n                                    {i + 1}) {child.name}\r\n                                </div>\r\n                                <div>{child.value.toLocaleString()}</div>\r\n                            </div>\r\n                        ) : (\r\n                            <span />\r\n                        )\r\n                    )}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveLine } from '@nivo/line';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n}\r\n\r\nexport default class SellerBars extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        id: string;\r\n        data: {\r\n            x: string;\r\n            y: number;\r\n        }[];\r\n    }[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        const motifs = Object.keys(props.data)\r\n            .filter((item) => {\r\n                return /Crafting Motif [0-9]{1,2}: .*Chests/.test(item);\r\n            })\r\n            .filter((motif) => {\r\n                // return /.*Akaviri.*|.*Daggerfall.*|.*Order.*|.*Silver.*|.*Honor.*|.*Meridian.*|.*Dragonguard.*|.*Refabricated.*|.*Icereach.*/.test(\r\n                return /.*Honor.*|.*Silver.*|.*Refabricated.*|.*Meridian.*|.*Order.*|.*Icereach.*/.test(\r\n                    motif\r\n                );\r\n            });\r\n        console.log(motifs);\r\n\r\n        motifs.forEach((key) => {\r\n            const tempRecord: {\r\n                id: string;\r\n                data: {\r\n                    x: string;\r\n                    y: number;\r\n                }[];\r\n            } = {\r\n                id: key,\r\n                data: [],\r\n            };\r\n            const records = props.data[key];\r\n            const earliestDate = new Date('3/25/2021');\r\n            records.forEach((record) => {\r\n                const date = new Date(record.timestamp);\r\n                if (date > earliestDate)\r\n                    tempRecord.data.push({\r\n                        x: this.formatDate(date),\r\n                        y: parseInt(record.price),\r\n                    });\r\n            });\r\n\r\n            const temp: { [value: string]: { x: string; y: number } } = {};\r\n            const count: { [value: string]: number } = {};\r\n            tempRecord.data.forEach((point) => {\r\n                if (temp[point.x]) {\r\n                    temp[point.x].y = temp[point.x].y + point.y;\r\n                    count[point.x] += 1;\r\n                } else {\r\n                    temp[point.x] = point;\r\n                    count[point.x] = 1;\r\n                }\r\n            });\r\n            tempRecord.data.map((point) => {\r\n                return { x: point.x, y: point.y / count[point.x] };\r\n            });\r\n\r\n            tempRecord.data = Object.values(temp);\r\n            tempRecord.data.sort(\r\n                (a, b) => (new Date(b.x) as any) - (new Date(a.x) as any)\r\n            );\r\n\r\n            this.data.push(tempRecord);\r\n        });\r\n        this.data.push({\r\n            id: 'Anniversary Event Start',\r\n            data: [\r\n                { x: '4/1/2021', y: 0 },\r\n                { x: '4/1/2021', y: 280000 },\r\n            ],\r\n        });\r\n    }\r\n\r\n    formatDate(d: Date) {\r\n        return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\r\n    }\r\n\r\n    render() {\r\n        console.log(this.data);\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '500px',\r\n                    }}\r\n                >\r\n                    <ResponsiveLine\r\n                        data={this.data}\r\n                        xScale={{\r\n                            type: 'time',\r\n                            format: '%m/%d/%Y',\r\n                            useUTC: false,\r\n                            precision: 'day',\r\n                        }}\r\n                        xFormat=\"time:%m/%d/%Y\"\r\n                        yScale={{\r\n                            type: 'linear',\r\n                            stacked: false,\r\n                        }}\r\n                        axisLeft={{\r\n                            legend: 'linear scale',\r\n                            legendOffset: 12,\r\n                        }}\r\n                        axisBottom={{\r\n                            format: '%b %d',\r\n                            tickValues: 'every 4 days',\r\n                            legend: 'time scale',\r\n                            legendOffset: -12,\r\n                        }}\r\n                        margin={{ top: 20, right: 110, bottom: 50, left: 60 }}\r\n                        theme={{ textColor: '#fff' }}\r\n                        useMesh\r\n                        curve=\"monotoneX\"\r\n                        colors={{ scheme: 'paired' }}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                direction: 'column',\r\n                                itemWidth: 150,\r\n                                itemHeight: 20,\r\n                                translateX: 10,\r\n                            },\r\n                        ]}\r\n                        enableSlices={false}\r\n                        tooltip={(data: any) => {\r\n                            console.log(data);\r\n                            const { point } = data;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <div>{point.serieId}</div>\r\n                                    <div>\r\n                                        Sold for an average of{' '}\r\n                                        {point.data.yFormatted} on{' '}\r\n                                        {point.data.xFormatted}\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveChord } from '@nivo/chord';\r\n\r\ninterface IProps {\r\n    buyers: { [name: string]: Record[] };\r\n    sellers: { [name: string]: Record[] };\r\n    count: number;\r\n}\r\n\r\n/**\r\n * This is the most disgusting thing I have ever written in my JS career\r\n *\r\n * May the FSM have mercy on our soul...\r\n * @param map - an object mapping records by the opposite of @key\r\n * @param key - the opposite person of the map you are passing\r\n * @returns the data mutated from an object of records seperated by buyer/seller to an array in ascending order of the most frequently occuring buyers / sellers, with their own mapping of the most frequent sellers / buyers who interacted with them, in ascending order\r\n */\r\nconst mutate = (\r\n    map: { [name: string]: Record[] },\r\n    key: 'buyer' | 'seller',\r\n    count: number\r\n) => {\r\n    return Object.keys(map)\r\n        .map((player) => {\r\n            const sellers: { [seller: string]: number } = map[player]\r\n                .map((rec) => rec[key])\r\n                .reduce((acc: { [value: string]: number }, curr) => {\r\n                    acc[curr] = -~acc[curr];\r\n\r\n                    return acc;\r\n                }, {});\r\n            return {\r\n                records: Object.keys(sellers)\r\n                    .map((seller) => {\r\n                        return {\r\n                            player: seller,\r\n                            count: sellers[seller],\r\n                        };\r\n                    })\r\n                    .sort((a, b) => b.count - a.count)\r\n                    .slice(0, count),\r\n                player,\r\n            };\r\n        })\r\n        .sort((a, b) => b.records.length - a.records.length)\r\n        .slice(0, count);\r\n};\r\n\r\nexport default class ChordChart extends Component<IProps> {\r\n    props!: IProps;\r\n    matrix: number[][];\r\n    keys: string[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const sellerArr = mutate(props.sellers, 'buyer', props.count);\r\n\r\n        let i = 0;\r\n        const playerToIndex: { [tag: string]: number } = {};\r\n        const pairings: { [pair: string]: number } = {};\r\n        sellerArr.forEach((seller) => {\r\n            seller.records.forEach((buyer) => {\r\n                pairings[`${seller.player}-${buyer.player}`] = buyer.count;\r\n            });\r\n        });\r\n        console.log(pairings);\r\n\r\n        // const pairingCount: {\r\n        //     [pair: string]: { forward: string; reverse: string; count: number };\r\n        // } = {};\r\n\r\n        Object.keys(pairings).forEach((pairing) => {\r\n            const split = pairing.split('-');\r\n            const reversed = `${split[1]}-${split[0]}`;\r\n            if (!pairings[reversed]) {\r\n                delete pairings[pairing];\r\n            } else if (pairings[pairing] === pairings[reversed]) {\r\n                delete pairings[pairing];\r\n                delete pairings[reversed];\r\n            }\r\n        });\r\n        console.log(pairings);\r\n\r\n        Object.keys(pairings).forEach((pair) => {\r\n            const split = pair.split('-');\r\n            playerToIndex[split[0]] ??= i++;\r\n        });\r\n        // console.log(pairingCount);\r\n        // console.log(pairings);\r\n        console.log(playerToIndex);\r\n\r\n        const tempKeys = Object.keys(playerToIndex)\r\n            .map((entry) => {\r\n                return { player: entry, index: playerToIndex[entry] };\r\n            })\r\n            .sort((a, b) => a.index - b.index);\r\n        this.keys = tempKeys.map((rec) => rec.player);\r\n        console.log(this.keys);\r\n\r\n        this.matrix = Array.from(Array(this.keys.length), () =>\r\n            Array(this.keys.length).fill(0)\r\n        );\r\n        // console.log(this.matrix);\r\n        Object.keys(pairings).forEach((pair) => {\r\n            const split = pair.split('-');\r\n            this.matrix[playerToIndex[split[0]]][playerToIndex[split[1]]] =\r\n                pairings[pair];\r\n            this.matrix[playerToIndex[split[1]]][playerToIndex[split[0]]] =\r\n                pairings[`${split[1]}-${split[0]}`];\r\n        });\r\n        console.log(this.matrix);\r\n    }\r\n\r\n    Title = (obj: any, title: string) => {\r\n        const { center } = obj;\r\n        console.log(obj);\r\n        return (\r\n            <text\r\n                x={center[0]}\r\n                textAnchor=\"middle\"\r\n                y={-60}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"chart\">\r\n                <div style={{ width: '100%', height: '500px' }}>\r\n                    <ResponsiveChord\r\n                        matrix={this.matrix}\r\n                        keys={this.keys}\r\n                        margin={{ top: 90, right: 90, bottom: 90, left: 90 }}\r\n                        layers={[\r\n                            'ribbons',\r\n                            'arcs',\r\n                            'labels',\r\n                            'legends',\r\n                            (obj: any) =>\r\n                                this.Title(\r\n                                    obj,\r\n                                    `Read as: seller sold to buyer \"n\" times`\r\n                                ),\r\n                        ]}\r\n                        arcTooltip={(data: any) => {\r\n                            const { arc } = data;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    {arc.id}: {arc.formattedValue}\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        ribbonTooltip={(data: any) => {\r\n                            console.log(data);\r\n                            const { ribbon } = data;\r\n                            const { source, target } = ribbon;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <div>\r\n                                        {source.id} sold to {target.id}{' '}\r\n                                        {source.formattedValue} times\r\n                                    </div>\r\n                                    <div>\r\n                                        {target.id} sold to {source.id}{' '}\r\n                                        {target.formattedValue} times\r\n                                    </div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                        colors={{ scheme: 'paired' }}\r\n                        labelRotation={-90}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport TransactionHistory from './Charts/TransactionHistory';\r\nimport SellerBars from './Charts/SellerBars';\r\nimport ItemTreemap from './Charts/ItemTreemap';\r\nimport MotifTracker from './Charts/MotifTracker';\r\nimport ChordChart from './Charts/ChordChart';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Story extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Transaction History</h1>\r\n                <TransactionHistory data={this.props.data} />\r\n                <h1>Top Sellers</h1>\r\n                <SellerBars data={this.props.data.sellerMap} count={10} />\r\n                <h1>Item Marketshare</h1>\r\n                <ItemTreemap data={this.props.data.itemMap} count={75} />\r\n                <div style={{ paddingBottom: '2rem' }}> </div>\r\n                <h1>Changes in Price as a Result of Changes in Supply</h1>\r\n                <MotifTracker data={this.props.data.itemMap} />\r\n                <em>\r\n                    April 1st was the start of the Anniversary event, where\r\n                    compleating any quest has a chance to give you any motif\r\n                    (recipe that teaches you how to craft a unique style of\r\n                    armor) in the game. This substatially increases the supply\r\n                    as they are normally very rare. As a result, we should\r\n                    expect the price to decrease\r\n                </em>\r\n                <h1>Interactions between Sellers {'&'} Buyers</h1>\r\n                <ChordChart\r\n                    buyers={this.props.data.buyerMap}\r\n                    sellers={this.props.data.sellerMap}\r\n                    count={250}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/perfect_comp.2a26e959.png\";","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveCalendar } from '@nivo/calendar';\r\nimport { ResponsiveBar } from '@nivo/bar';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    item: string;\r\n    computeStat: (arr: number[]) => number;\r\n    show: number;\r\n    title: string;\r\n}\r\nexport default class PlayerBarChart extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        player: string;\r\n        quant: number;\r\n    }[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const recordsPerPlayer: {\r\n            player: string;\r\n            recordsForItem: Record[];\r\n        }[] = [];\r\n\r\n        Object.keys(props.data).forEach((player) => {\r\n            const records = props.data[player];\r\n            const recordsForItem: Record[] = [];\r\n            records.forEach((record) => {\r\n                if (record.item === props.item) {\r\n                    recordsForItem.push(record);\r\n                }\r\n            });\r\n            if (recordsForItem.length > 0) {\r\n                recordsPerPlayer.push({ player, recordsForItem });\r\n            }\r\n        });\r\n        console.log(recordsPerPlayer);\r\n\r\n        recordsPerPlayer.forEach((portfolio) => {\r\n            const records = portfolio.recordsForItem;\r\n            const quant = records.map((record) => parseInt(record.quant));\r\n            this.data.push({\r\n                player: portfolio.player,\r\n                quant: props.computeStat(quant),\r\n            });\r\n        });\r\n        console.log(this.data);\r\n\r\n        this.data.sort((a, b) => b.quant - a.quant);\r\n        this.data = this.data.slice(0, props.show + 1);\r\n        console.log(this.data);\r\n    }\r\n\r\n    Title = (obj: any) => {\r\n        const { width, height } = obj;\r\n        return (\r\n            <text\r\n                x={width / 2}\r\n                textAnchor=\"middle\"\r\n                y={-15}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {this.props.title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '300px',\r\n                    }}\r\n                >\r\n                    <ResponsiveBar\r\n                        data={this.data}\r\n                        keys={['quant']}\r\n                        indexBy=\"player\"\r\n                        groupMode=\"grouped\"\r\n                        margin={{\r\n                            top: 50,\r\n                            right: 130,\r\n                            bottom: 50,\r\n                            left: 60,\r\n                        }}\r\n                        colors={'#0f0'}\r\n                        theme={{ textColor: '#fff' }}\r\n                        axisLeft={null}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                itemWidth: -10,\r\n                                itemHeight: 20,\r\n                                dataFrom: 'keys',\r\n                                direction: 'column',\r\n                            },\r\n                        ]}\r\n                        labelTextColor={'#fff'}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'bars',\r\n                            'markers',\r\n                            'legends',\r\n                            this.Title,\r\n                        ]}\r\n                        tooltip={(obj: any) => {\r\n                            const { data } = obj;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    {data.player} sold {data.quant} unique\r\n                                    quantities of {this.props.item}\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    item: string;\r\n    players: string[];\r\n}\r\nexport default class PlayerScatterPlot extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        id: string;\r\n        data: { x: number; y: number }[];\r\n    }[] = [];\r\n    yMax: number = Number.MIN_VALUE;\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        props.players.forEach((player) => {\r\n            const playerRecords = props.data[player].filter(\r\n                (record) => record.item === props.item\r\n            );\r\n            const temp: { id: string; data: { x: number; y: number }[] } = {\r\n                id: player,\r\n                data: [],\r\n            };\r\n            playerRecords.forEach((record) => {\r\n                const price = parseInt(record.price) / parseInt(record.quant);\r\n                if (this.yMax < price) {\r\n                    this.yMax = price;\r\n                }\r\n                temp.data.push({\r\n                    x: parseInt(record.quant),\r\n                    y: price,\r\n                });\r\n            });\r\n            this.data.push(temp);\r\n        });\r\n    }\r\n\r\n    Title = (obj: any, title: string) => {\r\n        const { innerWidth } = obj;\r\n        console.log(obj);\r\n        return (\r\n            <text\r\n                x={innerWidth / 2}\r\n                textAnchor=\"middle\"\r\n                y={-15}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '300px',\r\n                    }}\r\n                >\r\n                    <ResponsiveScatterPlot\r\n                        data={this.data}\r\n                        margin={{ top: 60, right: 140, bottom: 70, left: 90 }}\r\n                        xScale={{ type: 'linear', min: 0, max: 'auto' }}\r\n                        xFormat={function (e) {\r\n                            return e + ' pcs';\r\n                        }}\r\n                        yScale={{\r\n                            type: 'linear',\r\n                            min: 0,\r\n                            max: 1.5 * this.yMax,\r\n                        }}\r\n                        yFormat={function (e) {\r\n                            return e + 'g per';\r\n                        }}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'bottom-right',\r\n                                direction: 'column',\r\n                                justify: false,\r\n                                translateX: 130,\r\n                                translateY: 0,\r\n                                itemWidth: 100,\r\n                                itemHeight: 12,\r\n                                itemsSpacing: 5,\r\n                                itemDirection: 'left-to-right',\r\n                                symbolSize: 12,\r\n                                symbolShape: 'circle',\r\n                                effects: [\r\n                                    {\r\n                                        on: 'hover',\r\n                                        style: {\r\n                                            itemOpacity: 1,\r\n                                        },\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ]}\r\n                        theme={{ textColor: '#fff' }}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'nodes',\r\n                            'markers',\r\n                            'legends',\r\n                            (obj) =>\r\n                                this.Title(\r\n                                    obj,\r\n                                    `Price per unit of ${\r\n                                        this.props.item\r\n                                    } for players: ${this.props.players.join(\r\n                                        ', '\r\n                                    )}`\r\n                                ),\r\n                        ]}\r\n                        tooltip={(obj: any) => {\r\n                            const { data } = obj.node;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    {data.serieId} sold a stack of {data.x}{' '}\r\n                                    {this.props.item} for {data.y}g per unit\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    />\r\n                    {/* <ResponsiveBar\r\n                        data={this.data}\r\n                        keys={['quant']}\r\n                        indexBy=\"player\"\r\n                        groupMode=\"grouped\"\r\n                        margin={{\r\n                            top: 50,\r\n                            right: 130,\r\n                            bottom: 50,\r\n                            left: 60,\r\n                        }}\r\n                        colors={'#0f0'}\r\n                        theme={{ textColor: '#fff' }}\r\n                        axisLeft={null}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'top-right',\r\n                                itemWidth: -10,\r\n                                itemHeight: 20,\r\n                                dataFrom: 'keys',\r\n                                direction: 'column',\r\n                            },\r\n                        ]}\r\n                        labelTextColor={'#fff'}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'bars',\r\n                            'markers',\r\n                            'legends',\r\n                            this.Title,\r\n                        ]}\r\n                    /> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { Record } from '../../classes/DataParser';\r\nimport { ResponsiveScatterPlot } from '@nivo/scatterplot';\r\n\r\ninterface IProps {\r\n    data: { [name: string]: Record[] };\r\n    item: string;\r\n    dateStart: Date;\r\n    dateEnd: Date;\r\n}\r\nexport default class ItemScatterPlot extends Component<IProps> {\r\n    props!: IProps;\r\n    data: {\r\n        id: string;\r\n        data: { x: string; y: number }[];\r\n    }[] = [];\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const entries: {\r\n            [key: string]: {\r\n                id: string;\r\n                data: { x: string; y: number }[];\r\n            };\r\n        } = {};\r\n        props.data[props.item].forEach((record) => {\r\n            const recordDate = new Date(record.timestamp);\r\n            if (recordDate > props.dateStart && recordDate < props.dateEnd) {\r\n                // entry.data.push({\r\n                //     x: record.timestamp.split(' ')[0],\r\n                //     y: parseInt(record.price) / parseInt(record.quant),\r\n                // });\r\n                if (!entries[record.guild]) {\r\n                    entries[record.guild] = {\r\n                        id: record.guild,\r\n                        data: [\r\n                            {\r\n                                x: record.timestamp.split(' ')[0],\r\n                                y:\r\n                                    parseInt(record.price) /\r\n                                    parseInt(record.quant),\r\n                            },\r\n                        ],\r\n                    };\r\n                } else {\r\n                    entries[record.guild].data.push({\r\n                        x: record.timestamp.split(' ')[0],\r\n                        y: parseInt(record.price) / parseInt(record.quant),\r\n                    });\r\n                }\r\n            }\r\n        });\r\n        Object.keys(entries).forEach((entry) => this.data.push(entries[entry]));\r\n    }\r\n\r\n    Title = (obj: any, title: string) => {\r\n        const { innerWidth } = obj;\r\n        console.log(obj);\r\n        return (\r\n            <text\r\n                x={innerWidth / 2}\r\n                textAnchor=\"middle\"\r\n                y={-15}\r\n                fill=\"white\"\r\n                fontWeight=\"bold\"\r\n            >\r\n                {title}\r\n            </text>\r\n        );\r\n    };\r\n\r\n    formatDate(d: Date) {\r\n        return `${d.getMonth() + 1}/${d.getDate()}/${d.getFullYear()}`;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div\r\n                    style={{\r\n                        width: '100%',\r\n                        height: '300px',\r\n                    }}\r\n                >\r\n                    <ResponsiveScatterPlot\r\n                        data={this.data}\r\n                        margin={{ top: 60, right: 140, bottom: 70, left: 90 }}\r\n                        xScale={{\r\n                            type: 'time',\r\n                            format: '%Y-%m-%d',\r\n                            precision: 'day',\r\n                        }}\r\n                        xFormat=\"time:%Y-%m-%d\"\r\n                        // yScale={{\r\n                        //     type: 'linear',\r\n                        //     min: 0,\r\n                        //     // max: 1.5 * this.yMax,\r\n                        // }}\r\n                        // yFormat={function (e) {\r\n                        //     return e + 'g';\r\n                        // }}\r\n                        axisBottom={{\r\n                            format: '%b %d',\r\n                            tickValues: 'every 2 days',\r\n                        }}\r\n                        colors={{ scheme: 'category10' }}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'bottom-right',\r\n                                direction: 'column',\r\n                                justify: false,\r\n                                translateX: 130,\r\n                                translateY: 0,\r\n                                itemWidth: 100,\r\n                                itemHeight: 12,\r\n                                itemsSpacing: 5,\r\n                                itemDirection: 'left-to-right',\r\n                                symbolSize: 12,\r\n                                symbolShape: 'circle',\r\n                                effects: [\r\n                                    {\r\n                                        on: 'hover',\r\n                                        style: {\r\n                                            itemOpacity: 1,\r\n                                        },\r\n                                    },\r\n                                ],\r\n                            },\r\n                        ]}\r\n                        theme={{ textColor: '#fff' }}\r\n                        layers={[\r\n                            'grid',\r\n                            'axes',\r\n                            'nodes',\r\n                            'markers',\r\n                            'legends',\r\n                            (obj) =>\r\n                                this.Title(\r\n                                    obj,\r\n                                    `Sales of ${\r\n                                        this.props.item\r\n                                    } between ${this.formatDate(\r\n                                        this.props.dateStart\r\n                                    )} to ${this.formatDate(\r\n                                        this.props.dateEnd\r\n                                    )}`\r\n                                ),\r\n                        ]}\r\n                        tooltip={(obj: any) => {\r\n                            const { data } = obj.node;\r\n                            return (\r\n                                <div className=\"tooltip\">\r\n                                    <div>Guild: {data.serieId}</div>\r\n                                    <div>Date: {data.formattedX}</div>\r\n                                    <div>Price: {data.formattedY}g</div>\r\n                                </div>\r\n                            );\r\n                        }}\r\n                    />\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport { Component } from 'react';\r\nimport { DataTable } from '../classes/DataParser';\r\nimport MotifTracker from './Charts/MotifTracker';\r\nimport { QuestionCircleOutlined } from '@ant-design/icons';\r\nimport { Popover } from 'antd';\r\nimport ImgPerfectCompetition from '../perfect_comp.png';\r\nimport PlayerBarChart from './Analysis/PlayerBarChart';\r\nimport PlayerScatterPlot from './Analysis/PlayerScatterPlot';\r\nimport ItemScatterPlot from './Analysis/ItemScatterPlot';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class Analysis extends Component<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        const { data } = this.props;\r\n        return (\r\n            <div>\r\n                <h1>Preface</h1>\r\n                <p>\r\n                    To make the analysis easier, we will assume both buyers and\r\n                    sellers are only making use of tool provided by the game\r\n                    itself. This means we will not account for tools such as{' '}\r\n                    <a href=\"https://esouimods.github.io/3-master_merchant.html\">\r\n                        Master Merchant\r\n                    </a>{' '}\r\n                    (MM) and{' '}\r\n                    <a href=\"https://tamrieltradecentre.com/\">\r\n                        Tamriel Trade Center\r\n                    </a>{' '}\r\n                    (TTC), which only a small portion of the player base make\r\n                    use of.\r\n                </p>\r\n                <h1>1) Many firms</h1>\r\n                <p>\r\n                    From this data set alone, {data.sellers.length} unique\r\n                    sellers were recorded across {data.guilds.length} guilds.\r\n                    With over 200 guild traders available, there could be\r\n                    anywhere from {(100 * 200).toLocaleString()} to{' '}\r\n                    {(500 * 200).toLocaleString()} sellers.\r\n                </p>\r\n                <h1>2) Freedom of entry and exit</h1>\r\n                <h2>Freedom of entry</h2>\r\n                <p>\r\n                    Barriers to entry can go both ways. In order to sell items,\r\n                    one must be a member of a guild to have access to a trader.\r\n                    Depending on the guild, they may require a weekly fee to\r\n                    maintain membership, causing a barrier to enter the market\r\n                </p>\r\n                <h2>Freedom of exit</h2>\r\n                <p>\r\n                    In order to list an item on the market, a tax must be paid,\r\n                    based on the value of the item you are selling, which goes\r\n                    to oblivion (this is a measure implemented by the developers\r\n                    of many MMOs as one method of a{' '}\r\n                    <a href=\"https://en.wikipedia.org/wiki/Gold_sink\">\r\n                        gold sink\r\n                    </a>\r\n                    ). If a player is listing multiple high value items but\r\n                    suddenly has to exist the market, that gold will be\r\n                    permenetly lost as they won't make it back once the item(s)\r\n                    sell.\r\n                </p>\r\n                <h1>3) All firms produce an identical product</h1>\r\n                <p>\r\n                    The products that can be sold are determined by what items\r\n                    the developers create. Players are not able to create their\r\n                    own unique products, making this requirement true.\r\n                </p>\r\n                <h1>4) All firms are price takers</h1>\r\n                <p>\r\n                    In order for this condition to be true, an individual seller\r\n                    should have no influence over the price . The easiest way to\r\n                    determine this is by checking if a seller's demand curve is\r\n                    perfectly elastic{' '}\r\n                    <Popover\r\n                        content={\r\n                            <div style={{ width: '21vw' }}>\r\n                                <p>\r\n                                    In economics, elasticity is the measure of\r\n                                    the sensitivity to change between two\r\n                                    variables. In our scenario, perfect\r\n                                    elasticity implies that if a seller where to\r\n                                    change their price, all of the demand for\r\n                                    their items will disapear. In other words,\r\n                                    ploting a curve for demand would result in a\r\n                                    horizontal line with a slope of 0.\r\n                                </p>\r\n                                <img\r\n                                    src={ImgPerfectCompetition}\r\n                                    alt=\"Perfect competition\"\r\n                                    style={{ width: '20vw' }}\r\n                                />\r\n                            </div>\r\n                        }\r\n                        title=\"Econommics: Elasticity\"\r\n                        trigger=\"hover\"\r\n                    >\r\n                        <QuestionCircleOutlined />\r\n                    </Popover>\r\n                </p>\r\n                <p>\r\n                    The easiest way to check this is to find a seller with a\r\n                    large number of distinct quantities sold for a particular\r\n                    item\r\n                </p>\r\n                <PlayerBarChart\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    computeStat={(arr: number[]) =>\r\n                        [...((new Set(arr) as unknown) as number[])].length\r\n                    }\r\n                    show={10}\r\n                    title={\r\n                        'Unique quantities for the quantity of dreugh wax sold, per player'\r\n                    }\r\n                />\r\n                <p>\r\n                    Looking at the above chart, player @3753 sold 11 different\r\n                    quantities of the item\r\n                </p>\r\n                {/* <PlayerBarChart\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    computeStat={(arr: number[]) =>\r\n                        arr.reduce((prev, curr) => prev + curr) / arr.length\r\n                    }\r\n                    show={10}\r\n                /> */}\r\n                <PlayerScatterPlot\r\n                    data={this.props.data.sellerMap}\r\n                    item=\"dreugh wax\"\r\n                    players={['@3753']}\r\n                />\r\n                <p>\r\n                    If we make a Quantity v. Price chart, we can see that the\r\n                    line of best fit would have a slope near 0, making this\r\n                    true.\r\n                </p>\r\n                <h1>5) There is perfect information and knowledge</h1>\r\n                {/* <MotifTracker data={this.props.data.itemMap} /> */}\r\n                <p>\r\n                    For this condition to be true, everyone must be aware of the\r\n                    most up-to-date info on prices and events that could effect\r\n                    prices\r\n                </p>\r\n                <p>\r\n                    On March 8th, U29: <em>The Flames of Ambition</em> was\r\n                    released. With this update, the max level was raised for the\r\n                    first time in over 3 years. As a result of this, many\r\n                    competitive players wanted to get to the new level cap as\r\n                    fast as possible. One way to do this is with a potion called\r\n                    Mythic Ambrosia, which increases the rate at which you level\r\n                    up by 150%.\r\n                </p>\r\n                <p>\r\n                    At this point in time, many who are aware of ecomonics will\r\n                    know that with a drastic increase in demand, prices will\r\n                    skyrocket. If this condition was true, every seller would\r\n                    have been aware of this and have accounted for it\r\n                    accordingly.\r\n                </p>\r\n                <ItemScatterPlot\r\n                    item=\"Aetherial Dust\"\r\n                    data={this.props.data.itemMap}\r\n                    dateStart={new Date('3/05/2021')}\r\n                    dateEnd={new Date('3/30/2021')}\r\n                />\r\n                <p>\r\n                    Looking at the above chart, some interesting trends surface:\r\n                </p>\r\n                <ol>\r\n                    <li>\r\n                        The point at which the price will be highest is right\r\n                        when it becomes available. Looking at sales before the\r\n                        8th, we see some people sold too early and lost a\r\n                        substantial amount of money\r\n                    </li>\r\n                    <li>\r\n                        Lucian Allegiance is one of the most competitive trading\r\n                        guilds in the game, holding their trader at the most\r\n                        populous city of Mournhold. Looking at all of the sales\r\n                        at the peak (March 7th), this was the only guild which\r\n                        sold the item at an inflated price. The only sale from\r\n                        another guild was at the original price before the price\r\n                        increase\r\n                    </li>\r\n                    <li>\r\n                        As the time since the updates draw out, start seeing\r\n                        more and more sales from other guilds. This is most\r\n                        likely due to word of mouth spreading once players can\r\n                        physically see the price increase\r\n                    </li>\r\n                </ol>\r\n                <p>\r\n                    Based on these observations, the spread of information\r\n                    doesn't appear to immedietly reach everyone, making this\r\n                    condition untrue\r\n                </p>\r\n                <h1>Conclusion</h1>\r\n                <p>\r\n                    After careful analysis, the only conditions which hold true\r\n                    are 1, 3, and 4. Since 2 and 5 don't, we cannot use this\r\n                    economy as a model for perfect competition\r\n                </p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\n// import logo from './logo.svg';\r\nimport './App.css';\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n} from 'react-router-dom';\r\n\r\nimport Home from './components/Home';\r\nimport Story from './components/Story';\r\nimport { DataTable } from './classes/DataParser';\r\nimport Analysis from './components/Analysis';\r\n\r\ninterface IProps {\r\n    data: DataTable;\r\n}\r\n\r\nexport default class App extends React.PureComponent<IProps> {\r\n    props!: IProps;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <h1>The Economy of ESO</h1>\r\n                <nav className=\"nav\">\r\n                    <ul>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/home\"\r\n                            >\r\n                                Home\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/overview\"\r\n                            >\r\n                                Overview\r\n                            </NavLink>\r\n                        </li>\r\n                        <li>\r\n                            <NavLink\r\n                                exact\r\n                                activeClassName=\"activeNav\"\r\n                                to=\"/app/analysis\"\r\n                            >\r\n                                Analysis\r\n                            </NavLink>\r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n                <Switch>\r\n                    <Route path=\"/app/analysis\">\r\n                        <Analysis data={this.props.data} />\r\n                    </Route>\r\n                    <Route path=\"/app/overview\">\r\n                        <Story data={this.props.data} />\r\n                    </Route>\r\n                    <Route path=\"/app/home\">\r\n                        <Home data={this.props.data} />\r\n                    </Route>\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","export default __webpack_public_path__ + \"static/media/spinner.3fd780cb.png\";","import * as React from 'react';\r\nimport {\r\n    Router,\r\n    Switch,\r\n    Route,\r\n    NavLink,\r\n    useHistory,\r\n    Redirect,\r\n    RouteComponentProps,\r\n    withRouter,\r\n} from 'react-router-dom';\r\nimport App from '../App';\r\nimport DataParser from '../classes/DataParser';\r\nimport spinner from '../spinner.png';\r\n\r\ninterface IProps extends RouteComponentProps<any> {}\r\n\r\ninterface IState {\r\n    stageText: string;\r\n}\r\n\r\nclass Root extends React.Component<IProps, IState> {\r\n    props!: IProps;\r\n    parser: DataParser;\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        this.parser = new DataParser(this.redirect, this.setStageText);\r\n        this.state = {\r\n            stageText: 'Fetching data...',\r\n        };\r\n        console.log(props);\r\n    }\r\n\r\n    setStageText = (text: string) => {\r\n        if (this.state) {\r\n            this.setState({ stageText: text });\r\n        }\r\n    };\r\n\r\n    redirect = () => {\r\n        console.log('here');\r\n        this.props.history.push('/app/home');\r\n        console.log(this.props.history);\r\n    };\r\n\r\n    render() {\r\n        console.log(this.parser.getDataTable());\r\n        console.log(this.props.history);\r\n        console.log(this.state);\r\n        if (\r\n            this.parser.getDataTable().global.length === 0 &&\r\n            this.props.history.location.pathname !== '/loading'\r\n        ) {\r\n            this.props.history.push('/loading');\r\n        }\r\n        return (\r\n            <Switch>\r\n                <Route\r\n                    path=\"/app\"\r\n                    component={() => {\r\n                        return <App data={this.parser.getDataTable()} />;\r\n                    }}\r\n                />\r\n                <Route path=\"/loading\">\r\n                    <div style={{ textAlign: 'center', marginTop: '10vh' }}>\r\n                        <h2>Please wait while the app processes the data</h2>\r\n                        <div>\r\n                            <div>{this.state.stageText}</div>\r\n                            <img\r\n                                src={spinner}\r\n                                style={{\r\n                                    width: '15rem',\r\n                                    marginTop: '2rem',\r\n                                    animationName: 'spinner',\r\n                                    animationDuration: '4s',\r\n                                    animationIterationCount: 'infinite',\r\n                                    background: 'transparent',\r\n                                }}\r\n                                alt=\"Spinner\"\r\n                            />\r\n                        </div>\r\n                    </div>\r\n                </Route>\r\n                {/* <Redirect from=\"/\" to=\"/loading\" /> */}\r\n            </Switch>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Root);\r\n","/* eslint-disable @typescript-eslint/no-useless-constructor */\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n// import App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Router } from 'react-router-dom';\r\nimport Root from './components/Root';\r\n\r\nimport { createBrowserHistory } from 'history';\r\n\r\nconst history = createBrowserHistory();\r\n// const parser = new DataParser();\r\n\r\nReactDOM.render(\r\n    <Router history={history}>\r\n        <Root />\r\n    </Router>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}